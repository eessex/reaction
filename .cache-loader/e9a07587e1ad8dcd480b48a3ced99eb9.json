{"remainingRequest":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/eve/development/reaction/src/Components/Authentication/Types.ts","dependencies":[{"path":"/Users/eve/development/reaction/src/Components/Authentication/Types.ts","mtime":1537112679000},{"path":"/Users/eve/development/reaction/.babelrc","mtime":1537112679000},{"path":"/Users/eve/development/reaction/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["export var ModalType;\n\n(function (ModalType) {\n  ModalType[\"login\"] = \"login\";\n  ModalType[\"signup\"] = \"signup\";\n  ModalType[\"forgot\"] = \"forgot\";\n})(ModalType || (ModalType = {}));",{"version":3,"sources":["/Users/eve/development/reaction/src/Components/Authentication/Types.ts"],"names":["ModalType"],"mappings":"AAEA,WAAYA,SAAZ;;WAAYA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;GAAAA,S,KAAAA,S","sourcesContent":["import { FormikProps } from \"formik\"\n\nexport enum ModalType {\n  login = \"login\",\n  signup = \"signup\",\n  forgot = \"forgot\",\n}\n\nexport interface InputValues {\n  name?: string\n  email?: string\n  password?: string\n  accepted_terms_of_service?: boolean\n}\n\nexport type SubmitHandler = (\n  values: InputValues,\n  formikBag: FormikProps<InputValues>\n) => void\n\nexport interface FormProps {\n  /**\n   * any global error that comes from an external data source\n   * (e.g. server)\n   */\n  contextModule?: string\n  error?: string\n  values?: InputValues\n  handleSubmit?: SubmitHandler\n  handleTypeChange?: (modalType: ModalType) => void\n  intent?: string\n  onFacebookLogin?: (e: Event) => void\n  onTwitterLogin?: (e: Event) => void\n  onBackButtonClicked?: (e: Event) => void\n}\n\nexport interface ModalOptions {\n  /**\n   * the subtitle of the form\n   */\n  copy?: string\n  /**\n   * the type of modal to display.\n   */\n  mode?: ModalType\n  /**\n   * the page path the user is redirected to after successfully\n   * login or account creation after onboarding.\n   */\n  destination?: string\n  /**\n   * the page path the user is redirected to after successfully\n   * login or account creation (skips onboarding).\n   */\n  redirectTo?: string\n  /**\n   * the action taken that prompted user to signup or login.\n   */\n  intent?: string\n  /**\n   * the page before the page on which the sign up was triggered.\n   */\n  signupReferer?: string\n  /**\n   * defines an action to take after the user successfully signs up\n   *\n   * @example\n   * {\n   *   action: 'save',\n   *   objectId: artwork.id\n   * }\n   */\n  afterSignUpAction?: string\n  /*\n   * the location where the modal was triggered.\n   */\n  contextModule?: string\n  /**\n   * the type of action that triggered the modal (eg: click, timed)\n   */\n  trigger?: string\n  /**\n   * the number of seconds before a modal was triggered\n   */\n  triggerSeconds?: number\n}\n\nexport type FormComponentType =\n  | React.SFC<FormProps>\n  | React.ComponentClass<FormProps>\n"]}]}