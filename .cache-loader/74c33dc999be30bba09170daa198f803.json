{"remainingRequest":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/eve/development/reaction/src/Utils/get.ts","dependencies":[{"path":"/Users/eve/development/reaction/src/Utils/get.ts","mtime":1538070271000},{"path":"/Users/eve/development/reaction/.babelrc","mtime":1537112679000},{"path":"/Users/eve/development/reaction/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["/**\n * Type-safe access of deep property of an object\n *\n * Thanks! https://github.com/claudepache/es-optional-chaining/issues/2#issuecomment-318680932\n *\n * @param obj                     Object to get deep property\n * @param unsafeDataOperation     Function that returns the deep property\n * @param valueIfFailOrUndefined  Value to return in case if there is no such property\n */\nexport function get(obj, unsafeDataOperation, valueIfFailOrUndefined) {\n  try {\n    var result = unsafeDataOperation(obj);\n\n    if (result) {\n      return result;\n    } else {\n      throw new Error();\n    }\n\n    return;\n  } catch (error) {\n    return valueIfFailOrUndefined;\n  }\n}",{"version":3,"sources":["/Users/eve/development/reaction/src/Utils/get.ts"],"names":["get","obj","unsafeDataOperation","valueIfFailOrUndefined","result","Error","error"],"mappings":"AAAA;;;;;;;;;AASA,OAAO,SAASA,GAAT,CACLC,GADK,EAELC,mBAFK,EAGLC,sBAHK,EAIU;AACf,MAAI;AACF,QAAMC,MAAM,GAAGF,mBAAmB,CAACD,GAAD,CAAlC;;AACA,QAAIG,MAAJ,EAAY;AACV,aAAOA,MAAP;AACD,KAFD,MAEO;AACL,YAAM,IAAIC,KAAJ,EAAN;AACD;;AACD;AACD,GARD,CAQE,OAAOC,KAAP,EAAc;AACd,WAAOH,sBAAP;AACD;AACF","sourcesContent":["/**\n * Type-safe access of deep property of an object\n *\n * Thanks! https://github.com/claudepache/es-optional-chaining/issues/2#issuecomment-318680932\n *\n * @param obj                     Object to get deep property\n * @param unsafeDataOperation     Function that returns the deep property\n * @param valueIfFailOrUndefined  Value to return in case if there is no such property\n */\nexport function get<O, T>(\n  obj: O,\n  unsafeDataOperation: (x: O) => T,\n  valueIfFailOrUndefined?: T\n): T | undefined {\n  try {\n    const result = unsafeDataOperation(obj)\n    if (result) {\n      return result\n    } else {\n      throw new Error()\n    }\n    return\n  } catch (error) {\n    return valueIfFailOrUndefined\n  }\n}\n"]}]}