{"remainingRequest":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/eve/development/reaction/src/Components/Title.tsx","dependencies":[{"path":"/Users/eve/development/reaction/src/Components/Title.tsx","mtime":1529688806000},{"path":"/Users/eve/development/reaction/.babelrc","mtime":1537112679000},{"path":"/Users/eve/development/reaction/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["function _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    font-size: \", \";\\n  \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { garamond } from \"../Assets/Fonts\";\nimport React from \"react\"; // @ts-ignore\n\nimport styled from \"styled-components\";\nimport { media } from \"./Helpers\";\nvar titleSizes = {\n  xxsmall: \"s15\",\n  small: \"s23\",\n  medium: \"s30\",\n  large: \"s37\",\n  xlarge: \"s50\"\n};\n\nvar Title = function Title(props) {\n  var newProps = _objectSpread({}, props);\n\n  delete newProps.titleSize;\n  return React.createElement(\"div\", newProps, props.children);\n};\n\nvar StyledTitle = styled(Title).withConfig({\n  displayName: \"Title__StyledTitle\",\n  componentId: \"s9fsem3-0\"\n})([\"color:\", \";margin:20px 0;\", \";\", \";\"], function (props) {\n  return props.color;\n}, function (p) {\n  return garamond(titleSizes[p.titleSize]);\n}, media.sm(_templateObject(), titleSizes.small));\nStyledTitle.defaultProps = {\n  titleSize: \"medium\",\n  color: \"inherit\"\n};\nexport default StyledTitle;",{"version":3,"sources":["/Users/eve/development/reaction/src/Components/Title.tsx"],"names":["garamond","React","styled","media","titleSizes","xxsmall","small","medium","large","xlarge","Title","props","newProps","titleSize","children","StyledTitle","color","p","sm","defaultProps"],"mappings":";;;;;;;;;;;;;;;;AAAA,SAASA,QAAT;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CACA;;AACA,OAAOC,MAAP,MAA6C,mBAA7C;AACA,SAASC,KAAT;AASA,IAAMC,UAAU,GAAG;AACjBC,EAAAA,OAAO,EAAE,KADQ;AAEjBC,EAAAA,KAAK,EAAE,KAFU;AAGjBC,EAAAA,MAAM,EAAE,KAHS;AAIjBC,EAAAA,KAAK,EAAE,KAJU;AAKjBC,EAAAA,MAAM,EAAE;AALS,CAAnB;;AAQA,IAAMC,KAA4B,GAAG,SAA/BA,KAA+B,CAAAC,KAAK,EAAI;AAC5C,MAAMC,QAAoB,qBAAQD,KAAR,CAA1B;;AACA,SAAOC,QAAQ,CAACC,SAAhB;AAEA,SAAO,2BAASD,QAAT,EAAoBD,KAAK,CAACG,QAA1B,CAAP;AACD,CALD;;AAOA,IAAMC,WAAW,GAAGb,MAAM,CAACQ,KAAD,CAAT;AAAA;AAAA;AAAA,4CACN,UAAAC,KAAK;AAAA,SAAIA,KAAK,CAACK,KAAV;AAAA,CADC,EAGb,UAAAC,CAAC;AAAA,SAAIjB,QAAQ,CAACI,UAAU,CAACa,CAAC,CAACJ,SAAH,CAAX,CAAZ;AAAA,CAHY,EAIbV,KAAK,CAACe,EAJO,oBAKAd,UAAU,CAACE,KALX,EAAjB;AASAS,WAAW,CAACI,YAAZ,GAA2B;AACzBN,EAAAA,SAAS,EAAE,QADc;AAEzBG,EAAAA,KAAK,EAAE;AAFkB,CAA3B;AAKA,eAAeD,WAAf","sourcesContent":["import { garamond } from \"Assets/Fonts\"\nimport React from \"react\"\n// @ts-ignore\nimport styled, { StyledComponentClass } from \"styled-components\"\nimport { media } from \"./Helpers\"\n\nexport type TitleSize = \"xxsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\"\n\nexport interface TitleProps extends React.HTMLProps<HTMLDivElement> {\n  titleSize?: TitleSize\n  color?: string\n}\n\nconst titleSizes = {\n  xxsmall: \"s15\",\n  small: \"s23\",\n  medium: \"s30\",\n  large: \"s37\",\n  xlarge: \"s50\",\n}\n\nconst Title: React.SFC<TitleProps> = props => {\n  const newProps: TitleProps = { ...props }\n  delete newProps.titleSize\n\n  return <div {...newProps}>{props.children}</div>\n}\n\nconst StyledTitle = styled(Title)`\n  color: ${props => props.color};\n  margin: 20px 0;\n  ${p => garamond(titleSizes[p.titleSize] as any)};\n  ${media.sm`\n    font-size: ${titleSizes.small};\n  `};\n`\n\nStyledTitle.defaultProps = {\n  titleSize: \"medium\",\n  color: \"inherit\",\n}\n\nexport default StyledTitle\n"]}]}