{"remainingRequest":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js??ref--5-1!/Users/eve/development/reaction/src/Components/ArtworkGrid.tsx","dependencies":[{"path":"/Users/eve/development/reaction/src/Components/ArtworkGrid.tsx","mtime":1524249962000},{"path":"/Users/eve/development/reaction/.babelrc","mtime":1527877289000},{"path":"/Users/eve/development/reaction/node_modules/cache-loader/dist/cjs.js","mtime":1510929699000},{"path":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js","mtime":1509489566000}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.ArtworkGrid = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactDom = _interopRequireDefault(require(\"react-dom\"));\n\nvar _reactRelay = require(\"react-relay\");\n\nvar _styledComponents = _interopRequireDefault(require(\"styled-components\"));\n\nvar _GridItem = _interopRequireWildcard(require(\"./Artwork/GridItem\"));\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nvar ArtworkGridContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ArtworkGridContainer, _React$Component);\n\n  function ArtworkGridContainer() {\n    var _ref;\n\n    var _temp, _this;\n\n    _classCallCheck(this, ArtworkGridContainer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _possibleConstructorReturn(_this, (_temp = _this = _possibleConstructorReturn(this, (_ref = ArtworkGridContainer.__proto__ || Object.getPrototypeOf(ArtworkGridContainer)).call.apply(_ref, [this].concat(args))), Object.defineProperty(_assertThisInitialized(_this), \"state\", {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: {\n        interval: null,\n        loading: false\n      }\n    }), _temp));\n  }\n\n  _createClass(ArtworkGridContainer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      if (this.props.onLoadMore) {\n        var _interval = setInterval(function () {\n          _this2.maybeLoadMore();\n        }, 150);\n\n        this.setState({\n          interval: _interval\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.state.interval) {\n        clearInterval(this.state.interval);\n      }\n    }\n  }, {\n    key: \"maybeLoadMore\",\n    value: function maybeLoadMore() {\n      var threshold = window.innerHeight + window.scrollY;\n\n      var el = _reactDom.default.findDOMNode(this);\n\n      if (threshold >= el.clientHeight + el.scrollTop) {\n        this.props.onLoadMore();\n      }\n    }\n  }, {\n    key: \"sectionedArtworks\",\n    value: function sectionedArtworks() {\n      var sectionedArtworks = [];\n      var sectionRatioSums = [];\n      var artworks = this.props.artworks ? this.props.artworks.edges : [];\n\n      for (var i = 0; i < this.props.columnCount; i++) {\n        sectionedArtworks.push([]);\n        sectionRatioSums.push(0);\n      }\n\n      artworks.forEach(function (artworkEdge) {\n        var artwork = artworkEdge.node; // There are artworks without images and other ‘issues’. Like Force we’re just going to reject those for now.\n        // See: https://github.com/artsy/eigen/issues/1667\n\n        if (artwork.image) {\n          // Find section with lowest *inverted* aspect ratio sum, which is the shortest column.\n          var lowestRatioSum = Number.MAX_VALUE;\n          var sectionIndex = null;\n\n          for (var j = 0; j < sectionRatioSums.length; j++) {\n            var ratioSum = sectionRatioSums[j];\n\n            if (ratioSum < lowestRatioSum) {\n              sectionIndex = j;\n              lowestRatioSum = ratioSum;\n            }\n          }\n\n          if (sectionIndex != null) {\n            var section = sectionedArtworks[sectionIndex];\n            section.push(artwork); // Keep track of total section aspect ratio\n\n            var aspectRatio = artwork.image.aspect_ratio || 1; // Ensure we never divide by null/0\n            // Invert the aspect ratio so that a lower value means a shorter section.\n\n            sectionRatioSums[sectionIndex] += 1 / aspectRatio;\n          }\n        }\n      });\n      return sectionedArtworks;\n    }\n  }, {\n    key: \"renderSections\",\n    value: function renderSections() {\n      var spacerStyle = {\n        height: this.props.itemMargin\n      };\n      var sectionedArtworks = this.sectionedArtworks();\n      var sections = [];\n\n      for (var i = 0; i < this.props.columnCount; i++) {\n        var artworkComponents = [];\n\n        for (var j = 0; j < sectionedArtworks[i].length; j++) {\n          var artwork = sectionedArtworks[i][j];\n          var GridItem = this.props.useRelay ? _GridItem.default : _GridItem.ArtworkGridItem;\n          artworkComponents.push(_react.default.createElement(GridItem, {\n            artwork: artwork,\n            key: \"artwork-\" + j + \"-\" + artwork.__id,\n            useRelay: this.props.useRelay\n          })); // Setting a marginBottom on the artwork component didn’t work, so using a spacer view instead.\n\n          if (j < sectionedArtworks[i].length - 1) {\n            artworkComponents.push(_react.default.createElement(\"div\", {\n              style: spacerStyle,\n              key: \"spacer-\" + j + \"-\" + artwork.__id\n            }));\n          }\n        }\n\n        var sectionSpecificStyle = {\n          flex: 1,\n          minWidth: 0,\n          marginRight: i === this.props.columnCount - 1 ? 0 : this.props.sectionMargin\n        };\n        sections.push(_react.default.createElement(\"div\", {\n          style: sectionSpecificStyle,\n          key: i\n        }, artworkComponents));\n      }\n\n      return sections;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var artworks = this.renderSections() || [];\n      return _react.default.createElement(\"div\", {\n        className: this.props.className\n      }, artworks);\n    }\n  }]);\n\n  return ArtworkGridContainer;\n}(_react.default.Component);\n\nObject.defineProperty(ArtworkGridContainer, \"defaultProps\", {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  value: {\n    columnCount: 3,\n    sectionMargin: 20,\n    itemMargin: 20,\n    useRelay: true\n  }\n});\nvar ArtworkGrid =\n/*#__PURE__*/\n(0, _styledComponents.default)(ArtworkGridContainer).withConfig({\n  displayName: \"ArtworkGrid\",\n  componentId: \"c9epeo-0\"\n})([\"display:flex;flex-direction:row;flex-wrap:wrap;\"]);\nexports.ArtworkGrid = ArtworkGrid;\n\nvar _default = (0, _reactRelay.createFragmentContainer)(ArtworkGrid, {\n  artworks: function artworks() {\n    var node = require(\"../__generated__/ArtworkGrid_artworks.graphql\");\n\n    if (node.hash && node.hash !== \"54946907e0dd09ddb3b063c64b517438\") {\n      console.error(\"The definition of 'ArtworkGrid_artworks' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.\");\n    }\n\n    return require(\"../__generated__/ArtworkGrid_artworks.graphql\");\n  }\n});\n\nexports.default = _default;",{"version":3,"sources":["src/Components/ArtworkGrid.tsx"],"names":["ArtworkGridContainer","interval","loading","props","onLoadMore","setInterval","maybeLoadMore","setState","state","clearInterval","threshold","window","innerHeight","scrollY","el","findDOMNode","clientHeight","scrollTop","sectionedArtworks","sectionRatioSums","artworks","edges","i","columnCount","push","forEach","artwork","artworkEdge","node","image","lowestRatioSum","Number","MAX_VALUE","sectionIndex","j","length","ratioSum","section","aspectRatio","aspect_ratio","spacerStyle","height","itemMargin","sections","artworkComponents","GridItem","useRelay","__id","sectionSpecificStyle","flex","minWidth","marginRight","sectionMargin","renderSections","className","Component","ArtworkGrid"],"mappings":"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","file":"/Users/eve/development/reaction/src/Components/ArtworkGrid.tsx","sourceRoot":"/Users/eve/development/reaction","sourcesContent":["import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { createFragmentContainer, graphql } from \"react-relay\"\nimport styled from \"styled-components\"\n\nimport RelayGridItem, { ArtworkGridItem } from \"./Artwork/GridItem\"\n\ninterface Props extends RelayProps, React.HTMLProps<ArtworkGridContainer> {\n  columnCount?: number\n  sectionMargin?: number\n  itemMargin?: number\n  onLoadMore?: () => any\n  useRelay?: boolean\n}\n\ninterface State {\n  loading: boolean\n  interval: any\n}\n\nclass ArtworkGridContainer extends React.Component<Props, State> {\n  static defaultProps = {\n    columnCount: 3,\n    sectionMargin: 20,\n    itemMargin: 20,\n    useRelay: true,\n  }\n\n  state = {\n    interval: null,\n    loading: false,\n  }\n\n  componentDidMount() {\n    if (this.props.onLoadMore) {\n      const interval = setInterval(() => {\n        this.maybeLoadMore()\n      }, 150)\n      this.setState({ interval })\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.state.interval) {\n      clearInterval(this.state.interval)\n    }\n  }\n\n  maybeLoadMore() {\n    const threshold = window.innerHeight + window.scrollY\n    const el = ReactDOM.findDOMNode(this)\n    if (threshold >= el.clientHeight + el.scrollTop) {\n      this.props.onLoadMore()\n    }\n  }\n\n  sectionedArtworks() {\n    const sectionedArtworks: ArtworkRelayProps[][] = []\n    const sectionRatioSums = []\n    const artworks = this.props.artworks ? this.props.artworks.edges : []\n\n    for (let i = 0; i < this.props.columnCount; i++) {\n      sectionedArtworks.push([])\n      sectionRatioSums.push(0)\n    }\n\n    artworks.forEach(artworkEdge => {\n      const artwork = artworkEdge.node\n\n      // There are artworks without images and other ‘issues’. Like Force we’re just going to reject those for now.\n      // See: https://github.com/artsy/eigen/issues/1667\n      if (artwork.image) {\n        // Find section with lowest *inverted* aspect ratio sum, which is the shortest column.\n        let lowestRatioSum = Number.MAX_VALUE\n        let sectionIndex = null\n        for (let j = 0; j < sectionRatioSums.length; j++) {\n          const ratioSum = sectionRatioSums[j]\n          if (ratioSum < lowestRatioSum) {\n            sectionIndex = j\n            lowestRatioSum = ratioSum\n          }\n        }\n\n        if (sectionIndex != null) {\n          const section = sectionedArtworks[sectionIndex]\n          section.push(artwork)\n\n          // Keep track of total section aspect ratio\n          const aspectRatio = artwork.image.aspect_ratio || 1 // Ensure we never divide by null/0\n          // Invert the aspect ratio so that a lower value means a shorter section.\n          sectionRatioSums[sectionIndex] += 1 / aspectRatio\n        }\n      }\n    })\n\n    return sectionedArtworks\n  }\n\n  renderSections() {\n    const spacerStyle = {\n      height: this.props.itemMargin,\n    }\n    const sectionedArtworks = this.sectionedArtworks()\n    const sections = []\n\n    for (let i = 0; i < this.props.columnCount; i++) {\n      const artworkComponents = []\n      for (let j = 0; j < sectionedArtworks[i].length; j++) {\n        const artwork = sectionedArtworks[i][j]\n        const GridItem = this.props.useRelay ? RelayGridItem : ArtworkGridItem\n        artworkComponents.push(\n          <GridItem\n            artwork={artwork as any}\n            key={\"artwork-\" + j + \"-\" + artwork.__id}\n            useRelay={this.props.useRelay}\n          />\n        )\n        // Setting a marginBottom on the artwork component didn’t work, so using a spacer view instead.\n        if (j < sectionedArtworks[i].length - 1) {\n          artworkComponents.push(\n            <div style={spacerStyle} key={\"spacer-\" + j + \"-\" + artwork.__id} />\n          )\n        }\n      }\n\n      const sectionSpecificStyle = {\n        flex: 1,\n        minWidth: 0,\n        marginRight:\n          i === this.props.columnCount - 1 ? 0 : this.props.sectionMargin,\n      }\n\n      sections.push(\n        <div style={sectionSpecificStyle} key={i}>\n          {artworkComponents}\n        </div>\n      )\n    }\n    return sections\n  }\n\n  render() {\n    const artworks = this.renderSections() || []\n    return <div className={this.props.className}>{artworks}</div>\n  }\n}\n\nexport const ArtworkGrid = styled(ArtworkGridContainer)`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n`\n\nexport default createFragmentContainer(\n  ArtworkGrid,\n  graphql`\n    fragment ArtworkGrid_artworks on ArtworkConnection {\n      edges {\n        node {\n          __id\n          image {\n            aspect_ratio\n          }\n          ...GridItem_artwork\n        }\n      }\n    }\n  `\n)\n\ninterface ArtworkRelayProps {\n  __id: string\n  image: {\n    aspect_ratio: number | null\n  } | null\n}\n\ninterface RelayProps {\n  artworks: {\n    edges: Array<{\n      node: any\n    } | null> | null\n  }\n}\n"]}]}