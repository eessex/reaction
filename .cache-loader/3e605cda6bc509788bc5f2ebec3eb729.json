{"remainingRequest":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/eve/development/reaction/src/Apps/Artist/Routes/Overview/Components/ArtworkFilter/ArtworkFilterRefetch.tsx","dependencies":[{"path":"/Users/eve/development/reaction/src/Apps/Artist/Routes/Overview/Components/ArtworkFilter/ArtworkFilterRefetch.tsx","mtime":1535727457000},{"path":"/Users/eve/development/reaction/.babelrc","mtime":1537112679000},{"path":"/Users/eve/development/reaction/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport { createRefetchContainer, graphql } from \"react-relay\";\nimport { ArtworkGridRefetchContainer as ArtworkGrid } from \"./ArtworkFilterArtworkGrid\";\n\nvar ArtworkGridRefetchContainerWrapper =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ArtworkGridRefetchContainerWrapper, _React$Component);\n\n  function ArtworkGridRefetchContainerWrapper() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ArtworkGridRefetchContainerWrapper);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ArtworkGridRefetchContainerWrapper)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"state\", {\n      isLoading: false // trigger update to children\n      // FIXME: Figure out a pattern so that setState can replace this completely\n      // Used to prevent multiple in-flight requests\n\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"isLoading\", false);\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"loadFilter\", function () {\n      if (!_this.isLoading) {\n        _this.setState({\n          isLoading: true\n        });\n\n        _this.isLoading = true;\n\n        _this.props.relay.refetch(_objectSpread({}, _this.props.filters, {\n          artistNodeID: _this.props.artist.__id\n        }), null, function (error) {\n          if (error) {\n            console.error(error);\n          }\n\n          _this.setState({\n            isLoading: false\n          });\n\n          _this.isLoading = false;\n        });\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(ArtworkGridRefetchContainerWrapper, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this2 = this;\n\n      Object.keys(this.props.filters).forEach(function (key) {\n        if (key !== \"page\" && _this2.props.filters[key] !== prevProps.filters[key]) {\n          _this2.loadFilter();\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(ArtworkGrid, _extends({}, this.props, {\n        isLoading: this.state.isLoading,\n        filtered_artworks: this.props.artist.grid\n      }));\n    }\n  }]);\n\n  return ArtworkGridRefetchContainerWrapper;\n}(React.Component);\n\nexport var ArtworkFilterRefetchContainer = createRefetchContainer(ArtworkGridRefetchContainerWrapper, {\n  artist: function artist() {\n    var node = require(\"../../../../../../__generated__/ArtworkFilterRefetch_artist.graphql\");\n\n    if (node.hash && node.hash !== \"5103dc00b2154636cf2635771973374d\") {\n      console.error(\"The definition of 'ArtworkFilterRefetch_artist' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.\");\n    }\n\n    return require(\"../../../../../../__generated__/ArtworkFilterRefetch_artist.graphql\");\n  }\n}, function () {\n  var node = require(\"../../../../../../__generated__/ArtworkFilterRefetchQuery.graphql\");\n\n  if (node.hash && node.hash !== \"e84bbbfe920e5ff968909b4d520e6884\") {\n    console.error(\"The definition of 'ArtworkFilterRefetchQuery' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.\");\n  }\n\n  return require(\"../../../../../../__generated__/ArtworkFilterRefetchQuery.graphql\");\n});",{"version":3,"sources":["/Users/eve/development/reaction/src/Apps/Artist/Routes/Overview/Components/ArtworkFilter/ArtworkFilterRefetch.tsx"],"names":["React","createRefetchContainer","graphql","ArtworkGridRefetchContainer","ArtworkGrid","ArtworkGridRefetchContainerWrapper","isLoading","setState","props","relay","refetch","filters","artistNodeID","artist","__id","error","console","prevProps","Object","keys","forEach","key","loadFilter","state","grid","Component","ArtworkFilterRefetchContainer"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,sBAAT,EAAiCC,OAAjC,QAAkE,aAAlE;AACA,SAASC,2BAA2B,IAAIC,WAAxC;;IAUMC,kC;;;;;;;;;;;;;;;;;;oFACI;AACNC,MAAAA,SAAS,EAAE,KADL,CACY;AAGpB;AACA;;AALQ,K;;wFAMY,K;;yFAaP,YAAM;AACjB,UAAI,CAAC,MAAKA,SAAV,EAAqB;AACnB,cAAKC,QAAL,CAAc;AACZD,UAAAA,SAAS,EAAE;AADC,SAAd;;AAIA,cAAKA,SAAL,GAAiB,IAAjB;;AAEA,cAAKE,KAAL,CAAWC,KAAX,CAAiBC,OAAjB,mBAEO,MAAKF,KAAL,CAAWG,OAFlB;AAGIC,UAAAA,YAAY,EAAE,MAAKJ,KAAL,CAAWK,MAAX,CAAkBC;AAHpC,YAKE,IALF,EAME,UAAAC,KAAK,EAAI;AACP,cAAIA,KAAJ,EAAW;AACTC,YAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD;;AAED,gBAAKR,QAAL,CAAc;AACZD,YAAAA,SAAS,EAAE;AADC,WAAd;;AAIA,gBAAKA,SAAL,GAAiB,KAAjB;AACD,SAhBH;AAkBD;AACF,K;;;;;;;uCAtCkBW,S,EAAW;AAAA;;AAC5BC,MAAAA,MAAM,CAACC,IAAP,CAAY,KAAKX,KAAL,CAAWG,OAAvB,EAAgCS,OAAhC,CAAwC,UAAAC,GAAG,EAAI;AAC7C,YACEA,GAAG,KAAK,MAAR,IACA,MAAI,CAACb,KAAL,CAAWG,OAAX,CAAmBU,GAAnB,MAA4BJ,SAAS,CAACN,OAAV,CAAkBU,GAAlB,CAF9B,EAGE;AACA,UAAA,MAAI,CAACC,UAAL;AACD;AACF,OAPD;AAQD;;;6BA+BQ;AACP,aACE,oBAAC,WAAD,eACM,KAAKd,KADX;AAEE,QAAA,SAAS,EAAE,KAAKe,KAAL,CAAWjB,SAFxB;AAGE,QAAA,iBAAiB,EAAE,KAAKE,KAAL,CAAWK,MAAX,CAAkBW;AAHvC,SADF;AAOD;;;;EAzD8CxB,KAAK,CAACyB,S;;AA4DvD,OAAO,IAAMC,6BAA6B,GAAGzB,sBAAsB,CACjEI,kCADiE,EAEjE;AACEQ,EAAAA,MAAM;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AADR,CAFiE;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,EAA5D","sourcesContent":["import { ArtworkFilterRefetch_artist } from \"__generated__/ArtworkFilterRefetch_artist.graphql\"\nimport React from \"react\"\nimport { createRefetchContainer, graphql, RelayRefetchProp } from \"react-relay\"\nimport { ArtworkGridRefetchContainer as ArtworkGrid } from \"./ArtworkFilterArtworkGrid\"\n\ninterface Props {\n  artist: ArtworkFilterRefetch_artist\n  relay: RelayRefetchProp\n  columnCount: number\n  filters: any\n  artistID: string\n}\n\nclass ArtworkGridRefetchContainerWrapper extends React.Component<Props> {\n  state = {\n    isLoading: false, // trigger update to children\n  }\n\n  // FIXME: Figure out a pattern so that setState can replace this completely\n  // Used to prevent multiple in-flight requests\n  private isLoading = false\n\n  componentDidUpdate(prevProps) {\n    Object.keys(this.props.filters).forEach(key => {\n      if (\n        key !== \"page\" &&\n        this.props.filters[key] !== prevProps.filters[key]\n      ) {\n        this.loadFilter()\n      }\n    })\n  }\n\n  loadFilter = () => {\n    if (!this.isLoading) {\n      this.setState({\n        isLoading: true,\n      })\n\n      this.isLoading = true\n\n      this.props.relay.refetch(\n        {\n          ...this.props.filters,\n          artistNodeID: this.props.artist.__id,\n        },\n        null,\n        error => {\n          if (error) {\n            console.error(error)\n          }\n\n          this.setState({\n            isLoading: false,\n          })\n\n          this.isLoading = false\n        }\n      )\n    }\n  }\n\n  render() {\n    return (\n      <ArtworkGrid\n        {...this.props}\n        isLoading={this.state.isLoading}\n        filtered_artworks={this.props.artist.grid}\n      />\n    )\n  }\n}\n\nexport const ArtworkFilterRefetchContainer = createRefetchContainer(\n  ArtworkGridRefetchContainerWrapper,\n  {\n    artist: graphql`\n      fragment ArtworkFilterRefetch_artist on Artist\n        @argumentDefinitions(\n          medium: { type: \"String\", defaultValue: \"*\" }\n          major_periods: { type: \"[String]\" }\n          partner_id: { type: \"ID\" }\n          for_sale: { type: \"Boolean\" }\n          at_auction: { type: \"Boolean\" }\n          acquireable: { type: \"Boolean\" }\n          inquireable_only: { type: \"Boolean\" }\n          sort: { type: \"String\", defaultValue: \"-partner_updated_at\" }\n        ) {\n        __id\n        grid: filtered_artworks(\n          aggregations: [TOTAL]\n          medium: $medium\n          major_periods: $major_periods\n          partner_id: $partner_id\n          for_sale: $for_sale\n          at_auction: $at_auction\n          acquireable: $acquireable\n          inquireable_only: $inquireable_only\n          size: 0\n          sort: $sort\n        ) {\n          ...ArtworkFilterArtworkGrid_filtered_artworks\n        }\n      }\n    `,\n  },\n  graphql`\n    query ArtworkFilterRefetchQuery(\n      $artistNodeID: ID!\n      $medium: String\n      $major_periods: [String]\n      $partner_id: ID\n      $acquireable: Boolean\n      $at_auction: Boolean\n      $inquireable_only: Boolean\n      $for_sale: Boolean\n      $sort: String\n    ) {\n      node(__id: $artistNodeID) {\n        ... on Artist {\n          ...ArtworkFilterRefetch_artist\n            @arguments(\n              medium: $medium\n              major_periods: $major_periods\n              partner_id: $partner_id\n              for_sale: $for_sale\n              sort: $sort\n              at_auction: $at_auction\n              acquireable: $acquireable\n              inquireable_only: $inquireable_only\n            )\n        }\n      }\n    }\n  `\n)\n"]}]}