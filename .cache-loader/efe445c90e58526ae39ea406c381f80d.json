{"remainingRequest":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/eve/development/reaction/src/Relay/RootQueryRenderer.tsx","dependencies":[{"path":"/Users/eve/development/reaction/src/Relay/RootQueryRenderer.tsx","mtime":1528820562000},{"path":"/Users/eve/development/reaction/.babelrc","mtime":1532461619000},{"path":"/Users/eve/development/reaction/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js","mtime":1509489566000}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RootQueryRenderer = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactRelay = require(\"react-relay\");\n\nvar _Artsy = require(\"../Components/Artsy\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nvar Renderer = function Renderer(_ref) {\n  var currentUser = _ref.currentUser,\n      relayEnvironment = _ref.relayEnvironment,\n      children = _ref.children,\n      props = _objectWithoutProperties(_ref, [\"currentUser\", \"relayEnvironment\", \"children\"]);\n\n  return _react.default.createElement(_reactRelay.QueryRenderer, _extends({}, props, {\n    environment: relayEnvironment\n  }));\n};\n\nvar RendererWithContext = (0, _Artsy.ContextConsumer)(Renderer);\n/**\n * This component is, for now, mostly intended as an easy way to render stories, as it combines the Artsy\n * `ContextProvider` component and Relay‘s `QueryRenderer` component.\n *\n * We’ll need to see if it makes sense to use this as an entry point to render component trees from Reaction in Force.\n */\n\nvar RootQueryRenderer = function RootQueryRenderer(_ref2) {\n  var currentUser = _ref2.currentUser,\n      children = _ref2.children,\n      props = _objectWithoutProperties(_ref2, [\"currentUser\", \"children\"]);\n\n  return _react.default.createElement(_Artsy.ContextProvider, {\n    currentUser: currentUser\n  }, _react.default.createElement(RendererWithContext, props));\n};\n\nexports.RootQueryRenderer = RootQueryRenderer;",{"version":3,"sources":["src/Relay/RootQueryRenderer.tsx"],"names":["Renderer","currentUser","relayEnvironment","children","props","RendererWithContext","RootQueryRenderer"],"mappings":";;;;;;;AAAA;;AAEA;;AAEA;;;;;;;;;;AAmBA,IAAMA,WAA6B,SAA7BA,QAA6B;AAAA,MACjCC,WADiC,QACjCA,WADiC;AAAA,MAEjCC,gBAFiC,QAEjCA,gBAFiC;AAAA,MAGjCC,QAHiC,QAGjCA,QAHiC;AAAA,MAI9BC,KAJ8B;;AAAA,SAK7B,6BAAC,yBAAD,eAAmBA,KAAnB;AAA0B,iBAAaF;AAAvC,KAL6B;AAAA,CAAnC;;AAOA,IAAMG,sBAAsB,4BAAgBL,QAAhB,CAA5B;AAEA;;;;;;;AAMO,IAAMM,oBAAsC,SAAtCA,iBAAsC;AAAA,MACjDL,WADiD,SACjDA,WADiD;AAAA,MAEjDE,QAFiD,SAEjDA,QAFiD;AAAA,MAG9CC,KAH8C;;AAAA,SAKjD,6BAAC,sBAAD;AAAiB,iBAAaH;AAA9B,KACE,6BAAC,mBAAD,EAAyBG,KAAzB,CADF,CALiD;AAAA,CAA5C","sourceRoot":"/Users/eve/development/reaction","sourcesContent":["import React from \"react\"\nimport { GraphQLTaggedNode, ReadyState } from \"react-relay\"\nimport { QueryRenderer } from \"react-relay\"\nimport { CacheConfig, RerunParam, Variables } from \"relay-runtime\"\nimport {\n  ContextConsumer,\n  ContextProps,\n  ContextProvider,\n} from \"../Components/Artsy\"\n\n/**\n * A copy of the upstream interface, minus the `environment` field.\n */\ninterface QueryRendererProps {\n  cacheConfig?: CacheConfig\n  query: GraphQLTaggedNode\n  variables: Variables\n  rerunParamExperimental?: RerunParam\n  render(readyState: ReadyState): React.ReactElement<any> | undefined | null\n}\n\ntype Props = ContextProps & QueryRendererProps\n\nconst Renderer: React.SFC<Props> = ({\n  currentUser,\n  relayEnvironment,\n  children,\n  ...props\n}) => <QueryRenderer {...props} environment={relayEnvironment} />\n\nconst RendererWithContext = ContextConsumer(Renderer)\n\n/**\n * This component is, for now, mostly intended as an easy way to render stories, as it combines the Artsy\n * `ContextProvider` component and Relay‘s `QueryRenderer` component.\n *\n * We’ll need to see if it makes sense to use this as an entry point to render component trees from Reaction in Force.\n */\nexport const RootQueryRenderer: React.SFC<Props> = ({\n  currentUser,\n  children,\n  ...props\n}) => (\n  <ContextProvider currentUser={currentUser}>\n    <RendererWithContext {...props} />\n  </ContextProvider>\n)\n"]}]}