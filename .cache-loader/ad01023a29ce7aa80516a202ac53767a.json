{"remainingRequest":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/eve/development/reaction/src/Artsy/Analytics/track.ts","dependencies":[{"path":"/Users/eve/development/reaction/src/Artsy/Analytics/track.ts","mtime":1535727458000},{"path":"/Users/eve/development/reaction/.babelrc","mtime":1537112679000},{"path":"/Users/eve/development/reaction/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["// tslint:disable:array-type\nimport _track from \"react-tracking\";\n\n/**\n * This is the regular `track` function, but pre-typed using our schema.\n *\n * For its normal usage see the docs https://github.com/NYTimes/react-tracking\n *\n * One important gotcha that is easily overlooked is that you always need to\n * ‘enable’ tracking on a component before you can use it inside a component.\n *\n * @example\n *\n *     ```ts\n *     import React from \"react\"\n *     import { track } from \"Artsy/Analytics\"\n *\n *     // This is what enables tracking for further use inside the component.\n *     @track()\n *     class Artist extends React.Component {\n *       // This only works with the above line that enables tracking.\n *       @track({ … })\n *       handleClick() { … }\n *     }\n */\nexport var track = _track;\n/**\n * ## Writing tests for your tracked code\n *\n * By default we mock `react-tracking`, so it's not possible to test the code\n * easily.\n *\n * A good pattern for testing analytics code is to have a completely separate\n * file for the tests. For example: `__tests__/DateSource-analytics-tests.tsx`.\n * Jest has each test file run in a unique environment, so in that file we can\n * unmock `react-tracking`.\n *\n * Here's a full example:\n *\n * @example\n *\n *     ```ts\n *     import { mount } from \"enzyme\"\n *     import React from \"react\"\n *     import { mockTracking } from \"Artsy/Analytics\"\n *     import { DateSource } from \"../DateSource\"\n *\n *     jest.unmock(\"react-tracking\")\n *\n *     const NewsArticle = { news_source: { url: \"http://nytimes.com\" }}\n *\n *     describe(\"DateSource analytics\", () => {\n *       it(\"tracks news source link\", () => {\n *         const { Component, dispatch } = mockTracking(DateSource)\n *         const component = mount(<Component article={NewsArticle} />)\n *         component\n *           .find(\"a\")\n *           .at(0)\n *           .simulate(\"click\")\n *         expect(dispatch).toBeCalledWith({\n *           action: \"Click\",\n *           type: \"external link\",\n *           label: \"news source\",\n *           destination_path: \"http://nytimes.com\",\n *         })\n *       })\n *     })\n *     ```\n */\n\nexport function mockTracking(Subject) {\n  var dispatch = jest.fn();\n\n  var Component = _track({}, {\n    dispatch: dispatch\n  })(Subject);\n\n  return {\n    Component: Component,\n    dispatch: dispatch\n  };\n}",{"version":3,"sources":["/Users/eve/development/reaction/src/Artsy/Analytics/track.ts"],"names":["_track","track","mockTracking","Subject","dispatch","jest","fn","Component"],"mappings":"AAAA;AAEA,OAAOA,MAAP,MAA2C,gBAA3C;;AA4GA;;;;;;;;;;;;;;;;;;;;;;AAsBA,OAAO,IAAMC,KAAY,GAAGD,MAArB;AAEP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA,OAAO,SAASE,YAAT,CACLC,OADK,EAKL;AACA,MAAMC,QAAQ,GAAGC,IAAI,CAACC,EAAL,EAAjB;;AACA,MAAMC,SAAS,GAAGP,MAAM,CAAC,EAAD,EAAK;AAAEI,IAAAA,QAAQ,EAARA;AAAF,GAAL,CAAN,CAAyBD,OAAzB,CAAlB;;AACA,SAAO;AAAEI,IAAAA,SAAS,EAATA,SAAF;AAAaH,IAAAA,QAAQ,EAARA;AAAb,GAAP;AACD","sourcesContent":["// tslint:disable:array-type\n\nimport _track, { Decorator, Options } from \"react-tracking\"\nimport { Trackables } from \"./Schema\"\n\n/**\n * Use this interface to augment the `track` function with props or state.  The\n * data recorded with this interface should match any of the entries in the\n * `Trackables` union.\n *\n * It can be used for either one-off uses:\n *\n * @example\n *\n *      ```ts\n *      import { track } from \"Artsy/Analytics\"\n *\n *      interface Props {\n *        artist: {\n *          id: string\n *          slug: string\n *        }\n *      }\n *\n *      interface State {\n *        following: boolean\n *      }\n *\n *      @track<Props>(props => ({\n *        context_page: Schema.\n *        context_page_owner_id: props.artist._id,\n *        context_page_owner_type: Schema.OwnerType.Artist,\n *        context_page_owner_slug: props.artist.id,\n *      }))\n *      class Artist extends React.Component<Props, State> {\n *        render() {\n *          return (\n *            <div onClick={this.handleFollow.bind(this)}>\n *              ...\n *            </div>\n *          )\n *        }\n *\n *        @track<Props, State>((props, state) => ({\n *          action_type: Schema.ActionType.Click,\n *          action_name: state.following ? Schema.ActionName.ArtistUnfollow : Schema.ActionName.ArtistFollow,\n *          subject: state.following ? \"Unfollow Artist\" : \"Follow Artist\"\n *        }))\n *        handleFollow(event) {\n *          // ...\n *        }\n *      }\n *\n *      ```\n *\n * … or stored for usage throughout a module:\n *\n * @example\n *\n *      ```ts\n *      import { track as _track, Track } from \"Artsy/Analytics\"\n *\n *      interface Props {\n *        artist: {\n *          id: string\n *          slug: string\n *        }\n *      }\n *\n *      interface State {\n *        following: boolean\n *      }\n *\n *      const track: Track<Props, State> = _track\n *\n *      @track(props => ({\n *        context_page: Schema.\n *        context_page_owner_id: props.artist._id,\n *        context_page_owner_type: Schema.OwnerType.Artist,\n *        context_page_owner_slug: props.artist.id,\n *      }))\n *      class Artist extends React.Component<Props, State> {\n *        render() {\n *          return (\n *            <div onClick={this.handleFollow.bind(this)}>\n *              ...\n *            </div>\n *          )\n *        }\n *\n *        @track((props, state) => ({\n *          action_type: Schema.ActionType.Click,\n *          action_name: state.following ? Schema.ActionName.ArtistUnfollow : Schema.ActionName.ArtistFollow,\n *          subject: state.following ? \"Unfollow Artist\" : \"Follow Artist\"\n *        }))\n *        handleFollow(event) {\n *          // ...\n *        }\n *      }\n *\n *      ```\n */\nexport interface Track<PP = {}, SS = null, AA extends Array<any> = Array<any>> {\n  // tslint:disable-next-line:callable-types\n  <P = PP, S = SS, A extends any[] = AA>(\n    trackingInfo?: Trackables | ((props: P, state: S, args: A) => Trackables),\n    options?: Options<Trackables>\n  ): Decorator\n}\n\n/**\n * This is the regular `track` function, but pre-typed using our schema.\n *\n * For its normal usage see the docs https://github.com/NYTimes/react-tracking\n *\n * One important gotcha that is easily overlooked is that you always need to\n * ‘enable’ tracking on a component before you can use it inside a component.\n *\n * @example\n *\n *     ```ts\n *     import React from \"react\"\n *     import { track } from \"Artsy/Analytics\"\n *\n *     // This is what enables tracking for further use inside the component.\n *     @track()\n *     class Artist extends React.Component {\n *       // This only works with the above line that enables tracking.\n *       @track({ … })\n *       handleClick() { … }\n *     }\n */\nexport const track: Track = _track\n\n/**\n * ## Writing tests for your tracked code\n *\n * By default we mock `react-tracking`, so it's not possible to test the code\n * easily.\n *\n * A good pattern for testing analytics code is to have a completely separate\n * file for the tests. For example: `__tests__/DateSource-analytics-tests.tsx`.\n * Jest has each test file run in a unique environment, so in that file we can\n * unmock `react-tracking`.\n *\n * Here's a full example:\n *\n * @example\n *\n *     ```ts\n *     import { mount } from \"enzyme\"\n *     import React from \"react\"\n *     import { mockTracking } from \"Artsy/Analytics\"\n *     import { DateSource } from \"../DateSource\"\n *\n *     jest.unmock(\"react-tracking\")\n *\n *     const NewsArticle = { news_source: { url: \"http://nytimes.com\" }}\n *\n *     describe(\"DateSource analytics\", () => {\n *       it(\"tracks news source link\", () => {\n *         const { Component, dispatch } = mockTracking(DateSource)\n *         const component = mount(<Component article={NewsArticle} />)\n *         component\n *           .find(\"a\")\n *           .at(0)\n *           .simulate(\"click\")\n *         expect(dispatch).toBeCalledWith({\n *           action: \"Click\",\n *           type: \"external link\",\n *           label: \"news source\",\n *           destination_path: \"http://nytimes.com\",\n *         })\n *       })\n *     })\n *     ```\n */\nexport function mockTracking<P>(\n  Subject: React.ComponentType<P>\n): {\n  Component: React.ComponentType<P>\n  dispatch: jest.Mock<(trackedData: Trackables) => void>\n} {\n  const dispatch = jest.fn() as jest.Mock<() => void>\n  const Component = _track({}, { dispatch })(Subject)\n  return { Component, dispatch }\n}\n"]}]}