{"remainingRequest":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/eve/development/reaction/src/Components/Text.tsx","dependencies":[{"path":"/Users/eve/development/reaction/src/Components/Text.tsx","mtime":1528820562000},{"path":"/Users/eve/development/reaction/.babelrc","mtime":1537112679000},{"path":"/Users/eve/development/reaction/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\"; // @ts-ignore\n\nimport styled from \"styled-components\";\nimport * as fonts from \"../Assets/Fonts\";\nvar textSizesForPrimaryStyle = {\n  xlarge: \"24px\",\n  large: \"17px\",\n  medium: \"15px\",\n  small: \"13px\",\n  xsmall: \"11px\"\n};\nvar textSizesForSecondaryStyle = {\n  xlarge: \"26px\",\n  large: \"20px\",\n  medium: \"17px\",\n  small: \"15px\",\n  xsmall: \"11px\"\n};\nvar TextStyleToTextSize = {\n  primary: textSizesForPrimaryStyle,\n  secondary: textSizesForSecondaryStyle\n};\nvar textStyleNameToCss = {\n  primary: fonts.avantgarde(\"s11\"),\n  secondary: fonts.garamond(\"s11\")\n};\n\nvar RawText = function RawText(props) {\n  var textSize = props.textSize,\n      textStyle = props.textStyle,\n      align = props.align,\n      color = props.color,\n      remainderProps = _objectWithoutProperties(props, [\"textSize\", \"textStyle\", \"align\", \"color\"]);\n\n  return React.createElement(\"p\", remainderProps, props.children);\n};\n\nvar Text = styled(RawText).withConfig({\n  displayName: \"Text\",\n  componentId: \"nwxb9m-0\"\n})([\"\", \";font-size:\", \";text-align:\", \";color:\", \";\"], function (props) {\n  return textStyleNameToCss[props.textStyle];\n}, function (props) {\n  return TextStyleToTextSize[props.textStyle][props.textSize];\n}, function (props) {\n  return props.align;\n}, function (props) {\n  return props.color;\n});\nText.defaultProps = {\n  textSize: \"small\",\n  textStyle: \"secondary\",\n  align: \"start\",\n  color: \"currentcolor\"\n};\nexport default Text;",{"version":3,"sources":["/Users/eve/development/reaction/src/Components/Text.tsx"],"names":["React","styled","fonts","textSizesForPrimaryStyle","xlarge","large","medium","small","xsmall","textSizesForSecondaryStyle","TextStyleToTextSize","primary","secondary","textStyleNameToCss","avantgarde","garamond","RawText","props","textSize","textStyle","align","color","remainderProps","children","Text","defaultProps"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,OAAOC,MAAP,MAA6C,mBAA7C;AACA,OAAO,KAAKC,KAAZ;AAaA,IAAMC,wBAAwB,GAAG;AAC/BC,EAAAA,MAAM,EAAE,MADuB;AAE/BC,EAAAA,KAAK,EAAE,MAFwB;AAG/BC,EAAAA,MAAM,EAAE,MAHuB;AAI/BC,EAAAA,KAAK,EAAE,MAJwB;AAK/BC,EAAAA,MAAM,EAAE;AALuB,CAAjC;AAQA,IAAMC,0BAA0B,GAAG;AACjCL,EAAAA,MAAM,EAAE,MADyB;AAEjCC,EAAAA,KAAK,EAAE,MAF0B;AAGjCC,EAAAA,MAAM,EAAE,MAHyB;AAIjCC,EAAAA,KAAK,EAAE,MAJ0B;AAKjCC,EAAAA,MAAM,EAAE;AALyB,CAAnC;AAQA,IAAME,mBAAmB,GAAG;AAC1BC,EAAAA,OAAO,EAAER,wBADiB;AAE1BS,EAAAA,SAAS,EAAEH;AAFe,CAA5B;AAKA,IAAMI,kBAAkB,GAAG;AACzBF,EAAAA,OAAO,EAAET,KAAK,CAACY,UAAN,CAAiB,KAAjB,CADgB;AAEzBF,EAAAA,SAAS,EAAEV,KAAK,CAACa,QAAN,CAAe,KAAf;AAFc,CAA3B;;AAKA,IAAMC,OAA6B,GAAG,SAAhCA,OAAgC,CAACC,KAAD,EAAsB;AAAA,MAClDC,QADkD,GACOD,KADP,CAClDC,QADkD;AAAA,MACxCC,SADwC,GACOF,KADP,CACxCE,SADwC;AAAA,MAC7BC,KAD6B,GACOH,KADP,CAC7BG,KAD6B;AAAA,MACtBC,KADsB,GACOJ,KADP,CACtBI,KADsB;AAAA,MACZC,cADY,4BACOL,KADP;;AAG1D,SAAO,yBAAOK,cAAP,EAAwBL,KAAK,CAACM,QAA9B,CAAP;AACD,CAJD;;AAMA,IAAMC,IAAI,GAAGvB,MAAM,CAACe,OAAD,CAAT;AAAA;AAAA;AAAA,wDACN,UAAAC,KAAK;AAAA,SAAIJ,kBAAkB,CAACI,KAAK,CAACE,SAAP,CAAtB;AAAA,CADC,EAEK,UAAAF,KAAK;AAAA,SAAIP,mBAAmB,CAACO,KAAK,CAACE,SAAP,CAAnB,CAAqCF,KAAK,CAACC,QAA3C,CAAJ;AAAA,CAFV,EAGM,UAAAD,KAAK;AAAA,SAAIA,KAAK,CAACG,KAAV;AAAA,CAHX,EAIC,UAAAH,KAAK;AAAA,SAAIA,KAAK,CAACI,KAAV;AAAA,CAJN,CAAV;AAOAG,IAAI,CAACC,YAAL,GAAoB;AAClBP,EAAAA,QAAQ,EAAE,OADQ;AAElBC,EAAAA,SAAS,EAAE,WAFO;AAGlBC,EAAAA,KAAK,EAAE,OAHW;AAIlBC,EAAAA,KAAK,EAAE;AAJW,CAApB;AAOA,eAAeG,IAAf","sourcesContent":["import React from \"react\"\n// @ts-ignore\nimport styled, { StyledComponentClass } from \"styled-components\"\nimport * as fonts from \"../Assets/Fonts\"\n\nexport type TextAlign = \"start\" | \"center\" | \"end\"\nexport type TextSize = \"small\" | \"medium\" | \"large\" | \"xlarge\"\nexport type TextStyle = \"primary\" | \"secondary\"\n\nexport interface TextProps extends React.HTMLProps<HTMLParagraphElement> {\n  textSize?: TextSize\n  textStyle?: TextStyle\n  align?: TextAlign\n  color?: string\n}\n\nconst textSizesForPrimaryStyle = {\n  xlarge: \"24px\",\n  large: \"17px\",\n  medium: \"15px\",\n  small: \"13px\",\n  xsmall: \"11px\",\n}\n\nconst textSizesForSecondaryStyle = {\n  xlarge: \"26px\",\n  large: \"20px\",\n  medium: \"17px\",\n  small: \"15px\",\n  xsmall: \"11px\",\n}\n\nconst TextStyleToTextSize = {\n  primary: textSizesForPrimaryStyle,\n  secondary: textSizesForSecondaryStyle,\n}\n\nconst textStyleNameToCss = {\n  primary: fonts.avantgarde(\"s11\"),\n  secondary: fonts.garamond(\"s11\"),\n}\n\nconst RawText: React.SFC<TextProps> = (props: TextProps) => {\n  const { textSize, textStyle, align, color, ...remainderProps } = props\n\n  return <p {...remainderProps}>{props.children}</p>\n}\n\nconst Text = styled(RawText)`\n  ${props => textStyleNameToCss[props.textStyle]};\n  font-size: ${props => TextStyleToTextSize[props.textStyle][props.textSize]};\n  text-align: ${props => props.align};\n  color: ${props => props.color};\n`\n\nText.defaultProps = {\n  textSize: \"small\",\n  textStyle: \"secondary\",\n  align: \"start\",\n  color: \"currentcolor\",\n}\n\nexport default Text\n"]}]}