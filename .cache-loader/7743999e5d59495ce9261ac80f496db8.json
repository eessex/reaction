{"remainingRequest":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js??ref--5-1!/Users/eve/development/reaction/src/Components/Forms/OrderForm/formik.tsx","dependencies":[{"path":"/Users/eve/development/reaction/src/Components/Forms/OrderForm/formik.tsx","mtime":1525097966000},{"path":"/Users/eve/development/reaction/.babelrc","mtime":1527877289000},{"path":"/Users/eve/development/reaction/node_modules/cache-loader/dist/cjs.js","mtime":1510929699000},{"path":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js","mtime":1509489566000}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.initialValues = exports.validationSchema = void 0;\n\nvar _yup = _interopRequireDefault(require(\"yup\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// NOTE: This is super WIP...\nvar validationSchema = {\n  shipping: _yup.default.object({\n    fullName: _yup.default.string().required(\"Full name is required\"),\n    addressLine1: _yup.default.string().required(\"Address is required\"),\n    addressLine2: _yup.default.string().notRequired(),\n    city: _yup.default.string().required(\"City is required\"),\n    state: _yup.default.string().required(\"State is required\"),\n    postalCode: _yup.default.string().required(\"Postal code is required\"),\n    country: _yup.default.string().required(\"Country\")\n  }),\n  // TODO: custom validation will need to happen with this stuff...\n  // - stripe cc validation?\n  // - handle billing same as shipping,\n  payment: _yup.default.object({\n    nameOnCard: _yup.default.string().required(\"Name is required\"),\n    cardNumber: _yup.default.string().required(\"Card number is required\"),\n    expiration: _yup.default.string().required(\"Exipration is required\"),\n    securityCode: _yup.default.string().required(\"Security code is required\"),\n    sameAsShipping: _yup.default.boolean() // billing fields: TODO: Only validate when sameAsShipping: false\n\n  }),\n  // TODO: Formik-connected checkbox input\n  review: _yup.default.object({\n    agreeToTerms: _yup.default.boolean().required(\"You must agree to terms\")\n  })\n};\nexports.validationSchema = validationSchema;\nvar initialValues = {\n  // ShippingForm.jsx\n  fullName: \"\",\n  addressLine1: \"\",\n  addressLine2: \"\",\n  city: \"\",\n  state: \"\",\n  postalCode: \"\",\n  country: \"\",\n  // PaymentForm.jsx\n  nameOnCard: \"\",\n  cardNumber: \"\",\n  expiration: \"\",\n  securityCode: \"\",\n  sameAsShipping: false,\n  billingFullName: \"\",\n  billingAddressLine1: \"\",\n  billingAddressLine2: \"\",\n  billingCity: \"\",\n  billingState: \"\",\n  billingPostalCode: \"\",\n  billingCountry: \"\",\n  // ReviewForm\n  agreeToTerms: false\n};\nexports.initialValues = initialValues;",{"version":3,"sources":["src/Components/Forms/OrderForm/formik.tsx"],"names":["validationSchema","shipping","object","fullName","string","required","addressLine1","addressLine2","notRequired","city","state","postalCode","country","payment","nameOnCard","cardNumber","expiration","securityCode","sameAsShipping","boolean","review","agreeToTerms","initialValues","billingFullName","billingAddressLine1","billingAddressLine2","billingCity","billingState","billingPostalCode","billingCountry"],"mappings":";;;;;;;AAAA;;;;AA6BA;AACO,IAAMA,mBAAwB;AACnCC,YAAU,aAAIC,MAAJ,CAAW;AACnBC,cAAU,aAAIC,MAAJ,GAAaC,QAAb,CAAsB,uBAAtB,CADS;AAEnBC,kBAAc,aAAIF,MAAJ,GAAaC,QAAb,CAAsB,qBAAtB,CAFK;AAGnBE,kBAAc,aAAIH,MAAJ,GAAaI,WAAb,EAHK;AAInBC,UAAM,aAAIL,MAAJ,GAAaC,QAAb,CAAsB,kBAAtB,CAJa;AAKnBK,WAAO,aAAIN,MAAJ,GAAaC,QAAb,CAAsB,mBAAtB,CALY;AAMnBM,gBAAY,aAAIP,MAAJ,GAAaC,QAAb,CAAsB,yBAAtB,CANO;AAOnBO,aAAS,aAAIR,MAAJ,GAAaC,QAAb,CAAsB,SAAtB;AAPU,GAAX,CADyB;AAWnC;AACA;AACA;AACAQ,WAAS,aAAIX,MAAJ,CAAW;AAClBY,gBAAY,aAAIV,MAAJ,GAAaC,QAAb,CAAsB,kBAAtB,CADM;AAElBU,gBAAY,aAAIX,MAAJ,GAAaC,QAAb,CAAsB,yBAAtB,CAFM;AAGlBW,gBAAY,aAAIZ,MAAJ,GAAaC,QAAb,CAAsB,wBAAtB,CAHM;AAIlBY,kBAAc,aAAIb,MAAJ,GAAaC,QAAb,CAAsB,2BAAtB,CAJI;AAKlBa,oBAAgB,aAAIC,OAAJ,EALE,CAMlB;;AANkB,GAAX,CAd0B;AAsBnC;AACAC,UAAQ,aAAIlB,MAAJ,CAAW;AACjBmB,kBAAc,aAAIF,OAAJ,GAAcd,QAAd,CAAuB,yBAAvB;AADG,GAAX;AAvB2B,CAA9B;;AA4BA,IAAMiB,gBAA6B;AACxC;AACAnB,YAAU,EAF8B;AAGxCG,gBAAc,EAH0B;AAIxCC,gBAAc,EAJ0B;AAKxCE,QAAM,EALkC;AAMxCC,SAAO,EANiC;AAOxCC,cAAY,EAP4B;AAQxCC,WAAS,EAR+B;AAUxC;AACAE,cAAY,EAX4B;AAYxCC,cAAY,EAZ4B;AAaxCC,cAAY,EAb4B;AAcxCC,gBAAc,EAd0B;AAgBxCC,kBAAgB,KAhBwB;AAkBxCK,mBAAiB,EAlBuB;AAmBxCC,uBAAqB,EAnBmB;AAoBxCC,uBAAqB,EApBmB;AAqBxCC,eAAa,EArB2B;AAsBxCC,gBAAc,EAtB0B;AAuBxCC,qBAAmB,EAvBqB;AAwBxCC,kBAAgB,EAxBwB;AA0BxC;AACAR,gBAAc;AA3B0B,CAAnC","file":"/Users/eve/development/reaction/src/Components/Forms/OrderForm/formik.tsx","sourceRoot":"/Users/eve/development/reaction","sourcesContent":["import yup from \"yup\"\n\nexport interface Inputs<T> {\n  fullName: T\n  addressLine1: T\n  addressLine2: T\n  city: T\n  state: T\n  postalCode: T\n  country: T\n\n  nameOnCard: T\n  cardNumber: T\n  expiration: T\n  securityCode: T\n  agreeToTerms: T\n\n  sameAsShipping: T\n  billingFullName: T\n  billingAddressLine1: T\n  billingAddressLine2: T\n  billingCity: T\n  billingState: T\n  billingPostalCode: T\n  billingCountry: T\n}\n\nexport interface InputValues extends Inputs<string | boolean> {}\n\n// NOTE: This is super WIP...\nexport const validationSchema: any = {\n  shipping: yup.object({\n    fullName: yup.string().required(\"Full name is required\"),\n    addressLine1: yup.string().required(\"Address is required\"),\n    addressLine2: yup.string().notRequired(),\n    city: yup.string().required(\"City is required\"),\n    state: yup.string().required(\"State is required\"),\n    postalCode: yup.string().required(\"Postal code is required\"),\n    country: yup.string().required(\"Country\"),\n  }),\n\n  // TODO: custom validation will need to happen with this stuff...\n  // - stripe cc validation?\n  // - handle billing same as shipping,\n  payment: yup.object({\n    nameOnCard: yup.string().required(\"Name is required\"),\n    cardNumber: yup.string().required(\"Card number is required\"),\n    expiration: yup.string().required(\"Exipration is required\"),\n    securityCode: yup.string().required(\"Security code is required\"),\n    sameAsShipping: yup.boolean(),\n    // billing fields: TODO: Only validate when sameAsShipping: false\n  }),\n  // TODO: Formik-connected checkbox input\n  review: yup.object({\n    agreeToTerms: yup.boolean().required(\"You must agree to terms\"),\n  }),\n}\n\nexport const initialValues: InputValues = {\n  // ShippingForm.jsx\n  fullName: \"\",\n  addressLine1: \"\",\n  addressLine2: \"\",\n  city: \"\",\n  state: \"\",\n  postalCode: \"\",\n  country: \"\",\n\n  // PaymentForm.jsx\n  nameOnCard: \"\",\n  cardNumber: \"\",\n  expiration: \"\",\n  securityCode: \"\",\n\n  sameAsShipping: false,\n\n  billingFullName: \"\",\n  billingAddressLine1: \"\",\n  billingAddressLine2: \"\",\n  billingCity: \"\",\n  billingState: \"\",\n  billingPostalCode: \"\",\n  billingCountry: \"\",\n\n  // ReviewForm\n  agreeToTerms: false,\n}\n"]}]}