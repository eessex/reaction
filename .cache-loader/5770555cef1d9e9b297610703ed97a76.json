{"remainingRequest":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/eve/development/reaction/src/Router/buildServerApp.tsx","dependencies":[{"path":"/Users/eve/development/reaction/src/Router/buildServerApp.tsx","mtime":1534252031000},{"path":"/Users/eve/development/reaction/.babelrc","mtime":1532461619000},{"path":"/Users/eve/development/reaction/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js","mtime":1509489566000}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buildServerApp = buildServerApp;\n\nvar _queryMiddleware = _interopRequireDefault(require(\"farce/lib/queryMiddleware\"));\n\nvar _foundRelay = require(\"found-relay\");\n\nvar _createRender = _interopRequireDefault(require(\"found/lib/createRender\"));\n\nvar _server = require(\"found/lib/server\");\n\nvar _server2 = require(\"loadable-components/server\");\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _server3 = _interopRequireDefault(require(\"react-dom/server\"));\n\nvar _createEnvironment = require(\"../Relay/createEnvironment\");\n\nvar _AppShell = require(\"./AppShell\");\n\nvar _Boot = require(\"./Boot\");\n\nvar _getUser = require(\"./getUser\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction buildServerApp(config) {\n  return new Promise(\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee(resolve, reject) {\n      var routes, url, user, initialMatchingMediaQueries, currentUser, relayEnvironment, historyMiddlewares, resolver, render, _ref2, redirect, status, element, AppContainer, relayData, loadableState;\n\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              routes = config.routes, url = config.url, user = config.user, initialMatchingMediaQueries = config.initialMatchingMediaQueries;\n              currentUser = (0, _getUser.getUser)(user);\n              relayEnvironment = (0, _createEnvironment.createEnvironment)({\n                user: currentUser\n              });\n              historyMiddlewares = [_queryMiddleware.default];\n              resolver = new _foundRelay.Resolver(relayEnvironment);\n              render = (0, _createRender.default)({});\n              _context.next = 9;\n              return (0, _server.getFarceResult)({\n                url: url,\n                historyMiddlewares: historyMiddlewares,\n                routeConfig: routes,\n                resolver: resolver,\n                render: render\n              });\n\n            case 9:\n              _ref2 = _context.sent;\n              redirect = _ref2.redirect;\n              status = _ref2.status;\n              element = _ref2.element;\n\n              if (!redirect) {\n                _context.next = 16;\n                break;\n              }\n\n              resolve({\n                redirect: redirect,\n                status: status\n              });\n              return _context.abrupt(\"return\");\n\n            case 16:\n              AppContainer = function AppContainer(props) {\n                return _react.default.createElement(_Boot.Boot, _extends({\n                  initialMatchingMediaQueries: initialMatchingMediaQueries,\n                  system: _objectSpread({}, config, {\n                    relayEnvironment: relayEnvironment,\n                    resolver: resolver,\n                    routes: routes,\n                    currentUser: currentUser\n                  })\n                }, props), _react.default.createElement(_AppShell.AppShell, {\n                  data: props.relayData,\n                  loadableState: props.loadableState,\n                  url: url\n                }, element));\n              }; // Kick off relay requests to prime cache\n\n\n              _server3.default.renderToString(_react.default.createElement(AppContainer, null)); // Serializable data to be rehydrated on client\n\n\n              _context.next = 20;\n              return relayEnvironment.relaySSRMiddleware.getCache();\n\n            case 20:\n              relayData = _context.sent;\n              _context.next = 23;\n              return (0, _server2.getLoadableState)(_react.default.createElement(AppContainer, null));\n\n            case 23:\n              loadableState = _context.sent;\n\n              /**\n               * FIXME: Relay SSR middleware is passing a _res object across which\n               * has circular references, leading to issues *ONLY* on staging / prod\n               * which can't be reproduced locally. This strips out _res as a quickfix\n               * though this should be PR'd back at relay-modern-network-modern-ssr.\n               */\n              try {\n                relayData.forEach(function (item) {\n                  item.forEach(function (i) {\n                    delete i._res;\n                  });\n                });\n              } catch (error) {\n                console.error(\"Router/buildServerApp Error cleaning data\", error);\n              }\n\n              resolve({\n                ServerApp: function ServerApp(props) {\n                  return _react.default.createElement(AppContainer, _extends({\n                    relayData: relayData,\n                    loadableState: loadableState\n                  }, props));\n                },\n                status: status\n              });\n              _context.next = 32;\n              break;\n\n            case 28:\n              _context.prev = 28;\n              _context.t0 = _context[\"catch\"](0);\n              console.error(\"[Reaction Router/buildServerApp] Error:\", _context.t0);\n              reject(_context.t0);\n\n            case 32:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[0, 28]]);\n    }));\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n}",{"version":3,"sources":["src/Router/buildServerApp.tsx"],"names":["buildServerApp","config","Promise","resolve","reject","routes","url","user","initialMatchingMediaQueries","currentUser","relayEnvironment","historyMiddlewares","queryMiddleware","resolver","Resolver","render","routeConfig","redirect","status","element","AppContainer","props","relayData","loadableState","ReactDOMServer","renderToString","relaySSRMiddleware","getCache","forEach","item","i","_res","error","console","ServerApp"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;AAGO,SAASA,cAAT,CAAwBC,MAAxB,EAAwE;AAC7E,SAAO,IAAIC,OAAJ;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAY,iBAAOC,OAAP,EAAgBC,MAAhB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEPC,oBAFO,GAE4CJ,MAF5C,CAEPI,MAFO,EAECC,GAFD,GAE4CL,MAF5C,CAECK,GAFD,EAEMC,IAFN,GAE4CN,MAF5C,CAEMM,IAFN,EAEYC,2BAFZ,GAE4CP,MAF5C,CAEYO,2BAFZ;AAGTC,yBAHS,GAGK,sBAAQF,IAAR,CAHL;AAITG,8BAJS,GAIU,0CAAkB;AAAEH,sBAAME;AAAR,eAAlB,CAJV;AAKTE,gCALS,GAKY,CAACC,wBAAD,CALZ;AAMTC,sBANS,GAME,IAAIC,oBAAJ,CAAaJ,gBAAb,CANF;AAOTK,oBAPS,GAOA,2BAAa,EAAb,CAPA;AAAA;AAAA,qBAS6B,4BAAe;AACzDT,wBADyD;AAEzDK,sDAFyD;AAGzDK,6BAAaX,MAH4C;AAIzDQ,kCAJyD;AAKzDE;AALyD,eAAf,CAT7B;;AAAA;AAAA;AASPE,sBATO,SASPA,QATO;AASGC,oBATH,SASGA,MATH;AASWC,qBATX,SASWA,OATX;;AAAA,mBAiBXF,QAjBW;AAAA;AAAA;AAAA;;AAkBbd,sBAAQ;AAAEc,kCAAF;AAAYC;AAAZ,eAAR;AAlBa;;AAAA;AAsBTE,0BAtBS,GAsBM,SAAfA,YAAe,QAAS;AAC5B,uBACE,6BAAC,UAAD;AACE,+CAA6BZ,2BAD/B;AAEE,4CACKP,MADL;AAEES,sDAFF;AAGEG,sCAHF;AAIER,kCAJF;AAKEI;AALF;AAFF,mBASMY,KATN,GAWE,6BAAC,kBAAD;AACE,wBAAMA,MAAMC,SADd;AAEE,iCAAeD,MAAME,aAFvB;AAGE,uBAAKjB;AAHP,mBAKGa,OALH,CAXF,CADF;AAqBD,eA5Cc,EA8Cf;;;AACAK,+BAAeC,cAAf,CAA8B,6BAAC,YAAD,OAA9B,EA/Ce,CAiDf;;;AAjDe;AAAA,qBAkDSf,iBAAiBgB,kBAAjB,CAAoCC,QAApC,EAlDT;;AAAA;AAkDTL,uBAlDS;AAAA;AAAA,qBAmDa,+BAAiB,6BAAC,YAAD,OAAjB,CAnDb;;AAAA;AAmDTC,2BAnDS;;AAqDf;;;;;;AAMA,kBAAI;AACFD,0BAAUM,OAAV,CAAkB,gBAAQ;AACxBC,uBAAKD,OAAL,CAAa,aAAK;AAChB,2BAAOE,EAAEC,IAAT;AACD,mBAFD;AAGD,iBAJD;AAKD,eAND,CAME,OAAOC,KAAP,EAAc;AACdC,wBAAQD,KAAR,CAAc,2CAAd,EAA2DA,KAA3D;AACD;;AAED7B,sBAAQ;AACN+B,2BAAW;AAAA,yBACT,6BAAC,YAAD;AACE,+BAAWZ,SADb;AAEE,mCAAeC;AAFjB,qBAGMF,KAHN,EADS;AAAA,iBADL;AAQNH;AARM,eAAR;AArEe;AAAA;;AAAA;AAAA;AAAA;AAgFfe,sBAAQD,KAAR,CAAc,yCAAd;AACA5B;;AAjFe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAZ;;AAAA;AAAA;AAAA;AAAA,MAAP;AAoFD","sourceRoot":"/Users/eve/development/reaction","sourcesContent":["import queryMiddleware from \"farce/lib/queryMiddleware\"\nimport { Resolver } from \"found-relay\"\nimport createRender from \"found/lib/createRender\"\nimport { getFarceResult } from \"found/lib/server\"\nimport { getLoadableState } from \"loadable-components/server\"\nimport React from \"react\"\nimport ReactDOMServer from \"react-dom/server\"\nimport { createEnvironment } from \"../Relay/createEnvironment\"\nimport { AppShell } from \"./AppShell\"\nimport { Boot } from \"./Boot\"\nimport { getUser } from \"./getUser\"\nimport { AppConfig, ServerResolveProps } from \"./types\"\n\nexport function buildServerApp(config: AppConfig): Promise<ServerResolveProps> {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const { routes, url, user, initialMatchingMediaQueries } = config\n      const currentUser = getUser(user)\n      const relayEnvironment = createEnvironment({ user: currentUser })\n      const historyMiddlewares = [queryMiddleware]\n      const resolver = new Resolver(relayEnvironment)\n      const render = createRender({})\n\n      const { redirect, status, element } = await getFarceResult({\n        url,\n        historyMiddlewares,\n        routeConfig: routes,\n        resolver,\n        render,\n      })\n\n      if (redirect) {\n        resolve({ redirect, status })\n        return\n      }\n\n      const AppContainer = props => {\n        return (\n          <Boot\n            initialMatchingMediaQueries={initialMatchingMediaQueries}\n            system={{\n              ...config,\n              relayEnvironment,\n              resolver,\n              routes,\n              currentUser,\n            }}\n            {...props}\n          >\n            <AppShell\n              data={props.relayData}\n              loadableState={props.loadableState}\n              url={url}\n            >\n              {element}\n            </AppShell>\n          </Boot>\n        )\n      }\n\n      // Kick off relay requests to prime cache\n      ReactDOMServer.renderToString(<AppContainer />)\n\n      // Serializable data to be rehydrated on client\n      const relayData = await relayEnvironment.relaySSRMiddleware.getCache()\n      const loadableState = await getLoadableState(<AppContainer />)\n\n      /**\n       * FIXME: Relay SSR middleware is passing a _res object across which\n       * has circular references, leading to issues *ONLY* on staging / prod\n       * which can't be reproduced locally. This strips out _res as a quickfix\n       * though this should be PR'd back at relay-modern-network-modern-ssr.\n       */\n      try {\n        relayData.forEach(item => {\n          item.forEach(i => {\n            delete i._res\n          })\n        })\n      } catch (error) {\n        console.error(\"Router/buildServerApp Error cleaning data\", error)\n      }\n\n      resolve({\n        ServerApp: props => (\n          <AppContainer\n            relayData={relayData}\n            loadableState={loadableState}\n            {...props}\n          />\n        ),\n        status,\n      })\n    } catch (error) {\n      console.error(\"[Reaction Router/buildServerApp] Error:\", error)\n      reject(error)\n    }\n  })\n}\n"]}]}