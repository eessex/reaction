{"remainingRequest":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js??ref--5-1!/Users/eve/development/reaction/src/Components/Publishing/Constants.ts","dependencies":[{"path":"/Users/eve/development/reaction/src/Components/Publishing/Constants.ts","mtime":1527877289000},{"path":"/Users/eve/development/reaction/.babelrc","mtime":1527877289000},{"path":"/Users/eve/development/reaction/node_modules/cache-loader/dist/cjs.js","mtime":1510929699000},{"path":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js","mtime":1509489566000}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getArtsySlugsFromHTML = exports.getArtsySlugsFromArticle = exports.formatTime = exports.getMediaDate = exports.getCurrentUnixTimestamp = exports.getDate = exports.getAuthorByline = exports.getFullArtsyHref = exports.getFullEditorialHref = exports.getEditorialHref = exports.getArticleFullHref = exports.getArticleHref = exports.SIZE_ME_REFRESH_RATE = exports.GLOBAL_IMAGE_QUALITY = exports.EMAIL_REGEX = void 0;\n\nvar _lodash = require(\"lodash\");\n\nvar _cheerio = _interopRequireDefault(require(\"cheerio\"));\n\nvar _momentTimezone = _interopRequireDefault(require(\"moment-timezone\"));\n\nvar _url = _interopRequireDefault(require(\"url\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Matches for Email / Instant Articles\n */\nvar EMAIL_REGEX = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n/**\n * The quality to request from image CDN\n */\n\nexports.EMAIL_REGEX = EMAIL_REGEX;\nvar GLOBAL_IMAGE_QUALITY = 80;\n/**\n * TODO: Eventually remove sizeMe\n */\n\nexports.GLOBAL_IMAGE_QUALITY = GLOBAL_IMAGE_QUALITY;\nvar SIZE_ME_REFRESH_RATE = 500;\n/**\n * Relative path to article\n */\n\nexports.SIZE_ME_REFRESH_RATE = SIZE_ME_REFRESH_RATE;\n\nvar getArticleHref = function getArticleHref(slug) {\n  return \"/article/\".concat(slug);\n};\n/**\n * Absolute path to article\n */\n\n\nexports.getArticleHref = getArticleHref;\n\nvar getArticleFullHref = function getArticleFullHref(slug) {\n  return \"https://www.artsy.net/article/\".concat(slug);\n};\n/**\n * Relative path to editorial entity\n */\n\n\nexports.getArticleFullHref = getArticleFullHref;\n\nvar getEditorialHref = function getEditorialHref(type, slug) {\n  return \"/\".concat(type, \"/\").concat(slug);\n};\n/**\n * Absolute path to editorial entity\n */\n\n\nexports.getEditorialHref = getEditorialHref;\n\nvar getFullEditorialHref = function getFullEditorialHref(type, slug) {\n  return \"https://www.artsy.net/\".concat(type, \"/\").concat(slug);\n};\n/**\n * Absolute path to artsy entity\n */\n\n\nexports.getFullEditorialHref = getFullEditorialHref;\n\nvar getFullArtsyHref = function getFullArtsyHref(slug) {\n  return \"https://www.artsy.net/\".concat(slug);\n};\n/**\n * ByLine helpers\n * TODO: Move this into some kind of utils folder\n */\n\n\nexports.getFullArtsyHref = getFullArtsyHref;\n\nvar getAuthorByline = function getAuthorByline(authors) {\n  var authorCount = Number(authors && authors.length);\n\n  if (authorCount === 1) {\n    return authors[0].name || \"\";\n  } else if (authorCount > 1) {\n    var names = authors.reduce(function (prev, curr, i) {\n      var delim;\n      var len = authors.length;\n\n      if (i === len - 1) {\n        delim = \" and \";\n      } else if (i === 0) {\n        delim = \"\";\n      } else {\n        delim = \", \";\n      }\n\n      return prev + delim + curr.name;\n    }, \"\");\n    return names; // No Author\n  } else {\n    return \"Artsy Editors\";\n  }\n};\n\nexports.getAuthorByline = getAuthorByline;\n\nvar getDate = function getDate(date) {\n  var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"default\";\n  var today = (0, _momentTimezone.default)();\n  var isToday = today.isSame((0, _momentTimezone.default)(date), \"day\");\n  var isThisYear = (0, _momentTimezone.default)(date).format(\"YYYY\") === (0, _momentTimezone.default)(today).format(\"YYYY\");\n\n  switch (format) {\n    case \"monthDay\":\n      return (0, _momentTimezone.default)(date).format(\"MMM D\");\n\n    case \"monthYear\":\n      return (0, _momentTimezone.default)(date).tz(\"America/New_York\").format(\"MMMM YYYY\");\n\n    case \"condensed\":\n      return (0, _momentTimezone.default)(date).tz(\"America/New_York\").format(\"MMM D, YYYY\");\n\n    case \"verbose\":\n      var day = isToday ? \"Today\" : (0, _momentTimezone.default)(date).tz(\"America/New_York\").format(\"MMM D, YYYY\");\n      var time = (0, _momentTimezone.default)(date).tz(\"America/New_York\").format(\"h:mm a\");\n      return \"\".concat(day, \" at \").concat(time);\n\n    case \"news\":\n      return isToday ? \"Today\" : isThisYear ? (0, _momentTimezone.default)(date).tz(\"America/New_York\").format(\"MMM D\") : (0, _momentTimezone.default)(date).tz(\"America/New_York\").format(\"MMM D, YYYY\");\n\n    default:\n      return (0, _momentTimezone.default)(date).tz(\"America/New_York\").format(\"MMM D, YYYY h:mm a\");\n  }\n};\n\nexports.getDate = getDate;\n\nvar getCurrentUnixTimestamp = function getCurrentUnixTimestamp() {\n  return (0, _momentTimezone.default)().unix();\n};\n\nexports.getCurrentUnixTimestamp = getCurrentUnixTimestamp;\n\nvar getMediaDate = function getMediaDate(article) {\n  var published_at = article.published_at,\n      scheduled_publish_at = article.scheduled_publish_at,\n      media = article.media;\n  var release_date = media.release_date;\n\n  if (release_date) {\n    return release_date;\n  } else {\n    return published_at || scheduled_publish_at;\n  }\n};\n\nexports.getMediaDate = getMediaDate;\n\nvar formatTime = function formatTime(time) {\n  var minutes = Math.floor(time / 60) % 60;\n  var seconds = Math.floor(time % 60);\n  minutes = minutes <= 0 ? 0 : minutes;\n  seconds = seconds <= 0 ? 0 : seconds;\n  var minutesStr = minutes < 10 ? \"0\" + minutes : minutes;\n  var secondsStr = seconds < 10 ? \"0\" + seconds : seconds;\n  return minutesStr + \":\" + secondsStr;\n};\n\nexports.formatTime = formatTime;\n\nvar getArtsySlugsFromArticle = function getArtsySlugsFromArticle(article) {\n  var articleBody = article.sections.map(function (section) {\n    if (section.type === \"text\") {\n      return section.body;\n    }\n  }).join();\n  var artists = (0, _lodash.uniq)(getArtsySlugsFromHTML(articleBody, \"artist\"));\n  var genes = (0, _lodash.uniq)(getArtsySlugsFromHTML(articleBody, \"gene\"));\n  return {\n    artists: artists,\n    genes: genes\n  };\n};\n\nexports.getArtsySlugsFromArticle = getArtsySlugsFromArticle;\n\nvar getArtsySlugsFromHTML = function getArtsySlugsFromHTML(html, model) {\n  var $ = _cheerio.default.load(html);\n\n  var slugs = (0, _lodash.compact)($(\"a\")).map(function (a) {\n    var href = $(a).attr(\"href\");\n\n    if (href) {\n      if (href.match(\"artsy.net/\".concat(model))) {\n        return (0, _lodash.last)(_url.default.parse(href).pathname.split(\"/\"));\n      } else {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  });\n  return (0, _lodash.compact)(slugs);\n};\n\nexports.getArtsySlugsFromHTML = getArtsySlugsFromHTML;",{"version":3,"sources":["src/Components/Publishing/Constants.ts"],"names":["EMAIL_REGEX","GLOBAL_IMAGE_QUALITY","SIZE_ME_REFRESH_RATE","getArticleHref","slug","getArticleFullHref","getEditorialHref","type","getFullEditorialHref","getFullArtsyHref","getAuthorByline","authorCount","Number","authors","length","name","names","reduce","prev","curr","i","delim","len","getDate","date","format","today","isToday","isSame","isThisYear","tz","day","time","getCurrentUnixTimestamp","unix","getMediaDate","published_at","article","scheduled_publish_at","media","release_date","formatTime","minutes","Math","floor","seconds","minutesStr","secondsStr","getArtsySlugsFromArticle","articleBody","sections","map","section","body","join","artists","getArtsySlugsFromHTML","genes","html","model","$","load","slugs","href","a","attr","match","parse","pathname","split"],"mappings":"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","file":"/Users/eve/development/reaction/src/Components/Publishing/Constants.ts","sourceRoot":"/Users/eve/development/reaction","sourcesContent":["import { compact, last, uniq } from \"lodash\"\nimport cheerio from \"cheerio\"\nimport moment from \"moment-timezone\"\nimport url from \"url\"\nimport { ArticleData, DateFormat } from \"../Publishing/Typings\"\n\n/**\n * Matches for Email / Instant Articles\n */\nexport const EMAIL_REGEX = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n\n/**\n * The quality to request from image CDN\n */\nexport const GLOBAL_IMAGE_QUALITY = 80\n\n/**\n * TODO: Eventually remove sizeMe\n */\nexport const SIZE_ME_REFRESH_RATE = 500\n\n/**\n * Relative path to article\n */\nexport const getArticleHref = slug => `/article/${slug}`\n\n/**\n * Absolute path to article\n */\nexport const getArticleFullHref = slug =>\n  `https://www.artsy.net/article/${slug}`\n\n/**\n * Relative path to editorial entity\n */\nexport const getEditorialHref = (type, slug) => `/${type}/${slug}`\n\n/**\n * Absolute path to editorial entity\n */\nexport const getFullEditorialHref = (type, slug) =>\n  `https://www.artsy.net/${type}/${slug}`\n\n/**\n * Absolute path to artsy entity\n */\nexport const getFullArtsyHref = slug => `https://www.artsy.net/${slug}`\n\n/**\n * ByLine helpers\n * TODO: Move this into some kind of utils folder\n */\nexport const getAuthorByline = authors => {\n  const authorCount = Number(authors && authors.length)\n\n  if (authorCount === 1) {\n    return authors[0].name || \"\"\n  } else if (authorCount > 1) {\n    const names = authors.reduce((prev, curr, i) => {\n      let delim\n      const len = authors.length\n      if (i === len - 1) {\n        delim = \" and \"\n      } else if (i === 0) {\n        delim = \"\"\n      } else {\n        delim = \", \"\n      }\n      return prev + delim + curr.name\n    }, \"\")\n    return names\n\n    // No Author\n  } else {\n    return \"Artsy Editors\"\n  }\n}\n\nexport const getDate = (date, format: DateFormat = \"default\") => {\n  const today = moment()\n  const isToday = today.isSame(moment(date), \"day\")\n  const isThisYear =\n    moment(date).format(\"YYYY\") === moment(today).format(\"YYYY\")\n\n  switch (format) {\n    case \"monthDay\":\n      return moment(date).format(\"MMM D\")\n    case \"monthYear\":\n      return moment(date)\n        .tz(\"America/New_York\")\n        .format(\"MMMM YYYY\")\n    case \"condensed\":\n      return moment(date)\n        .tz(\"America/New_York\")\n        .format(\"MMM D, YYYY\")\n    case \"verbose\":\n      const day = isToday\n        ? \"Today\"\n        : moment(date)\n            .tz(\"America/New_York\")\n            .format(\"MMM D, YYYY\")\n      const time = moment(date)\n        .tz(\"America/New_York\")\n        .format(\"h:mm a\")\n      return `${day} at ${time}`\n    case \"news\":\n      return isToday\n        ? \"Today\"\n        : isThisYear\n          ? moment(date)\n              .tz(\"America/New_York\")\n              .format(\"MMM D\")\n          : moment(date)\n              .tz(\"America/New_York\")\n              .format(\"MMM D, YYYY\")\n    default:\n      return moment(date)\n        .tz(\"America/New_York\")\n        .format(\"MMM D, YYYY h:mm a\")\n  }\n}\n\nexport const getCurrentUnixTimestamp = () => moment().unix()\n\nexport const getMediaDate = article => {\n  const { published_at, scheduled_publish_at, media } = article\n  const { release_date } = media\n\n  if (release_date) {\n    return release_date\n  } else {\n    return published_at || scheduled_publish_at\n  }\n}\n\nexport const formatTime = time => {\n  let minutes = Math.floor(time / 60) % 60\n  let seconds = Math.floor(time % 60)\n  minutes = minutes <= 0 ? 0 : minutes\n  seconds = seconds <= 0 ? 0 : seconds\n\n  const minutesStr = minutes < 10 ? \"0\" + minutes : minutes\n  const secondsStr = seconds < 10 ? \"0\" + seconds : seconds\n  return minutesStr + \":\" + secondsStr\n}\n\ninterface SlugsFromArticle {\n  artists: string[]\n  genes: string[]\n}\n\nexport const getArtsySlugsFromArticle = (\n  article: ArticleData\n): SlugsFromArticle => {\n  const articleBody = article.sections\n    .map(section => {\n      if (section.type === \"text\") {\n        return section.body\n      }\n    })\n    .join()\n\n  let artists = uniq(getArtsySlugsFromHTML(articleBody, \"artist\"))\n  let genes = uniq(getArtsySlugsFromHTML(articleBody, \"gene\"))\n\n  return {\n    artists,\n    genes,\n  }\n}\n\nexport const getArtsySlugsFromHTML = (\n  html: string,\n  model: string\n): string[] => {\n  const $ = cheerio.load(html)\n\n  const slugs = compact($(\"a\")).map(a => {\n    let href = $(a).attr(\"href\")\n    if (href) {\n      if (href.match(`artsy.net/${model}`)) {\n        return last(url.parse(href).pathname.split(\"/\"))\n      } else {\n        return null\n      }\n    } else {\n      return null\n    }\n  })\n  return compact(slugs)\n}\n"]}]}