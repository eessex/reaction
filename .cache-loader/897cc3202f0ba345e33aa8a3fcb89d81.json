{"remainingRequest":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/eve/development/reaction/src/Components/ArtworkFilter/TotalCount.tsx","dependencies":[{"path":"/Users/eve/development/reaction/src/Components/ArtworkFilter/TotalCount.tsx","mtime":1535727435000},{"path":"/Users/eve/development/reaction/.babelrc","mtime":1537112679000},{"path":"/Users/eve/development/reaction/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport numeral from \"numeral\";\nimport React from \"react\";\nimport { createFragmentContainer, graphql } from \"react-relay\";\nimport styled from \"styled-components\";\nimport { garamond } from \"../../Assets/Fonts\";\nexport var TotalCount =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TotalCount, _React$Component);\n\n  function TotalCount() {\n    _classCallCheck(this, TotalCount);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TotalCount).apply(this, arguments));\n  }\n\n  _createClass(TotalCount, [{\n    key: \"render\",\n    value: function render() {\n      var total = this.props.filter_artworks.counts.total;\n      var s = total !== 1 ? \"s\" : \"\";\n      return React.createElement(\"div\", {\n        className: this.props.className\n      }, numeral(total).format(\"0,0\"), \" Work\", s);\n    }\n  }]);\n\n  return TotalCount;\n}(React.Component);\nvar StyledTotalCount = styled(TotalCount).withConfig({\n  displayName: \"TotalCount__StyledTotalCount\",\n  componentId: \"s1vqe55j-0\"\n})([\"font-style:italic;\", \";\"], garamond(\"s11\"));\nexport default createFragmentContainer(StyledTotalCount, {\n  filter_artworks: function filter_artworks() {\n    var node = require(\"../../__generated__/TotalCount_filter_artworks.graphql\");\n\n    if (node.hash && node.hash !== \"ef252545faa2dcdc0445805a52f4e7c0\") {\n      console.error(\"The definition of 'TotalCount_filter_artworks' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.\");\n    }\n\n    return require(\"../../__generated__/TotalCount_filter_artworks.graphql\");\n  }\n});",{"version":3,"sources":["/Users/eve/development/reaction/src/Components/ArtworkFilter/TotalCount.tsx"],"names":["numeral","React","createFragmentContainer","graphql","styled","garamond","TotalCount","total","props","filter_artworks","counts","s","className","format","Component","StyledTotalCount"],"mappings":";;;;;;;;;;;;;;;;;;AACA,OAAOA,OAAP,MAAoB,SAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,uBAAT,EAAkCC,OAAlC,QAAiD,aAAjD;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,QAAT;AAMA,WAAaC,UAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,6BACW;AACP,UAAMC,KAAK,GAAG,KAAKC,KAAL,CAAWC,eAAX,CAA2BC,MAA3B,CAAkCH,KAAhD;AACA,UAAMI,CAAC,GAAGJ,KAAK,KAAK,CAAV,GAAc,GAAd,GAAoB,EAA9B;AACA,aACE;AAAK,QAAA,SAAS,EAAE,KAAKC,KAAL,CAAWI;AAA3B,SACGZ,OAAO,CAACO,KAAD,CAAP,CAAeM,MAAf,CAAsB,KAAtB,CADH,WACsCF,CADtC,CADF;AAKD;AATH;;AAAA;AAAA,EAAgCV,KAAK,CAACa,SAAtC;AAYA,IAAMC,gBAAgB,GAAGX,MAAM,CAACE,UAAD,CAAT;AAAA;AAAA;AAAA,gCAElBD,QAAQ,CAAC,KAAD,CAFU,CAAtB;AAKA,eAAeH,uBAAuB,CACpCa,gBADoC;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,EAAtC","sourcesContent":["import { TotalCount_filter_artworks } from \"__generated__/TotalCount_filter_artworks.graphql\"\nimport numeral from \"numeral\"\nimport React from \"react\"\nimport { createFragmentContainer, graphql } from \"react-relay\"\nimport styled from \"styled-components\"\nimport { garamond } from \"../../Assets/Fonts\"\n\ninterface TotalCountProps extends React.HTMLProps<TotalCount> {\n  filter_artworks: TotalCount_filter_artworks\n}\n\nexport class TotalCount extends React.Component<TotalCountProps, null> {\n  render() {\n    const total = this.props.filter_artworks.counts.total\n    const s = total !== 1 ? \"s\" : \"\"\n    return (\n      <div className={this.props.className}>\n        {numeral(total).format(\"0,0\")} Work{s}\n      </div>\n    )\n  }\n}\n\nconst StyledTotalCount = styled(TotalCount)`\n  font-style: italic;\n  ${garamond(\"s11\")};\n`\n\nexport default createFragmentContainer(\n  StyledTotalCount,\n  graphql`\n    fragment TotalCount_filter_artworks on FilterArtworks {\n      counts {\n        total\n      }\n    }\n  `\n)\n"]}]}