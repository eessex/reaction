{"remainingRequest":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/eve/development/reaction/src/Components/InquiryArtwork.tsx","dependencies":[{"path":"/Users/eve/development/reaction/src/Components/InquiryArtwork.tsx","mtime":1535727435000},{"path":"/Users/eve/development/reaction/.babelrc","mtime":1537112679000},{"path":"/Users/eve/development/reaction/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  width: 80px;\\n  height: 80px;\\n  border-radius: 100%;\\n  border: 5px solid \", \";\\n  background: transparent;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  text-align: center;\\n  transition: border-color 0.3s;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nimport React from \"react\";\nimport { createFragmentContainer, graphql } from \"react-relay\";\nimport styled from \"styled-components\";\nimport colors from \"../Assets/Colors\";\nimport Artwork from \"./Artwork\";\nimport Icon from \"./Icon\";\nvar OverlayBackground = styled.div.withConfig({\n  displayName: \"InquiryArtwork__OverlayBackground\",\n  componentId: \"vgxyaf-0\"\n})([\"background-color:\", \";height:100%;width:100%;position:absolute;z-index:10;top:0;left:0;opacity:0.8;text-align:center;pointer-events:none;display:flex;justify-content:center;align-items:center;\"], colors.purpleRegular);\nvar Div = styled.div;\nvar Circle = Div(_templateObject(), function (props) {\n  return props.selected ? \"white\" : \"transparent\";\n});\n\nvar Overlay = function Overlay(props) {\n  return React.createElement(OverlayBackground, null, React.createElement(Circle, {\n    selected: props.selected\n  }, React.createElement(Icon, {\n    name: \"check\",\n    color: \"white\"\n  })));\n};\n\nexport var InquiryArtwork = function InquiryArtwork(props) {\n  return React.createElement(Artwork, _extends({}, props, {\n    extended: false,\n    Overlay: Overlay,\n    showOverlayOnHover: true\n  }));\n};\nexport default createFragmentContainer(InquiryArtwork, {\n  artwork: function artwork() {\n    var node = require(\"../__generated__/InquiryArtwork_artwork.graphql\");\n\n    if (node.hash && node.hash !== \"395ab37180661dd93a2a1ee189b363b5\") {\n      console.error(\"The definition of 'InquiryArtwork_artwork' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.\");\n    }\n\n    return require(\"../__generated__/InquiryArtwork_artwork.graphql\");\n  }\n});",{"version":3,"sources":["/Users/eve/development/reaction/src/Components/InquiryArtwork.tsx"],"names":["React","createFragmentContainer","graphql","styled","colors","Artwork","Icon","OverlayBackground","div","purpleRegular","Div","Circle","props","selected","Overlay","InquiryArtwork"],"mappings":";;;;;;;;;;;;;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,uBAAT,EAAkCC,OAAlC,QAAiD,aAAjD;AACA,OAAOC,MAAP,MAAuC,mBAAvC;AACA,OAAOC,MAAP;AACA,OAAOC,OAAP;AACA,OAAOC,IAAP;AAMA,IAAMC,iBAAiB,GAAGJ,MAAM,CAACK,GAAV;AAAA;AAAA;AAAA,yMACDJ,MAAM,CAACK,aADN,CAAvB;AAeA,IAAMC,GAAgC,GAAGP,MAAM,CAACK,GAAhD;AACA,IAAMG,MAAM,GAAGD,GAAH,oBAIU,UAAAE,KAAK;AAAA,SAAKA,KAAK,CAACC,QAAN,GAAiB,OAAjB,GAA2B,aAAhC;AAAA,CAJf,CAAZ;;AAaA,IAAMC,OAAgC,GAAG,SAAnCA,OAAmC,CAAAF,KAAK;AAAA,SAC5C,oBAAC,iBAAD,QACE,oBAAC,MAAD;AAAQ,IAAA,QAAQ,EAAEA,KAAK,CAACC;AAAxB,KACE,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAC,OAAX;AAAmB,IAAA,KAAK,EAAC;AAAzB,IADF,CADF,CAD4C;AAAA,CAA9C;;AAQA,OAAO,IAAME,cAEZ,GAAG,SAFSA,cAET,CAAAH,KAAK,EAAI;AACX,SACE,oBAAC,OAAD,eAAaA,KAAb;AAAoB,IAAA,QAAQ,EAAE,KAA9B;AAAqC,IAAA,OAAO,EAAEE,OAA9C;AAAuD,IAAA,kBAAkB;AAAzE,KADF;AAGD,CANM;AAQP,eAAeb,uBAAuB,CACpCc,cADoC;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,EAAtC","sourcesContent":["import { InquiryArtwork_artwork } from \"__generated__/InquiryArtwork_artwork.graphql\"\nimport React from \"react\"\nimport { createFragmentContainer, graphql } from \"react-relay\"\nimport styled, { StyledFunction } from \"styled-components\"\nimport colors from \"../Assets/Colors\"\nimport Artwork, { ArtworkProps, OverlayProps } from \"./Artwork\"\nimport Icon from \"./Icon\"\n\ninterface CircleProps extends React.HTMLProps<HTMLDivElement> {\n  selected?: boolean\n}\n\nconst OverlayBackground = styled.div`\n  background-color: ${colors.purpleRegular};\n  height: 100%;\n  width: 100%;\n  position: absolute;\n  z-index: 10;\n  top: 0;\n  left: 0;\n  opacity: 0.8;\n  text-align: center;\n  pointer-events: none;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\nconst Div: StyledFunction<CircleProps> = styled.div\nconst Circle = Div`\n  width: 80px;\n  height: 80px;\n  border-radius: 100%;\n  border: 5px solid ${props => (props.selected ? \"white\" : \"transparent\")};\n  background: transparent;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n  transition: border-color 0.3s;\n`\n\nconst Overlay: React.SFC<OverlayProps> = props => (\n  <OverlayBackground>\n    <Circle selected={props.selected}>\n      <Icon name=\"check\" color=\"white\" />\n    </Circle>\n  </OverlayBackground>\n)\n\nexport const InquiryArtwork: React.SFC<\n  ArtworkProps & { artwork: InquiryArtwork_artwork }\n> = props => {\n  return (\n    <Artwork {...props} extended={false} Overlay={Overlay} showOverlayOnHover />\n  )\n}\n\nexport default createFragmentContainer(\n  InquiryArtwork,\n  graphql`\n    fragment InquiryArtwork_artwork on Artwork {\n      ...Artwork_artwork\n    }\n  `\n)\n"]}]}