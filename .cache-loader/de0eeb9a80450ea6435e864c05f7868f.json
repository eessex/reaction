{"remainingRequest":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/eve/development/reaction/src/Components/Authentication/helpers.ts","dependencies":[{"path":"/Users/eve/development/reaction/src/Components/Authentication/helpers.ts","mtime":1529423546000},{"path":"/Users/eve/development/reaction/.babelrc","mtime":1537112679000},{"path":"/Users/eve/development/reaction/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport * as sharify from \"sharify\";\nimport { metaphysics } from \"../../Utils/metaphysics\";\nexport var handleSubmit = function handleSubmit(url, csrf, redirectTo) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(values, formikBag) {\n        var data;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return sendAuthData(url, _objectSpread({\n                  _csrf: csrf\n                }, values));\n\n              case 3:\n                data = _context.sent;\n\n                if (data.success) {\n                  if (redirectTo) {\n                    document.location.pathname = redirectTo;\n                  }\n                } else {\n                  formikBag.setStatus(data);\n                }\n\n                _context.next = 10;\n                break;\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](0);\n                formikBag.setStatus(_context.t0);\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 7]]);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport function sendAuthData(_x3, _x4) {\n  return _sendAuthData.apply(this, arguments);\n}\n\nfunction _sendAuthData() {\n  _sendAuthData = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee2(url, values) {\n    var res, data;\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return fetch(url, {\n              headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                \"X-Requested-With\": \"XMLHttpRequest\"\n              },\n              method: \"POST\",\n              credentials: \"same-origin\",\n              body: JSON.stringify(values)\n            });\n\n          case 2:\n            res = _context2.sent;\n            _context2.next = 5;\n            return res.json();\n\n          case 5:\n            data = _context2.sent;\n            return _context2.abrupt(\"return\", data);\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this);\n  }));\n  return _sendAuthData.apply(this, arguments);\n}\n\nexport var checkEmail = function checkEmail(_ref2) {\n  var values = _ref2.values,\n      actions = _ref2.actions,\n      shouldExist = _ref2.shouldExist;\n\n  var query = function query(email) {\n    return \"\\n    query {\\n      user(email: \\\"\".concat(email, \"\\\") {\\n        userAlreadyExists\\n      }\\n    }\\n  \");\n  };\n\n  return metaphysics({\n    query: query(values.email)\n  }, {\n    appToken: sharify.data.XAPP_TOKEN\n  }).then(function (_ref3) {\n    var data = _ref3.data;\n\n    if (data.user.userAlreadyExists) {\n      if (shouldExist) {\n        return true;\n      } else {\n        actions.setFieldError(\"email\", \"Email already exists.\");\n        actions.setSubmitting(false);\n        return false;\n      }\n    } else {\n      if (shouldExist) {\n        actions.setFieldError(\"email\", \"Email does not exist.\");\n        actions.setSubmitting(false);\n        return false;\n      } else {\n        return true;\n      }\n    }\n  });\n};",{"version":3,"sources":["/Users/eve/development/reaction/src/Components/Authentication/helpers.ts"],"names":["sharify","metaphysics","handleSubmit","url","csrf","redirectTo","values","formikBag","sendAuthData","_csrf","data","success","document","location","pathname","setStatus","fetch","headers","Accept","method","credentials","body","JSON","stringify","res","json","checkEmail","actions","shouldExist","query","email","appToken","XAPP_TOKEN","then","user","userAlreadyExists","setFieldError","setSubmitting"],"mappings":";;;;;;;;AAAA,OAAO,KAAKA,OAAZ,MAAyB,SAAzB;AACA,SAASC,WAAT;AAEA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAC1BC,GAD0B,EAE1BC,IAF0B,EAG1BC,UAH0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAIvB,iBAAOC,MAAP,EAAeC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAEkBC,YAAY,CAACL,GAAD;AAAQM,kBAAAA,KAAK,EAAEL;AAAf,mBAAwBE,MAAxB,EAF9B;;AAAA;AAEKI,gBAAAA,IAFL;;AAGD,oBAAIA,IAAI,CAACC,OAAT,EAAkB;AAChB,sBAAIN,UAAJ,EAAgB;AACdO,oBAAAA,QAAQ,CAACC,QAAT,CAAkBC,QAAlB,GAA6BT,UAA7B;AACD;AACF,iBAJD,MAIO;AACLE,kBAAAA,SAAS,CAACQ,SAAV,CAAoBL,IAApB;AACD;;AATA;AAAA;;AAAA;AAAA;AAAA;AAWDH,gBAAAA,SAAS,CAACQ,SAAV;;AAXC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAJuB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAArB;AAmBP,gBAAsBP,YAAtB;AAAA;AAAA;;;;;0BAAO,kBACLL,GADK,EAELG,MAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAIaU,KAAK,CAACb,GAAD,EAAM;AAC3Bc,cAAAA,OAAO,EAAE;AACPC,gBAAAA,MAAM,EAAE,kBADD;AAEP,gCAAgB,kBAFT;AAGP,oCAAoB;AAHb,eADkB;AAM3BC,cAAAA,MAAM,EAAE,MANmB;AAO3BC,cAAAA,WAAW,EAAE,aAPc;AAQ3BC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAejB,MAAf;AARqB,aAAN,CAJlB;;AAAA;AAICkB,YAAAA,GAJD;AAAA;AAAA,mBAccA,GAAG,CAACC,IAAJ,EAdd;;AAAA;AAcCf,YAAAA,IAdD;AAAA,8CAeEA,IAfF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAkBP,OAAO,IAAMgB,UAAU,GAAG,SAAbA,UAAa,QAAsC;AAAA,MAAnCpB,MAAmC,SAAnCA,MAAmC;AAAA,MAA3BqB,OAA2B,SAA3BA,OAA2B;AAAA,MAAlBC,WAAkB,SAAlBA,WAAkB;;AAC9D,MAAMC,KAAK,GAAG,SAARA,KAAQ,CAAAC,KAAK;AAAA,wDAEAA,KAFA;AAAA,GAAnB;;AAOA,SAAO7B,WAAW,CAChB;AAAE4B,IAAAA,KAAK,EAAEA,KAAK,CAACvB,MAAM,CAACwB,KAAR;AAAd,GADgB,EAEhB;AACEC,IAAAA,QAAQ,EAAE/B,OAAO,CAACU,IAAR,CAAasB;AADzB,GAFgB,CAAX,CAKLC,IALK,CAKA,iBAAmB;AAAA,QAAhBvB,IAAgB,SAAhBA,IAAgB;;AACxB,QAAIA,IAAI,CAACwB,IAAL,CAAUC,iBAAd,EAAiC;AAC/B,UAAIP,WAAJ,EAAiB;AACf,eAAO,IAAP;AACD,OAFD,MAEO;AACLD,QAAAA,OAAO,CAACS,aAAR,CAAsB,OAAtB,EAA+B,uBAA/B;AACAT,QAAAA,OAAO,CAACU,aAAR,CAAsB,KAAtB;AACA,eAAO,KAAP;AACD;AACF,KARD,MAQO;AACL,UAAIT,WAAJ,EAAiB;AACfD,QAAAA,OAAO,CAACS,aAAR,CAAsB,OAAtB,EAA+B,uBAA/B;AACAT,QAAAA,OAAO,CAACU,aAAR,CAAsB,KAAtB;AACA,eAAO,KAAP;AACD,OAJD,MAIO;AACL,eAAO,IAAP;AACD;AACF;AACF,GAvBM,CAAP;AAwBD,CAhCM","sourcesContent":["import * as sharify from \"sharify\"\nimport { metaphysics } from \"Utils/metaphysics\"\n\nexport const handleSubmit = (\n  url: string,\n  csrf: string,\n  redirectTo?: string\n) => async (values, formikBag) => {\n  try {\n    const data = await sendAuthData(url, { _csrf: csrf, ...values })\n    if (data.success) {\n      if (redirectTo) {\n        document.location.pathname = redirectTo\n      }\n    } else {\n      formikBag.setStatus(data)\n    }\n  } catch (err) {\n    formikBag.setStatus(err)\n  }\n}\n\nexport async function sendAuthData(\n  url: string,\n  values: { [key: string]: any; _csrf: string }\n) {\n  const res = await fetch(url, {\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      \"X-Requested-With\": \"XMLHttpRequest\",\n    },\n    method: \"POST\",\n    credentials: \"same-origin\",\n    body: JSON.stringify(values),\n  })\n  const data = await res.json()\n  return data\n}\n\nexport const checkEmail = ({ values, actions, shouldExist }) => {\n  const query = email => `\n    query {\n      user(email: \"${email}\") {\n        userAlreadyExists\n      }\n    }\n  `\n  return metaphysics(\n    { query: query(values.email) },\n    {\n      appToken: sharify.data.XAPP_TOKEN,\n    }\n  ).then(({ data }: any) => {\n    if (data.user.userAlreadyExists) {\n      if (shouldExist) {\n        return true\n      } else {\n        actions.setFieldError(\"email\", \"Email already exists.\")\n        actions.setSubmitting(false)\n        return false\n      }\n    } else {\n      if (shouldExist) {\n        actions.setFieldError(\"email\", \"Email does not exist.\")\n        actions.setSubmitting(false)\n        return false\n      } else {\n        return true\n      }\n    }\n  })\n}\n"]}]}