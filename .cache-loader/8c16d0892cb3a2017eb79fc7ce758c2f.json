{"remainingRequest":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/eve/development/reaction/src/Artsy/Relay/RootQueryRenderer.tsx","dependencies":[{"path":"/Users/eve/development/reaction/src/Artsy/Relay/RootQueryRenderer.tsx","mtime":1535727458000},{"path":"/Users/eve/development/reaction/.babelrc","mtime":1537112679000},{"path":"/Users/eve/development/reaction/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { ContextProvider, withContext } from \"../SystemContext\";\nimport React from \"react\";\nimport { QueryRenderer } from \"react-relay\";\n\nvar Renderer = function Renderer(_ref) {\n  var user = _ref.user,\n      relayEnvironment = _ref.relayEnvironment,\n      children = _ref.children,\n      props = _objectWithoutProperties(_ref, [\"user\", \"relayEnvironment\", \"children\"]);\n\n  return React.createElement(QueryRenderer, _extends({}, props, {\n    environment: relayEnvironment\n  }));\n};\n\nvar RendererWithContext = withContext(Renderer);\n/**\n * This component is, for now, mostly intended as an easy way to render stories, as it combines the Artsy\n * `ContextProvider` component and Relay‘s `QueryRenderer` component.\n *\n * We’ll need to see if it makes sense to use this as an entry point to render component trees from Reaction in Force.\n */\n\nexport var RootQueryRenderer = function RootQueryRenderer(_ref2) {\n  var user = _ref2.user,\n      children = _ref2.children,\n      props = _objectWithoutProperties(_ref2, [\"user\", \"children\"]);\n\n  return React.createElement(ContextProvider, {\n    user: user\n  }, React.createElement(RendererWithContext, props));\n};",{"version":3,"sources":["/Users/eve/development/reaction/src/Artsy/Relay/RootQueryRenderer.tsx"],"names":["ContextProvider","withContext","React","QueryRenderer","Renderer","user","relayEnvironment","children","props","RendererWithContext","RootQueryRenderer"],"mappings":";;;;;;AAAA,SAAuBA,eAAvB,EAAwCC,WAAxC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,aAAT,QAA8B,aAA9B;;AAgBA,IAAMC,QAA0B,GAAG,SAA7BA,QAA6B;AAAA,MACjCC,IADiC,QACjCA,IADiC;AAAA,MAEjCC,gBAFiC,QAEjCA,gBAFiC;AAAA,MAGjCC,QAHiC,QAGjCA,QAHiC;AAAA,MAI9BC,KAJ8B;;AAAA,SAK7B,oBAAC,aAAD,eAAmBA,KAAnB;AAA0B,IAAA,WAAW,EAAEF;AAAvC,KAL6B;AAAA,CAAnC;;AAOA,IAAMG,mBAAmB,GAAGR,WAAW,CAACG,QAAD,CAAvC;AAEA;;;;;;;AAMA,OAAO,IAAMM,iBAAmC,GAAG,SAAtCA,iBAAsC;AAAA,MACjDL,IADiD,SACjDA,IADiD;AAAA,MAEjDE,QAFiD,SAEjDA,QAFiD;AAAA,MAG9CC,KAH8C;;AAAA,SAKjD,oBAAC,eAAD;AAAiB,IAAA,IAAI,EAAEH;AAAvB,KACE,oBAAC,mBAAD,EAAyBG,KAAzB,CADF,CALiD;AAAA,CAA5C","sourcesContent":["import { ContextProps, ContextProvider, withContext } from \"Artsy/SystemContext\"\nimport React from \"react\"\nimport { GraphQLTaggedNode, ReadyState } from \"react-relay\"\nimport { QueryRenderer } from \"react-relay\"\nimport { CacheConfig, RerunParam, Variables } from \"relay-runtime\"\n\n/**\n * A copy of the upstream interface, minus the `environment` field.\n */\ninterface QueryRendererProps {\n  cacheConfig?: CacheConfig\n  query: GraphQLTaggedNode\n  variables: Variables\n  rerunParamExperimental?: RerunParam\n  render(readyState: ReadyState): React.ReactElement<any> | undefined | null\n}\n\ntype Props = ContextProps & QueryRendererProps\n\nconst Renderer: React.SFC<Props> = ({\n  user,\n  relayEnvironment,\n  children,\n  ...props\n}) => <QueryRenderer {...props} environment={relayEnvironment} />\n\nconst RendererWithContext = withContext(Renderer)\n\n/**\n * This component is, for now, mostly intended as an easy way to render stories, as it combines the Artsy\n * `ContextProvider` component and Relay‘s `QueryRenderer` component.\n *\n * We’ll need to see if it makes sense to use this as an entry point to render component trees from Reaction in Force.\n */\nexport const RootQueryRenderer: React.SFC<Props> = ({\n  user,\n  children,\n  ...props\n}) => (\n  <ContextProvider user={user}>\n    <RendererWithContext {...props} />\n  </ContextProvider>\n)\n"]}]}