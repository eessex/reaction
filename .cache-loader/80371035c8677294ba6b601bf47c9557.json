{"remainingRequest":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/eve/development/reaction/src/Artsy/Relay/createEnvironment.ts","dependencies":[{"path":"/Users/eve/development/reaction/src/Artsy/Relay/createEnvironment.ts","mtime":1537112679000},{"path":"/Users/eve/development/reaction/.babelrc","mtime":1537112679000},{"path":"/Users/eve/development/reaction/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport \"isomorphic-fetch\";\nimport \"regenerator-runtime/runtime\";\nimport { version as ReactionVersion } from \"../../../package.json\";\nimport RelayClientSSR from \"react-relay-network-modern-ssr/lib/client\";\nimport RelayServerSSR from \"react-relay-network-modern-ssr/lib/server\";\nimport { Environment, RecordSource, RelayNetwork, Store } from \"relay-runtime\";\nimport { data as sd } from \"sharify\";\nimport { NetworkError } from \"../../Utils/errors\";\nimport { cacheMiddleware, loggerMiddleware, RelayNetworkLayer, urlMiddleware } from \"react-relay-network-modern\";\nvar USER_AGENT = \"Reaction/\".concat(ReactionVersion);\nexport function createEnvironment() {\n  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _config$cache = config.cache,\n      cache = _config$cache === void 0 ? {} : _config$cache,\n      checkStatus = config.checkStatus,\n      user = config.user,\n      relayNetwork = config.relayNetwork;\n  var isServer = typeof window === \"undefined\";\n  var relaySSRMiddleware = isServer ? new RelayServerSSR() : new RelayClientSSR(cache);\n  relaySSRMiddleware.debug = false;\n  var headers = {\n    \"Content-Type\": \"application/json\",\n\n    /**\n     * Chrome still doesn’t support setting the `User-Agent` header, but as this\n     * isn’t critical information either we’re not going to work around it by\n     * adding e.g. a `X-User-Agent` header, for now.\n     *\n     * See https://bugs.chromium.org/p/chromium/issues/detail?id=571722\n     */\n    \"User-Agent\": USER_AGENT\n  };\n  var timeZone;\n\n  try {\n    timeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n    headers[\"X-TIMEZONE\"] = timeZone;\n  } catch (error) {\n    console.warn(\"Browser does not support i18n API, not setting TZ header.\");\n  }\n\n  var url = isServer ? process.env.METAPHYSICS_ENDPOINT : sd.METAPHYSICS_ENDPOINT;\n  var network = relayNetwork || new RelayNetworkLayer([urlMiddleware({\n    url: url,\n    headers: !!user ? _objectSpread({}, headers, {\n      \"X-USER-ID\": user && user.id,\n      \"X-ACCESS-TOKEN\": user && user.accessToken\n    }) : headers\n  }), relaySSRMiddleware.getMiddleware({\n    lookup: true\n  }), cacheMiddleware({\n    size: 100,\n    // max 100 requests\n    ttl: 900000 // 15 minutes\n\n  }), // TODO: This has been moved over from `Utils/metaphysics` but can eventually\n  // be replaced by error / retry middleware\n  function (next) {\n    return (\n      /*#__PURE__*/\n      function () {\n        var _ref = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee(req) {\n          var response, error;\n          return regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return next(req);\n\n                case 2:\n                  response = _context.sent;\n\n                  if (!(!checkStatus || response.status >= 200 && response.status < 300)) {\n                    _context.next = 7;\n                    break;\n                  }\n\n                  return _context.abrupt(\"return\", response);\n\n                case 7:\n                  error = new NetworkError(response.statusText);\n                  error.response = response;\n                  throw error;\n\n                case 10:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()\n    );\n  }, // TODO: Audit logging\n  !isServer && loggerMiddleware()]);\n  var source = new RecordSource();\n  var store = new Store(source);\n  var environment = new Environment({\n    network: network,\n    store: store\n  });\n  environment.relaySSRMiddleware = relaySSRMiddleware;\n  return environment;\n}",{"version":3,"sources":["/Users/eve/development/reaction/src/Artsy/Relay/createEnvironment.ts"],"names":["version","ReactionVersion","RelayClientSSR","RelayServerSSR","Environment","RecordSource","RelayNetwork","Store","data","sd","NetworkError","cacheMiddleware","loggerMiddleware","RelayNetworkLayer","urlMiddleware","USER_AGENT","createEnvironment","config","cache","checkStatus","user","relayNetwork","isServer","window","relaySSRMiddleware","debug","headers","timeZone","Intl","DateTimeFormat","resolvedOptions","error","console","warn","url","process","env","METAPHYSICS_ENDPOINT","network","id","accessToken","getMiddleware","lookup","size","ttl","next","req","response","status","statusText","source","store","environment"],"mappings":"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","sourcesContent":["import \"isomorphic-fetch\"\nimport \"regenerator-runtime/runtime\"\n\nimport { version as ReactionVersion } from \"package.json\"\nimport RelayClientSSR from \"react-relay-network-modern-ssr/lib/client\"\nimport RelayServerSSR from \"react-relay-network-modern-ssr/lib/server\"\nimport { Environment, RecordSource, RelayNetwork, Store } from \"relay-runtime\"\nimport { data as sd } from \"sharify\"\nimport { NetworkError } from \"Utils/errors\"\n\nimport {\n  cacheMiddleware,\n  loggerMiddleware,\n  RelayNetworkLayer,\n  urlMiddleware,\n} from \"react-relay-network-modern\"\n\nconst USER_AGENT = `Reaction/${ReactionVersion}`\n\ninterface Config {\n  cache?: object\n  user?: User\n  checkStatus?: boolean\n  relayNetwork?: RelayNetwork\n}\n\ninterface RelayEnvironment extends Environment {\n  relaySSRMiddleware: RelayClientSSR | RelayServerSSR\n}\n\nexport function createEnvironment(config: Config = {}) {\n  const { cache = {}, checkStatus, user, relayNetwork } = config\n  const isServer = typeof window === \"undefined\"\n  const relaySSRMiddleware = isServer\n    ? new RelayServerSSR()\n    : new RelayClientSSR(cache)\n\n  relaySSRMiddleware.debug = false\n\n  const headers = {\n    \"Content-Type\": \"application/json\",\n    /**\n     * Chrome still doesn’t support setting the `User-Agent` header, but as this\n     * isn’t critical information either we’re not going to work around it by\n     * adding e.g. a `X-User-Agent` header, for now.\n     *\n     * See https://bugs.chromium.org/p/chromium/issues/detail?id=571722\n     */\n    \"User-Agent\": USER_AGENT,\n  }\n\n  let timeZone\n  try {\n    timeZone = Intl.DateTimeFormat().resolvedOptions().timeZone\n    headers[\"X-TIMEZONE\"] = timeZone\n  } catch (error) {\n    console.warn(\"Browser does not support i18n API, not setting TZ header.\")\n  }\n\n  const url = isServer\n    ? process.env.METAPHYSICS_ENDPOINT\n    : sd.METAPHYSICS_ENDPOINT\n\n  const network =\n    relayNetwork ||\n    new RelayNetworkLayer([\n      urlMiddleware({\n        url,\n        headers: !!user\n          ? {\n              ...headers,\n              \"X-USER-ID\": user && user.id,\n              \"X-ACCESS-TOKEN\": user && user.accessToken,\n            }\n          : headers,\n      }),\n      relaySSRMiddleware.getMiddleware({\n        lookup: true,\n      }),\n      cacheMiddleware({\n        size: 100, // max 100 requests\n        ttl: 900000, // 15 minutes\n      }),\n\n      // TODO: This has been moved over from `Utils/metaphysics` but can eventually\n      // be replaced by error / retry middleware\n      next => async req => {\n        const response = await next(req)\n\n        if (!checkStatus || (response.status >= 200 && response.status < 300)) {\n          return response\n        } else {\n          const error = new NetworkError(response.statusText)\n          error.response = response\n          throw error\n        }\n      },\n      // TODO: Audit logging\n      !isServer && loggerMiddleware(),\n    ])\n\n  const source = new RecordSource()\n  const store = new Store(source)\n  const environment = new Environment({\n    network,\n    store,\n  }) as RelayEnvironment\n\n  environment.relaySSRMiddleware = relaySSRMiddleware\n\n  return environment\n}\n"]}]}