{"remainingRequest":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/eve/development/reaction/src/Styleguide/Pages/Artist/Routes/Overview/ArtworkFilterContainer.tsx","dependencies":[{"path":"/Users/eve/development/reaction/src/Styleguide/Pages/Artist/Routes/Overview/ArtworkFilterContainer.tsx","mtime":1530027734000},{"path":"/Users/eve/development/reaction/.babelrc","mtime":1529423546000},{"path":"/Users/eve/development/reaction/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js","mtime":1509489566000}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ArtworkFilterContainer = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactRelay = require(\"react-relay\");\n\nvar _styledComponents = _interopRequireDefault(require(\"styled-components\"));\n\nvar _Toggle = require(\"../../../../Components/Toggle\");\n\nvar _Box = require(\"../../../../Elements/Box\");\n\nvar _Checkbox = require(\"../../../../Elements/Checkbox\");\n\nvar _Flex = require(\"../../../../Elements/Flex\");\n\nvar _Select = require(\"../../../../Elements/Select\");\n\nvar _Radio = require(\"../../../../Elements/Radio\");\n\nvar _Spacer = require(\"../../../../Elements/Spacer\");\n\nvar _Responsive = require(\"../../../../Utils/Responsive\");\n\nvar _unstated = require(\"unstated\");\n\nvar _ArtworkFilterArtworks = _interopRequireDefault(require(\"./ArtworkFilterArtworks\"));\n\nvar _ArtworkFilterState = require(\"./ArtworkFilterState\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar ArtworkBrowser = (0, _styledComponents.default)(_Flex.Flex).withConfig({\n  displayName: \"ArtworkFilterContainer__ArtworkBrowser\",\n  componentId: \"ycuyul-0\"\n})([\"\"]);\nvar ArtworkGridArea = (0, _styledComponents.default)(_Flex.Flex).withConfig({\n  displayName: \"ArtworkFilterContainer__ArtworkGridArea\",\n  componentId: \"ycuyul-1\"\n})([\"\"]);\nvar Sidebar = _Box.Box;\n\nvar Filter =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Filter, _React$Component);\n\n  function Filter() {\n    _classCallCheck(this, Filter);\n\n    return _possibleConstructorReturn(this, (Filter.__proto__ || Object.getPrototypeOf(Filter)).apply(this, arguments));\n  }\n\n  _createClass(Filter, [{\n    key: \"renderCurrentlySelected\",\n    value: function renderCurrentlySelected(filter, state) {\n      if ((filter === \"institution\" || filter === \"gallery\") && state.partner_id) {\n        return state.partner_id;\n      }\n\n      if (filter === \"major_period\" && state.major_periods) {\n        return state.major_periods[0];\n      }\n\n      return state[filter];\n    }\n  }, {\n    key: \"renderFilters\",\n    value: function renderFilters(filters) {\n      var _this = this;\n\n      return this.props.artist.filtered_artworks.aggregations.map(function (aggregation) {\n        return React.createElement(\"div\", null, React.createElement(\"div\", null, aggregation.slice, \" -\", \" \", _this.renderCurrentlySelected(aggregation.slice.toLowerCase(), filters.state), _this.renderSection(aggregation, filters)), React.createElement(\"br\", null));\n      });\n    }\n  }, {\n    key: \"renderForSale\",\n    value: function renderForSale(filters) {\n      return React.createElement(\"div\", null, React.createElement(\"div\", null, \"Currently selected: \", filters.state.for_sale ? \"Only for sale\" : \"All\"), React.createElement(\"div\", {\n        onClick: function onClick() {\n          filters.setFilter(\"for_sale\", true);\n        }\n      }, \"For sale\"), React.createElement(\"div\", {\n        onClick: function onClick() {\n          filters.setFilter(\"for_sale\", null);\n        }\n      }, \"All\"), React.createElement(\"br\", null));\n    }\n  }, {\n    key: \"renderSidebar\",\n    value: function renderSidebar(filters) {\n      return React.createElement(\"div\", null, this.renderForSale(filters), this.renderFilters(filters));\n    }\n  }, {\n    key: \"renderSection\",\n    value: function renderSection(aggregation, filters) {\n      return aggregation.counts.slice(0, 10).map(function (count) {\n        return React.createElement(\"div\", {\n          onClick: function onClick() {\n            filters.setFilter(aggregation.slice.toLowerCase(), count.id);\n          }\n        }, React.createElement(\"span\", null, count.name), React.createElement(\"span\", null, \"(\", count.count, \")\"));\n      });\n    }\n  }, {\n    key: \"renderCategory\",\n    value: function renderCategory(filters, category, counts) {\n      return counts.slice(0, 10).map(function (count) {\n        return React.createElement(_Radio.Radio, {\n          selected: filters.state[category] === count.id,\n          value: count.id,\n          onSelect: function onSelect(v) {\n            return filters.setFilter(category, v);\n          }\n        }, count.name);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var aggregations = this.props.artist.filtered_artworks.aggregations;\n      var mediumAggregation = aggregations.find(function (agg) {\n        return agg.slice === \"MEDIUM\";\n      });\n      var galleryAggregation = aggregations.find(function (agg) {\n        return agg.slice === \"GALLERY\";\n      });\n      var institutionAggregation = aggregations.find(function (agg) {\n        return agg.slice === \"INSTITUTION\";\n      });\n      var periodAggregation = aggregations.find(function (agg) {\n        return agg.slice === \"MAJOR_PERIOD\";\n      });\n      return React.createElement(_unstated.Subscribe, {\n        to: [_ArtworkFilterState.FilterState]\n      }, function (filters) {\n        return React.createElement(_Responsive.Responsive, null, function (_ref) {\n          var xs = _ref.xs,\n              sm = _ref.sm,\n              md = _ref.md;\n          return React.createElement(ArtworkBrowser, null, !xs && React.createElement(Sidebar, {\n            width: \"30%\",\n            mr: 2\n          }, React.createElement(_Toggle.Toggle, {\n            label: \"Purchase type\",\n            expanded: true,\n            disabled: true\n          }, React.createElement(_Flex.Flex, {\n            justifyContent: \"space-between\"\n          }, React.createElement(_Checkbox.Checkbox, {\n            selected: filters.state.for_sale,\n            onSelect: function onSelect(value) {\n              return filters.setFilter(\"for_sale\", !value);\n            }\n          }, \"For sale\"))), React.createElement(_Toggle.Toggle, {\n            label: \"Medium\",\n            expanded: true\n          }, _this2.renderCategory(filters, \"medium\", mediumAggregation.counts)), React.createElement(_Toggle.Toggle, {\n            label: \"Gallery\"\n          }, _this2.renderCategory(filters, \"partner_id\", galleryAggregation.counts)), React.createElement(_Toggle.Toggle, {\n            label: \"Institution\"\n          }, _this2.renderCategory(filters, \"partner_id\", institutionAggregation.counts)), React.createElement(_Toggle.Toggle, {\n            label: \"Time period\"\n          }, _this2.renderCategory(filters, \"major_period\", periodAggregation.counts))), React.createElement(ArtworkGridArea, {\n            width: \"100%\",\n            flexDirection: \"column\",\n            alignItems: \"flex-end\"\n          }, React.createElement(_Flex.Flex, {\n            pb: 2,\n            justifyContent: \"flex-end\"\n          }, React.createElement(_Select.Select, {\n            options: [{\n              value: \"RECENTLY_UPDATED\",\n              text: \"Recently updated\"\n            }, {\n              value: \"RECENTLY_ADDED\",\n              text: \"Recently added\"\n            }]\n          })), React.createElement(_ArtworkFilterArtworks.default, {\n            artistID: _this2.props.artist.id,\n            columnCount: xs ? 2 : 3,\n            filtered_artworks: _this2.props.artist.filtered_artworks\n          }), React.createElement(_Spacer.Spacer, {\n            mb: 3\n          })));\n        });\n      });\n    }\n  }]);\n\n  return Filter;\n}(React.Component);\n\nvar ArtworkFilterContainer = (0, _reactRelay.createFragmentContainer)(Filter, {\n  artist: function artist() {\n    var node = require(\"../../../../../__generated__/ArtworkFilterContainer_artist.graphql\");\n\n    if (node.hash && node.hash !== \"cb40920b346c40cd7c27bd078659e573\") {\n      console.error(\"The definition of 'ArtworkFilterContainer_artist' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.\");\n    }\n\n    return require(\"../../../../../__generated__/ArtworkFilterContainer_artist.graphql\");\n  }\n});\nexports.ArtworkFilterContainer = ArtworkFilterContainer;",{"version":3,"sources":["src/Styleguide/Pages/Artist/Routes/Overview/ArtworkFilterContainer.tsx"],"names":["ArtworkBrowser","ArtworkGridArea","Sidebar","Filter","filter","state","partner_id","major_periods","filters","props","artist","filtered_artworks","aggregations","map","aggregation","slice","renderCurrentlySelected","toLowerCase","renderSection","for_sale","setFilter","renderForSale","renderFilters","counts","count","id","name","category","v","mediumAggregation","find","agg","galleryAggregation","institutionAggregation","periodAggregation","xs","sm","md","value","renderCategory","text","React","Component","ArtworkFilterContainer"],"mappings":"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","file":"/Users/eve/development/reaction/src/Styleguide/Pages/Artist/Routes/Overview/ArtworkFilterContainer.tsx","sourceRoot":"/Users/eve/development/reaction","sourcesContent":["import { ArtworkFilterContainer_artist } from \"__generated__/ArtworkFilterContainer_artist.graphql\"\n\nimport * as React from \"react\"\nimport { createFragmentContainer, graphql } from \"react-relay\"\nimport styled from \"styled-components\"\nimport { Toggle } from \"Styleguide/Components/Toggle\"\nimport { Box } from \"Styleguide/Elements/Box\"\nimport { Checkbox } from \"Styleguide/Elements/Checkbox\"\nimport { Flex } from \"Styleguide/Elements/Flex\"\nimport { Select } from \"Styleguide/Elements/Select\"\n\nimport { Radio } from \"Styleguide/Elements/Radio\"\nimport { Spacer } from \"Styleguide/Elements/Spacer\"\nimport { Responsive } from \"Styleguide/Utils/Responsive\"\nimport { Subscribe } from \"unstated\"\nimport ArtworksContent from \"./ArtworkFilterArtworks\"\nimport { FilterState } from \"./ArtworkFilterState\"\n\ninterface Props {\n  artist: ArtworkFilterContainer_artist\n}\n\nconst ArtworkBrowser = styled(Flex)``\nconst ArtworkGridArea = styled(Flex)``\nconst Sidebar = Box\n\nclass Filter extends React.Component<Props> {\n  renderCurrentlySelected(filter, state) {\n    if (\n      (filter === \"institution\" || filter === \"gallery\") &&\n      state.partner_id\n    ) {\n      return state.partner_id\n    }\n    if (filter === \"major_period\" && state.major_periods) {\n      return state.major_periods[0]\n    }\n    return state[filter]\n  }\n\n  renderFilters(filters) {\n    return this.props.artist.filtered_artworks.aggregations.map(aggregation => {\n      return (\n        <div>\n          <div>\n            {aggregation.slice} -{\" \"}\n            {this.renderCurrentlySelected(\n              aggregation.slice.toLowerCase(),\n              filters.state\n            )}\n            {this.renderSection(aggregation, filters)}\n          </div>\n          <br />\n        </div>\n      )\n    })\n  }\n\n  renderForSale(filters) {\n    return (\n      <div>\n        <div>\n          Currently selected: {filters.state.for_sale ? \"Only for sale\" : \"All\"}\n        </div>\n        <div\n          onClick={() => {\n            filters.setFilter(\"for_sale\", true)\n          }}\n        >\n          For sale\n        </div>\n        <div\n          onClick={() => {\n            filters.setFilter(\"for_sale\", null)\n          }}\n        >\n          All\n        </div>\n        <br />\n      </div>\n    )\n  }\n\n  renderSidebar(filters) {\n    return (\n      <div>\n        {this.renderForSale(filters)}\n        {this.renderFilters(filters)}\n      </div>\n    )\n  }\n\n  renderSection(aggregation, filters) {\n    return aggregation.counts.slice(0, 10).map(count => {\n      return (\n        <div\n          onClick={() => {\n            filters.setFilter(aggregation.slice.toLowerCase(), count.id)\n          }}\n        >\n          <span>{count.name}</span>\n          <span>({count.count})</span>\n        </div>\n      )\n    })\n  }\n\n  renderCategory(filters, category, counts) {\n    return counts.slice(0, 10).map(count => {\n      return (\n        <Radio\n          selected={filters.state[category] === count.id}\n          value={count.id}\n          onSelect={v => {\n            return (filters as any).setFilter(category, v)\n          }}\n        >\n          {count.name}\n        </Radio>\n      )\n    })\n  }\n\n  render() {\n    const { aggregations } = this.props.artist.filtered_artworks\n    const mediumAggregation = aggregations.find(agg => agg.slice === \"MEDIUM\")\n    const galleryAggregation = aggregations.find(agg => agg.slice === \"GALLERY\")\n    const institutionAggregation = aggregations.find(\n      agg => agg.slice === \"INSTITUTION\"\n    )\n    const periodAggregation = aggregations.find(\n      agg => agg.slice === \"MAJOR_PERIOD\"\n    )\n    return (\n      <Subscribe to={[FilterState]}>\n        {filters => {\n          return (\n            <Responsive>\n              {({ xs, sm, md }) => {\n                return (\n                  <ArtworkBrowser>\n                    {!xs && (\n                      <Sidebar width=\"30%\" mr={2}>\n                        <Toggle label=\"Purchase type\" expanded disabled>\n                          <Flex justifyContent=\"space-between\">\n                            <Checkbox\n                              selected={filters.state.for_sale}\n                              onSelect={value => {\n                                return (filters as any).setFilter(\n                                  \"for_sale\",\n                                  !value\n                                )\n                              }}\n                            >\n                              For sale\n                            </Checkbox>\n                          </Flex>\n                        </Toggle>\n                        <Toggle label=\"Medium\" expanded>\n                          {this.renderCategory(\n                            filters,\n                            \"medium\",\n                            mediumAggregation.counts\n                          )}\n                        </Toggle>\n                        <Toggle label=\"Gallery\">\n                          {this.renderCategory(\n                            filters,\n                            \"partner_id\",\n                            galleryAggregation.counts\n                          )}\n                        </Toggle>\n\n                        <Toggle label=\"Institution\">\n                          {this.renderCategory(\n                            filters,\n                            \"partner_id\",\n                            institutionAggregation.counts\n                          )}\n                        </Toggle>\n                        <Toggle label=\"Time period\">\n                          {this.renderCategory(\n                            filters,\n                            \"major_period\",\n                            periodAggregation.counts\n                          )}\n                        </Toggle>\n                      </Sidebar>\n                    )}\n\n                    <ArtworkGridArea\n                      width={\"100%\"}\n                      flexDirection=\"column\"\n                      alignItems=\"flex-end\"\n                    >\n                      <Flex pb={2} justifyContent=\"flex-end\">\n                        {/* TODO: Implement sorting */}\n                        <Select\n                          options={[\n                            {\n                              value: \"RECENTLY_UPDATED\",\n                              text: \"Recently updated\",\n                            },\n                            { value: \"RECENTLY_ADDED\", text: \"Recently added\" },\n                          ]}\n                        />\n                      </Flex>\n\n                      <ArtworksContent\n                        artistID={this.props.artist.id}\n                        columnCount={xs ? 2 : 3}\n                        filtered_artworks={\n                          this.props.artist.filtered_artworks as any\n                        }\n                      />\n                      <Spacer mb={3} />\n                    </ArtworkGridArea>\n                  </ArtworkBrowser>\n                )\n              }}\n            </Responsive>\n          )\n        }}\n      </Subscribe>\n    )\n  }\n}\n\nexport const ArtworkFilterContainer = createFragmentContainer(Filter, {\n  artist: graphql`\n    fragment ArtworkFilterContainer_artist on Artist\n      @argumentDefinitions(\n        medium: { type: \"String\", defaultValue: \"*\" }\n        major_periods: { type: \"[String]\" }\n        partner_id: { type: \"ID\" }\n        for_sale: { type: \"Boolean\" }\n        aggregations: {\n          type: \"[ArtworkAggregation]\"\n          defaultValue: [MEDIUM, TOTAL, GALLERY, INSTITUTION, MAJOR_PERIOD]\n        }\n      ) {\n      id\n      filtered_artworks(\n        aggregations: $aggregations\n        medium: $medium\n        major_periods: $major_periods\n        partner_id: $partner_id\n        for_sale: $for_sale\n        size: 0\n      ) {\n        aggregations {\n          slice\n          counts {\n            name\n            count\n            id\n          }\n        }\n        ...ArtworkFilterArtworks_filtered_artworks\n      }\n    }\n  `,\n})\n"]}]}