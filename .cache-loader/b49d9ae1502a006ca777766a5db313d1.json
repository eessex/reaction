{"remainingRequest":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/eve/development/reaction/src/Components/Publishing/Video/Player/VideoPlayer.tsx","dependencies":[{"path":"/Users/eve/development/reaction/src/Components/Publishing/Video/Player/VideoPlayer.tsx","mtime":1535727457000},{"path":"/Users/eve/development/reaction/.babelrc","mtime":1537112679000},{"path":"/Users/eve/development/reaction/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _memoize from \"lodash/memoize\";\n\nvar _dec, _dec2, _class, _class2;\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  width: 100%;\\n  height: 100%;\\n  position: relative;\\n  background-color: black;\\n  video {\\n    object-fit: contain;\\n    width: 100%;\\n    height: 100%;\\n  }\\n  \", \" {\\n    opacity: \", \";\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object['ke' + 'ys'](descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object['define' + 'Property'](target, property, desc); desc = null; } return desc; }\n\nimport React, { Component } from \"react\";\nimport track from \"react-tracking\"; // @ts-ignore\n\nimport styled from \"styled-components\";\nimport { addFSEventListener, exitFullscreen, fullscreenEnabled, isFullscreen, removeFSEventListener, requestFullscreen } from \"./FullscreenHelpers\";\nimport { VideoControls, VideoControlsContainer } from \"./VideoControls\";\nexport var VideoPlayer = (_dec = track(), _dec2 = track(function (props) {\n  return {\n    action: \"Click\",\n    label: \"Fullscreen video\"\n  };\n}), _dec(_class = (_class2 =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(VideoPlayer, _Component);\n\n  function VideoPlayer(props) {\n    var _this;\n\n    _classCallCheck(this, VideoPlayer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(VideoPlayer).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"video\", void 0);\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"videoPlayer\", void 0);\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"timer\", void 0);\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"state\", {\n      isMuted: false,\n      isPlaying: _this.props.forcePlay,\n      currentTime: 0,\n      duration: 0,\n      idleTime: 0,\n      showControls: true\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"resetTimer\", function () {\n      _this.setState({\n        showControls: true,\n        idleTime: 0\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"incrementTimer\", function () {\n      var newIdleTime = _this.state.idleTime + 1;\n\n      _this.setState({\n        idleTime: newIdleTime,\n        showControls: newIdleTime > 3 ? false : true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"setDuration\", function (e) {\n      _this.setState({\n        duration: e.target.duration\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"updateTime\", function (e) {\n      _this.trackProgress();\n\n      _this.setState({\n        currentTime: e.target.currentTime\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"togglePlay\", function () {\n      if (_this.state.isPlaying) {\n        _this.video.pause();\n      } else {\n        _this.video.play();\n      }\n\n      if (_this.props.notifyPlayToggle) {\n        _this.props.notifyPlayToggle(!_this.state.isPlaying);\n      }\n\n      _this.setState({\n        isPlaying: !_this.state.isPlaying\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"toggleMute\", function () {\n      _this.setState({\n        isMuted: !_this.state.isMuted\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"forcePlay\", function () {\n      _this.video.play();\n\n      _this.setState({\n        isPlaying: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"seekTo\", function (value) {\n      _this.video.currentTime = value;\n\n      _this.setState({\n        currentTime: value\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"pause\", function () {\n      _this.video.pause();\n\n      _this.setState({\n        isPlaying: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"play\", function () {\n      _this.video.play();\n\n      _this.setState({\n        isPlaying: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"trackProgress\", function () {\n      var secondsComplete = Math.floor(_this.video.currentTime);\n      var percentComplete = Math.floor(_this.video.currentTime / _this.video.duration * 100);\n      var percentCompleteInterval = Math.floor(percentComplete / 25) * 25; // Track 25% duration intervals\n\n      if (percentCompleteInterval > 0) {\n        _this.trackDuration(percentCompleteInterval);\n      } // Track 3 & 10 seconds\n\n\n      if (secondsComplete === 3 || secondsComplete === 10) {\n        _this.trackSeconds(secondsComplete);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"trackDuration\", _memoize(function (percentComplete) {\n      _this.props.tracking.trackEvent({\n        action: \"Video duration\",\n        label: \"Video duration\",\n        percent_complete: percentComplete\n      });\n    }));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"trackSeconds\", _memoize(function (secondsComplete) {\n      _this.props.tracking.trackEvent({\n        action: \"Video seconds\",\n        label: \"Video seconds\",\n        seconds_complete: secondsComplete\n      });\n    }));\n\n    _this.toggleFullscreen = _this.toggleFullscreen.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(VideoPlayer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.video) {\n        if (fullscreenEnabled()) {\n          addFSEventListener(this.video);\n        }\n\n        this.video.addEventListener(\"timeupdate\", this.updateTime);\n        this.video.addEventListener(\"loadedmetadata\", this.setDuration);\n        document.addEventListener(\"mousemove\", this.resetTimer);\n        document.addEventListener(\"keypress\", this.resetTimer);\n        document.addEventListener(\"touchstart\", this.resetTimer);\n        this.timer = setInterval(this.incrementTimer, 1000);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (fullscreenEnabled()) {\n        removeFSEventListener(this.video);\n      }\n\n      this.video.removeEventListener(\"timeupdate\", this.updateTime);\n      document.removeEventListener(\"mousemove\", this.resetTimer);\n      document.removeEventListener(\"keypress\", this.resetTimer);\n      document.removeEventListener(\"touchstart\", this.resetTimer);\n      clearInterval(this.timer);\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.forcePlay) {\n        this.forcePlay();\n      }\n    }\n  }, {\n    key: \"toggleFullscreen\",\n    value: function toggleFullscreen() {\n      if (fullscreenEnabled()) {\n        if (isFullscreen()) {\n          exitFullscreen();\n        } else {\n          requestFullscreen(this.videoPlayer);\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          url = _this$props.url,\n          title = _this$props.title;\n      return React.createElement(VideoContainer, {\n        innerRef: function innerRef(container) {\n          return _this2.videoPlayer = container;\n        },\n        showControls: this.state.showControls\n      }, React.createElement(\"video\", {\n        playsInline: true,\n        src: url,\n        ref: function ref(video) {\n          return _this2.video = video;\n        },\n        muted: this.state.isMuted\n      }), React.createElement(VideoControlsParent, null, React.createElement(VideoControls, {\n        title: title,\n        duration: this.state.duration,\n        currentTime: this.state.currentTime,\n        toggleFullscreen: this.toggleFullscreen,\n        toggleMute: this.toggleMute,\n        togglePlay: this.togglePlay,\n        pause: this.pause,\n        play: this.play,\n        seekTo: this.seekTo,\n        isMuted: this.state.isMuted,\n        isPlaying: this.state.isPlaying\n      })));\n    }\n  }]);\n\n  return VideoPlayer;\n}(Component), (_applyDecoratedDescriptor(_class2.prototype, \"toggleFullscreen\", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, \"toggleFullscreen\"), _class2.prototype)), _class2)) || _class);\nvar VideoControlsParent = styled.div.withConfig({\n  displayName: \"VideoPlayer__VideoControlsParent\",\n  componentId: \"s1j2on8x-0\"\n})([\"position:absolute;bottom:0;left:0;right:0;margin:0 auto;max-width:1200px;width:100%;\"]);\nvar Div = styled.div;\nexport var VideoContainer = Div(_templateObject(), VideoControlsContainer, function (props) {\n  return props.showControls ? \"1\" : \"0\";\n});",{"version":3,"sources":["/Users/eve/development/reaction/src/Components/Publishing/Video/Player/VideoPlayer.tsx"],"names":["React","Component","track","styled","addFSEventListener","exitFullscreen","fullscreenEnabled","isFullscreen","removeFSEventListener","requestFullscreen","VideoControls","VideoControlsContainer","VideoPlayer","props","action","label","isMuted","isPlaying","forcePlay","currentTime","duration","idleTime","showControls","setState","newIdleTime","state","e","target","trackProgress","video","pause","play","notifyPlayToggle","value","secondsComplete","Math","floor","percentComplete","percentCompleteInterval","trackDuration","trackSeconds","tracking","trackEvent","percent_complete","seconds_complete","toggleFullscreen","bind","addEventListener","updateTime","setDuration","document","resetTimer","timer","setInterval","incrementTimer","removeEventListener","clearInterval","nextProps","videoPlayer","url","title","container","toggleMute","togglePlay","seekTo","VideoControlsParent","div","Div","VideoContainer"],"mappings":"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","sourcesContent":["import { memoize } from \"lodash\"\nimport React, { Component } from \"react\"\nimport track from \"react-tracking\"\n// @ts-ignore\nimport styled, { StyledComponentClass, StyledFunction } from \"styled-components\"\nimport {\n  addFSEventListener,\n  exitFullscreen,\n  fullscreenEnabled,\n  isFullscreen,\n  removeFSEventListener,\n  requestFullscreen,\n} from \"./FullscreenHelpers\"\nimport { VideoControls, VideoControlsContainer } from \"./VideoControls\"\n\nexport interface VideoPlayerProps extends React.HTMLProps<HTMLDivElement> {\n  url: string\n  title?: string\n  notifyPlayToggle?: (e) => void\n  forcePlay?: boolean\n  tracking?: any\n}\n\nexport interface VideoPlayerState {\n  isMuted: boolean\n  isPlaying: boolean\n  currentTime: number\n  duration: number\n  idleTime: number\n  showControls: boolean\n}\n\nexport interface DivProps {\n  showControls: boolean\n}\n\n@track()\nexport class VideoPlayer extends Component<VideoPlayerProps, VideoPlayerState> {\n  public video: HTMLVideoElement\n  public videoPlayer: HTMLDivElement\n  public timer\n\n  state = {\n    isMuted: false,\n    isPlaying: this.props.forcePlay,\n    currentTime: 0,\n    duration: 0,\n    idleTime: 0,\n    showControls: true,\n  }\n\n  constructor(props) {\n    super(props)\n    this.toggleFullscreen = this.toggleFullscreen.bind(this)\n  }\n\n  componentDidMount() {\n    if (this.video) {\n      if (fullscreenEnabled()) {\n        addFSEventListener(this.video)\n      }\n\n      this.video.addEventListener(\"timeupdate\", this.updateTime)\n      this.video.addEventListener(\"loadedmetadata\", this.setDuration)\n\n      document.addEventListener(\"mousemove\", this.resetTimer)\n      document.addEventListener(\"keypress\", this.resetTimer)\n      document.addEventListener(\"touchstart\", this.resetTimer)\n      this.timer = setInterval(this.incrementTimer, 1000)\n    }\n  }\n\n  componentWillUnmount() {\n    if (fullscreenEnabled()) {\n      removeFSEventListener(this.video)\n    }\n\n    this.video.removeEventListener(\"timeupdate\", this.updateTime)\n\n    document.removeEventListener(\"mousemove\", this.resetTimer)\n    document.removeEventListener(\"keypress\", this.resetTimer)\n    document.removeEventListener(\"touchstart\", this.resetTimer)\n    clearInterval(this.timer)\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.forcePlay) {\n      this.forcePlay()\n    }\n  }\n\n  resetTimer = () => {\n    this.setState({\n      showControls: true,\n      idleTime: 0,\n    })\n  }\n\n  incrementTimer = () => {\n    const newIdleTime = this.state.idleTime + 1\n\n    this.setState({\n      idleTime: newIdleTime,\n      showControls: newIdleTime > 3 ? false : true,\n    })\n  }\n\n  setDuration = e => {\n    this.setState({\n      duration: e.target.duration,\n    })\n  }\n\n  updateTime = e => {\n    this.trackProgress()\n    this.setState({\n      currentTime: e.target.currentTime,\n    })\n  }\n\n  togglePlay = () => {\n    if (this.state.isPlaying) {\n      this.video.pause()\n    } else {\n      this.video.play()\n    }\n\n    if (this.props.notifyPlayToggle) {\n      this.props.notifyPlayToggle(!this.state.isPlaying)\n    }\n\n    this.setState({\n      isPlaying: !this.state.isPlaying,\n    })\n  }\n\n  toggleMute = () => {\n    this.setState({\n      isMuted: !this.state.isMuted,\n    })\n  }\n\n  forcePlay = () => {\n    this.video.play()\n    this.setState({\n      isPlaying: true,\n    })\n  }\n\n  @track(props => {\n    return {\n      action: \"Click\",\n      label: \"Fullscreen video\",\n    }\n  })\n  toggleFullscreen() {\n    if (fullscreenEnabled()) {\n      if (isFullscreen()) {\n        exitFullscreen()\n      } else {\n        requestFullscreen(this.videoPlayer)\n      }\n    }\n  }\n\n  seekTo = value => {\n    this.video.currentTime = value\n    this.setState({\n      currentTime: value,\n    })\n  }\n\n  pause = () => {\n    this.video.pause()\n    this.setState({\n      isPlaying: false,\n    })\n  }\n\n  play = () => {\n    this.video.play()\n    this.setState({\n      isPlaying: true,\n    })\n  }\n\n  trackProgress = () => {\n    const secondsComplete = Math.floor(this.video.currentTime)\n    const percentComplete = Math.floor(\n      (this.video.currentTime / this.video.duration) * 100\n    )\n    const percentCompleteInterval = Math.floor(percentComplete / 25) * 25\n\n    // Track 25% duration intervals\n    if (percentCompleteInterval > 0) {\n      this.trackDuration(percentCompleteInterval)\n    }\n\n    // Track 3 & 10 seconds\n    if (secondsComplete === 3 || secondsComplete === 10) {\n      this.trackSeconds(secondsComplete)\n    }\n  }\n\n  trackDuration = memoize(percentComplete => {\n    this.props.tracking.trackEvent({\n      action: \"Video duration\",\n      label: \"Video duration\",\n      percent_complete: percentComplete,\n    })\n  })\n\n  trackSeconds = memoize(secondsComplete => {\n    this.props.tracking.trackEvent({\n      action: \"Video seconds\",\n      label: \"Video seconds\",\n      seconds_complete: secondsComplete,\n    })\n  })\n\n  render() {\n    const { url, title } = this.props\n\n    return (\n      <VideoContainer\n        innerRef={container => (this.videoPlayer = container)}\n        showControls={this.state.showControls}\n      >\n        <video\n          playsInline\n          src={url}\n          ref={video => (this.video = video)}\n          muted={this.state.isMuted}\n        />\n        <VideoControlsParent>\n          <VideoControls\n            title={title}\n            duration={this.state.duration}\n            currentTime={this.state.currentTime}\n            toggleFullscreen={this.toggleFullscreen}\n            toggleMute={this.toggleMute}\n            togglePlay={this.togglePlay}\n            pause={this.pause}\n            play={this.play}\n            seekTo={this.seekTo}\n            isMuted={this.state.isMuted}\n            isPlaying={this.state.isPlaying}\n          />\n        </VideoControlsParent>\n      </VideoContainer>\n    )\n  }\n}\n\nconst VideoControlsParent = styled.div`\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n  max-width: 1200px;\n  width: 100%;\n`\n\nconst Div: StyledFunction<DivProps & React.HTMLProps<HTMLDivElement>> =\n  styled.div\nexport const VideoContainer = Div`\n  width: 100%;\n  height: 100%;\n  position: relative;\n  background-color: black;\n  video {\n    object-fit: contain;\n    width: 100%;\n    height: 100%;\n  }\n  ${VideoControlsContainer} {\n    opacity: ${props => (props.showControls ? \"1\" : \"0\")};\n  }\n`\n"]}]}