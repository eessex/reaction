{"remainingRequest":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js??ref--5-1!/Users/eve/development/reaction/src/Components/Artwork/Save.tsx","dependencies":[{"path":"/Users/eve/development/reaction/src/Components/Artwork/Save.tsx","mtime":1526492648000},{"path":"/Users/eve/development/reaction/.babelrc","mtime":1527877289000},{"path":"/Users/eve/development/reaction/node_modules/cache-loader/dist/cjs.js","mtime":1510929699000},{"path":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js","mtime":1509489566000}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.SaveButton = exports.SaveButtonContainer = void 0;\n\nvar _lodash = require(\"lodash\");\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactRelay = require(\"react-relay\");\n\nvar _Icon = _interopRequireDefault(require(\"../Icon\"));\n\nvar _styledComponents = _interopRequireDefault(require(\"styled-components\"));\n\nvar _Colors = _interopRequireDefault(require(\"../../Assets/Colors\"));\n\nvar Artsy = _interopRequireWildcard(require(\"../../Components/Artsy\"));\n\nvar _graphql, _class, _temp2;\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nvar SIZE = 40;\nvar SaveButtonContainer = Artsy.ContextConsumer((_temp2 = _class =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(_class, _React$Component);\n\n  function _class() {\n    var _ref;\n\n    var _temp, _this;\n\n    _classCallCheck(this, _class);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _possibleConstructorReturn(_this, (_temp = _this = _possibleConstructorReturn(this, (_ref = _class.__proto__ || Object.getPrototypeOf(_class)).call.apply(_ref, [this].concat(args))), Object.defineProperty(_assertThisInitialized(_this), \"state\", {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: {\n        is_saved: null\n      }\n    }), _temp));\n  }\n\n  _createClass(_class, [{\n    key: \"handleSave\",\n    value: function handleSave() {\n      var _this2 = this;\n\n      var _props = this.props,\n          currentUser = _props.currentUser,\n          artwork = _props.artwork,\n          relay = _props.relay,\n          relayEnvironment = _props.relayEnvironment,\n          useRelay = _props.useRelay;\n      var environment = relay && relay.environment || relayEnvironment;\n\n      if (environment && currentUser && currentUser.id) {\n        // Optimistic update for environments that don't have typical access to\n        // Relay, e.g., where new ArtworkGrids are used in old code via Stitch. Note\n        // that the prop `useRelay` refers to outer HOC wrappers. In cases where\n        // Save UI components are used it is possible to piggyback on ContextProvider\n        // environment for mutations, but since the component exists outside of a\n        // Relay HOC props are not updated when successful mutations occur -- hence\n        // the need for setState.\n        //\n        // TODO:\n        // Refactor out `useRelay` prop when Force artwork Grids have been moved\n        // completely over to Relay\n        if (!useRelay) {\n          this.setState({\n            is_saved: !this.isSaved\n          });\n        }\n\n        (0, _reactRelay.commitMutation)(environment, {\n          mutation: _graphql || (_graphql = function _graphql() {\n            var node = require(\"../../__generated__/SaveArtworkMutation.graphql\");\n\n            if (node.hash && node.hash !== \"b7e3f17c96d3173b62d2ece993864fe1\") {\n              console.error(\"The definition of 'SaveArtworkMutation' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.\");\n            }\n\n            return require(\"../../__generated__/SaveArtworkMutation.graphql\");\n          }),\n          variables: {\n            input: {\n              artwork_id: artwork.id,\n              remove: this.isSaved\n            }\n          },\n          optimisticResponse: {\n            saveArtwork: {\n              artwork: {\n                __id: artwork.__id,\n                is_saved: !this.isSaved\n              }\n            }\n          },\n          onError: function onError(error) {\n            // Revert optimistic update\n            if (!useRelay) {\n              _this2.setState({\n                is_saved: _this2.isSaved\n              });\n            }\n\n            console.error(\"Artwork/Save Error saving artwork: \", error);\n          },\n          onCompleted: function onCompleted(_ref2) {\n            var saveArtwork = _ref2.saveArtwork;\n\n            if (!useRelay) {\n              _this2.setState({\n                is_saved: saveArtwork.artwork.is_saved\n              });\n            }\n          }\n        });\n      } else {\n        window.location.href = \"/login\";\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var style = this.props.style;\n      return _react.default.createElement(\"div\", {\n        className: this.props.className,\n        style: style,\n        onClick: function onClick() {\n          return _this3.handleSave();\n        },\n        \"data-saved\": this.isSaved\n      }, _react.default.createElement(_Icon.default, {\n        name: \"heart\",\n        height: SIZE,\n        color: \"white\",\n        style: {\n          verticalAlign: \"middle\"\n        }\n      }));\n    }\n  }, {\n    key: \"isSaved\",\n    get: function get() {\n      var isSaved = (0, _lodash.isNull)(this.state.is_saved) ? this.props.artwork.is_saved : this.state.is_saved;\n      return isSaved;\n    }\n  }]);\n\n  return _class;\n}(_react.default.Component), Object.defineProperty(_class, \"defaultProps\", {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  value: {\n    useRelay: true\n  }\n}), _temp2));\nexports.SaveButtonContainer = SaveButtonContainer;\nvar SaveButton =\n/*#__PURE__*/\n(0, _styledComponents.default)(SaveButtonContainer).withConfig({\n  displayName: \"Save__SaveButton\",\n  componentId: \"s12eu8y0-0\"\n})([\"display:block;width:\", \"px;height:\", \"px;text-align:center;cursor:pointer;color:white;background-color:\", \";background-color:rgba(0,0,0,0.4);border-radius:50%;font-size:16px;line-height:\", \"px;&:hover{background-color:black;}&[data-saved=\\\"true\\\"]{background-color:\", \";&:hover{background-color:\", \";}}\"], SIZE, SIZE, _Colors.default.gray, SIZE, _Colors.default.purpleRegular, _Colors.default.redBold);\nexports.SaveButton = SaveButton;\n\nvar _default = (0, _reactRelay.createFragmentContainer)(Artsy.ContextConsumer(SaveButton), {\n  artwork: function artwork() {\n    var node = require(\"../../__generated__/Save_artwork.graphql\");\n\n    if (node.hash && node.hash !== \"0faa5a4a653d49f5187e7c576b95cba7\") {\n      console.error(\"The definition of 'Save_artwork' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.\");\n    }\n\n    return require(\"../../__generated__/Save_artwork.graphql\");\n  }\n});\n\nexports.default = _default;",{"version":3,"sources":["src/Components/Artwork/Save.tsx"],"names":["SIZE","SaveButtonContainer","Artsy","ContextConsumer","is_saved","props","currentUser","artwork","relay","relayEnvironment","useRelay","environment","id","setState","isSaved","mutation","variables","input","artwork_id","remove","optimisticResponse","saveArtwork","__id","onError","console","error","onCompleted","window","location","href","style","className","handleSave","verticalAlign","state","Component","SaveButton","gray","purpleRegular","redBold"],"mappings":"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","file":"/Users/eve/development/reaction/src/Components/Artwork/Save.tsx","sourceRoot":"/Users/eve/development/reaction","sourcesContent":["import { isNull } from \"lodash\"\nimport React from \"react\"\nimport * as RelayRuntimeTypes from \"relay-runtime\"\nimport {\n  commitMutation,\n  createFragmentContainer,\n  graphql,\n  RelayProp,\n} from \"react-relay\"\n\nimport Icon from \"../Icon\"\nimport styled from \"styled-components\"\nimport colors from \"../../Assets/Colors\"\nimport * as Artsy from \"../../Components/Artsy\"\n\nconst SIZE = 40\n\nexport interface Props\n  extends RelayProps,\n    Artsy.ContextProps,\n    React.HTMLProps<React.ComponentType> {\n  style?: any\n  relay?: RelayProp\n  relayEnvironment?: RelayRuntimeTypes.Environment\n  useRelay?: boolean\n}\n\n// TODO: This will be refactored out once Artworks / Grids are full Relay in Force\n// and intermediate local state becomes unnecessary\ninterface State {\n  is_saved: boolean\n}\n\nexport const SaveButtonContainer = Artsy.ContextConsumer(\n  class extends React.Component<Props, State> {\n    static defaultProps = {\n      useRelay: true,\n    }\n\n    state = {\n      is_saved: null,\n    }\n\n    get isSaved() {\n      const isSaved = isNull(this.state.is_saved)\n        ? this.props.artwork.is_saved\n        : this.state.is_saved\n\n      return isSaved\n    }\n\n    handleSave() {\n      const {\n        currentUser,\n        artwork,\n        relay,\n        relayEnvironment,\n        useRelay,\n      } = this.props\n      const environment = (relay && relay.environment) || relayEnvironment\n\n      if (environment && currentUser && currentUser.id) {\n        // Optimistic update for environments that don't have typical access to\n        // Relay, e.g., where new ArtworkGrids are used in old code via Stitch. Note\n        // that the prop `useRelay` refers to outer HOC wrappers. In cases where\n        // Save UI components are used it is possible to piggyback on ContextProvider\n        // environment for mutations, but since the component exists outside of a\n        // Relay HOC props are not updated when successful mutations occur -- hence\n        // the need for setState.\n        //\n        // TODO:\n        // Refactor out `useRelay` prop when Force artwork Grids have been moved\n        // completely over to Relay\n\n        if (!useRelay) {\n          this.setState({\n            is_saved: !this.isSaved,\n          })\n        }\n\n        commitMutation(environment, {\n          mutation: graphql`\n            mutation SaveArtworkMutation($input: SaveArtworkInput!) {\n              saveArtwork(input: $input) {\n                artwork {\n                  id\n                  is_saved\n                }\n              }\n            }\n          `,\n          variables: {\n            input: {\n              artwork_id: artwork.id,\n              remove: this.isSaved,\n            },\n          },\n          optimisticResponse: {\n            saveArtwork: {\n              artwork: {\n                __id: artwork.__id,\n                is_saved: !this.isSaved,\n              },\n            },\n          },\n          onError: error => {\n            // Revert optimistic update\n            if (!useRelay) {\n              this.setState({\n                is_saved: this.isSaved,\n              })\n            }\n\n            console.error(\"Artwork/Save Error saving artwork: \", error)\n          },\n          onCompleted: ({ saveArtwork }) => {\n            if (!useRelay) {\n              this.setState({\n                is_saved: saveArtwork.artwork.is_saved,\n              })\n            }\n          },\n        })\n      } else {\n        window.location.href = \"/login\"\n      }\n    }\n\n    render() {\n      const { style } = this.props\n\n      return (\n        <div\n          className={this.props.className}\n          style={style}\n          onClick={() => this.handleSave()}\n          data-saved={this.isSaved}\n        >\n          <Icon\n            name=\"heart\"\n            height={SIZE}\n            color=\"white\"\n            style={{ verticalAlign: \"middle\" }}\n          />\n        </div>\n      )\n    }\n  }\n)\n\nexport const SaveButton = styled(SaveButtonContainer)`\n  display: block;\n  width: ${SIZE}px;\n  height: ${SIZE}px;\n  text-align: center;\n  cursor: pointer;\n  color: white;\n  background-color: ${colors.gray};\n  background-color: rgba(0, 0, 0, 0.4);\n  border-radius: 50%;\n  font-size: 16px;\n  line-height: ${SIZE}px;\n  &:hover {\n    background-color: black;\n  }\n  &[data-saved=\"true\"] {\n    background-color: ${colors.purpleRegular};\n    &:hover {\n      background-color: ${colors.redBold};\n    }\n  }\n`\n\nexport default createFragmentContainer(\n  Artsy.ContextConsumer(SaveButton),\n  graphql`\n    fragment Save_artwork on Artwork {\n      __id\n      id\n      is_saved\n    }\n  `\n)\n\ninterface RelayProps {\n  artwork: {\n    __id: string\n    id: string\n    is_saved: boolean | null\n  }\n}\n"]}]}