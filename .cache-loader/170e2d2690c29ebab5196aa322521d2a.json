{"remainingRequest":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/eve/development/reaction/src/Components/ArtworkFilter/Dropdown.tsx","dependencies":[{"path":"/Users/eve/development/reaction/src/Components/ArtworkFilter/Dropdown.tsx","mtime":1535727457000},{"path":"/Users/eve/development/reaction/.babelrc","mtime":1537112679000},{"path":"/Users/eve/development/reaction/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _find from \"lodash/find\";\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport numeral from \"numeral\";\nimport React from \"react\";\nimport { createFragmentContainer, graphql } from \"react-relay\";\nimport styled from \"styled-components\";\nimport colors from \"../../Assets/Colors\";\nimport { avantgarde, garamond } from \"../../Assets/Fonts\";\nimport Icon from \"../Icon\";\nimport { labelMap } from \"./ParamMap\";\nexport var Dropdown =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Dropdown, _React$Component);\n\n  function Dropdown(props) {\n    var _this;\n\n    _classCallCheck(this, Dropdown);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Dropdown).call(this, props));\n    _this.state = {\n      isHovered: false,\n      selected: props.selected || {}\n    };\n    return _this;\n  }\n\n  _createClass(Dropdown, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      this.setState({\n        selected: nextProps.selected\n      });\n    }\n  }, {\n    key: \"toggleHover\",\n    value: function toggleHover(value) {\n      this.setState({\n        isHovered: value\n      });\n    }\n  }, {\n    key: \"onSelect\",\n    value: function onSelect(slice, value) {\n      this.setState({\n        selected: value,\n        isHovered: false\n      });\n      this.props.onSelected(slice, value);\n    }\n  }, {\n    key: \"getSelectedName\",\n    value: function getSelectedName(id) {\n      var selectedCount = _find(this.props.aggregation.counts, function (count) {\n        return count.id === id;\n      });\n\n      return selectedCount ? selectedCount.name : null;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var slice = this.props.aggregation.slice;\n      var labels = labelMap[this.props.aggregation.slice.toLowerCase()];\n      var selectedName = this.getSelectedName(this.state.selected);\n      var navItems = this.props.aggregation.counts.map(function (count) {\n        return React.createElement(NavItem, {\n          key: count.id,\n          onClick: function onClick() {\n            return _this2.onSelect(slice, count.id);\n          }\n        }, React.createElement(\"span\", null, count.name), React.createElement(NavItemCount, null, \"\\xA0(\", numeral(count.count).format(\"0,0\"), \")\"));\n      });\n      navItems.unshift(React.createElement(NavItem, {\n        key: \"all\",\n        onClick: function onClick() {\n          return _this2.onSelect(slice, \"*\");\n        }\n      }, React.createElement(\"span\", null, \"All \", labels.plural)));\n      var buttonColor = \"white\";\n      var buttonTextColor = \"black\";\n      var superLabelColor = \"black\";\n      var navStyle = {\n        display: \"none\"\n      };\n\n      if (selectedName) {\n        buttonTextColor = colors.purpleRegular;\n      }\n\n      if (this.state.isHovered) {\n        buttonColor = \"black\";\n        buttonTextColor = \"white\";\n        superLabelColor = \"white\";\n        navStyle = {\n          display: \"block\"\n        };\n      }\n\n      var labelText = selectedName || labels.label;\n      var superLabelText = selectedName ? labels.label : null;\n      return React.createElement(\"div\", {\n        className: this.props.className,\n        onMouseEnter: function onMouseEnter() {\n          return _this2.toggleHover(true);\n        },\n        onMouseLeave: function onMouseLeave() {\n          return _this2.toggleHover(false);\n        }\n      }, React.createElement(Button, {\n        style: {\n          backgroundColor: buttonColor,\n          color: buttonTextColor\n        }\n      }, superLabelText && React.createElement(SuperLabel, {\n        style: {\n          color: superLabelColor\n        }\n      }, superLabelText), labelText, React.createElement(Icon, {\n        name: \"arrow-down\",\n        fontSize: \"9px\",\n        color: buttonTextColor,\n        style: {\n          position: \"absolute\",\n          right: 15,\n          lineHeight: \"inherit\"\n        }\n      })), React.createElement(Nav, {\n        style: navStyle\n      }, navItems));\n    }\n  }]);\n\n  return Dropdown;\n}(React.Component);\nvar Button = styled.div.withConfig({\n  displayName: \"Dropdown__Button\",\n  componentId: \"s14mtti6-0\"\n})([\"\", \";background:white;color:black;border:1px solid \", \";display:inline-block;line-height:160%;padding:15px 35px 15px 18px;vertical-align:middle;max-width:120px;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;\"], avantgarde(\"s13\"), colors.grayRegular);\nvar Nav = styled.div.withConfig({\n  displayName: \"Dropdown__Nav\",\n  componentId: \"s14mtti6-1\"\n})([\"z-index:2;background:black;position:absolute;top:45px;left:1px;width:300px;border:1px solid #333;\"]);\nvar SuperLabel = styled.div.withConfig({\n  displayName: \"Dropdown__SuperLabel\",\n  componentId: \"s14mtti6-2\"\n})([\"position:absolute;font-size:9px;margin-top:-15px;color:black;\"]);\nvar NavItem = styled.div.withConfig({\n  displayName: \"Dropdown__NavItem\",\n  componentId: \"s14mtti6-3\"\n})([\"\", \";text-align:left;color:white;display:block;border-bottom:1px solid #333;padding:15px 18px 10px 18px;text-transform:capitalize;&:hover{background:\", \";}\"], garamond(\"s11\"), colors.grayBold);\nvar NavItemCount = styled.span.withConfig({\n  displayName: \"Dropdown__NavItemCount\",\n  componentId: \"s14mtti6-4\"\n})([\"color:\", \";\"], colors.graySemibold);\nvar StyledDropdown = styled(Dropdown).withConfig({\n  displayName: \"Dropdown__StyledDropdown\",\n  componentId: \"s14mtti6-5\"\n})([\"position:relative;display:inline-block;cursor:pointer;margin-left:-1px;\"]);\nexport default createFragmentContainer(StyledDropdown, {\n  aggregation: function aggregation() {\n    var node = require(\"../../__generated__/Dropdown_aggregation.graphql\");\n\n    if (node.hash && node.hash !== \"94a2813381cb263e699c9a26e40fcece\") {\n      console.error(\"The definition of 'Dropdown_aggregation' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.\");\n    }\n\n    return require(\"../../__generated__/Dropdown_aggregation.graphql\");\n  }\n});",{"version":3,"sources":["/Users/eve/development/reaction/src/Components/ArtworkFilter/Dropdown.tsx"],"names":["numeral","React","createFragmentContainer","graphql","styled","colors","avantgarde","garamond","Icon","labelMap","Dropdown","props","state","isHovered","selected","nextProps","setState","value","slice","onSelected","id","selectedCount","aggregation","counts","count","name","labels","toLowerCase","selectedName","getSelectedName","navItems","map","onSelect","format","unshift","plural","buttonColor","buttonTextColor","superLabelColor","navStyle","display","purpleRegular","labelText","label","superLabelText","className","toggleHover","backgroundColor","color","position","right","lineHeight","Component","Button","div","grayRegular","Nav","SuperLabel","NavItem","grayBold","NavItemCount","span","graySemibold","StyledDropdown"],"mappings":"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","sourcesContent":["import { Dropdown_aggregation } from \"__generated__/Dropdown_aggregation.graphql\"\nimport { find } from \"lodash\"\nimport numeral from \"numeral\"\nimport React from \"react\"\nimport { createFragmentContainer, graphql } from \"react-relay\"\nimport styled from \"styled-components\"\nimport colors from \"../../Assets/Colors\"\nimport { avantgarde, garamond } from \"../../Assets/Fonts\"\nimport Icon from \"../Icon\"\nimport { labelMap } from \"./ParamMap\"\n\ninterface DropdownProps extends React.HTMLProps<Dropdown> {\n  aggregation: Dropdown_aggregation\n  onSelected?: (slice: string, value: string) => void\n  selected?: any\n}\n\ninterface DropdownState {\n  isHovered: boolean\n  selected: any\n}\n\nexport class Dropdown extends React.Component<DropdownProps, DropdownState> {\n  constructor(props: DropdownProps) {\n    super(props)\n    this.state = {\n      isHovered: false,\n      selected: props.selected || {},\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({ selected: nextProps.selected })\n  }\n\n  toggleHover(value) {\n    this.setState({\n      isHovered: value,\n    })\n  }\n\n  onSelect(slice: string, value: string) {\n    this.setState({\n      selected: value,\n      isHovered: false,\n    })\n    this.props.onSelected(slice, value)\n  }\n\n  getSelectedName(id) {\n    const selectedCount = find(\n      this.props.aggregation.counts,\n      count => count.id === id\n    )\n    return selectedCount ? selectedCount.name : null\n  }\n\n  render() {\n    const slice = this.props.aggregation.slice\n    const labels = labelMap[this.props.aggregation.slice.toLowerCase()]\n    const selectedName = this.getSelectedName(this.state.selected)\n\n    const navItems = this.props.aggregation.counts.map(count => {\n      return (\n        <NavItem key={count.id} onClick={() => this.onSelect(slice, count.id)}>\n          <span>{count.name}</span>\n          <NavItemCount>\n            &nbsp;({numeral(count.count).format(\"0,0\")})\n          </NavItemCount>\n        </NavItem>\n      )\n    })\n\n    navItems.unshift(\n      <NavItem key=\"all\" onClick={() => this.onSelect(slice, \"*\")}>\n        <span>All {labels.plural}</span>\n      </NavItem>\n    )\n\n    let buttonColor = \"white\"\n    let buttonTextColor = \"black\"\n    let superLabelColor = \"black\"\n    let navStyle = { display: \"none\" }\n\n    if (selectedName) {\n      buttonTextColor = colors.purpleRegular\n    }\n\n    if (this.state.isHovered) {\n      buttonColor = \"black\"\n      buttonTextColor = \"white\"\n      superLabelColor = \"white\"\n      navStyle = { display: \"block\" }\n    }\n\n    const labelText = selectedName || labels.label\n    const superLabelText = selectedName ? labels.label : null\n\n    return (\n      <div\n        className={this.props.className}\n        onMouseEnter={() => this.toggleHover(true)}\n        onMouseLeave={() => this.toggleHover(false)}\n      >\n        <Button\n          style={{ backgroundColor: buttonColor, color: buttonTextColor }}\n        >\n          {superLabelText && (\n            <SuperLabel style={{ color: superLabelColor }}>\n              {superLabelText}\n            </SuperLabel>\n          )}\n          {labelText}\n          <Icon\n            name=\"arrow-down\"\n            fontSize=\"9px\"\n            color={buttonTextColor}\n            style={{ position: \"absolute\", right: 15, lineHeight: \"inherit\" }}\n          />\n        </Button>\n        <Nav style={navStyle}>{navItems}</Nav>\n      </div>\n    )\n  }\n}\n\nconst Button = styled.div`\n  ${avantgarde(\"s13\")};\n  background: white;\n  color: black;\n  border: 1px solid ${colors.grayRegular};\n  display: inline-block;\n  line-height: 160%;\n  padding: 15px 35px 15px 18px;\n  vertical-align: middle;\n  max-width: 120px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`\n\nconst Nav = styled.div`\n  z-index: 2;\n  background: black;\n  position: absolute;\n  top: 45px;\n  left: 1px;\n  width: 300px;\n  border: 1px solid #333;\n`\n\nconst SuperLabel = styled.div`\n  position: absolute;\n  font-size: 9px;\n  margin-top: -15px;\n  color: black;\n`\n\nconst NavItem = styled.div`\n  ${garamond(\"s11\")};\n  text-align: left;\n  color: white;\n  display: block;\n  border-bottom: 1px solid #333;\n  padding: 15px 18px 10px 18px;\n  text-transform: capitalize;\n  &:hover {\n    background: ${colors.grayBold};\n  }\n`\nconst NavItemCount = styled.span`\n  color: ${colors.graySemibold};\n`\n\nconst StyledDropdown = styled(Dropdown)`\n  position: relative;\n  display: inline-block;\n  cursor: pointer;\n  margin-left: -1px;\n`\n\nexport default createFragmentContainer(\n  StyledDropdown,\n  graphql`\n    fragment Dropdown_aggregation on ArtworksAggregationResults {\n      slice\n      counts {\n        name\n        id\n        count\n      }\n    }\n  `\n)\n"]}]}