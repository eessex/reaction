{"remainingRequest":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/eve/development/reaction/src/Artsy/Router/buildServerApp.tsx","dependencies":[{"path":"/Users/eve/development/reaction/src/Artsy/Router/buildServerApp.tsx","mtime":1537112679000},{"path":"/Users/eve/development/reaction/.babelrc","mtime":1537112679000},{"path":"/Users/eve/development/reaction/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { createEnvironment } from \"../Relay/createEnvironment\";\nimport { Boot } from \"./Components/Boot\";\nimport { Hydrator } from \"./Components/Hydrator\";\nimport queryMiddleware from \"farce/lib/queryMiddleware\";\nimport { Resolver } from \"found-relay\";\nimport createRender from \"found/lib/createRender\";\nimport { getFarceResult } from \"found/lib/server\";\nimport { getLoadableState } from \"loadable-components/server\";\nimport React from \"react\";\nimport ReactDOMServer from \"react-dom/server\";\nimport { getUser } from \"../../Utils/getUser\";\nexport function buildServerApp(config) {\n  return new Promise(\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee(resolve, reject) {\n      var _config$context, context, _config$routes, routes, url, initialMatchingMediaQueries, user, _user, relayEnvironment, historyMiddlewares, resolver, render, _headTags, _ref2, _redirect, _status, element, App, relayData, loadableState;\n\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _config$context = config.context, context = _config$context === void 0 ? {} : _config$context, _config$routes = config.routes, routes = _config$routes === void 0 ? [] : _config$routes, url = config.url;\n              initialMatchingMediaQueries = context.initialMatchingMediaQueries, user = context.user;\n              _user = getUser(user);\n              relayEnvironment = createEnvironment({\n                user: _user\n              });\n              historyMiddlewares = [queryMiddleware];\n              resolver = new Resolver(relayEnvironment);\n              render = createRender({});\n              _headTags = [];\n              _context.next = 11;\n              return getFarceResult({\n                url: url,\n                historyMiddlewares: historyMiddlewares,\n                routeConfig: routes,\n                resolver: resolver,\n                render: render\n              });\n\n            case 11:\n              _ref2 = _context.sent;\n              _redirect = _ref2.redirect;\n              _status = _ref2.status;\n              element = _ref2.element;\n\n              if (!_redirect) {\n                _context.next = 18;\n                break;\n              }\n\n              resolve({\n                redirect: _redirect,\n                status: _status\n              });\n              return _context.abrupt(\"return\");\n\n            case 18:\n              App = function App(props) {\n                return React.createElement(Boot, {\n                  context: context,\n                  user: _user,\n                  headTags: _headTags,\n                  initialMatchingMediaQueries: initialMatchingMediaQueries,\n                  relayEnvironment: relayEnvironment,\n                  resolver: resolver,\n                  routes: routes\n                }, React.createElement(Hydrator, {\n                  data: props.data,\n                  loadableState: props.loadableState,\n                  url: url\n                }, element));\n              }; // Kick off relay requests to prime cache\n\n\n              ReactDOMServer.renderToString(React.createElement(App, null)); // Serializable data to be rehydrated on client\n\n              _context.next = 22;\n              return relayEnvironment.relaySSRMiddleware.getCache();\n\n            case 22:\n              relayData = _context.sent;\n              _context.next = 25;\n              return getLoadableState(React.createElement(App, null));\n\n            case 25:\n              loadableState = _context.sent;\n\n              /**\n               * FIXME: Relay SSR middleware is passing a _res object across which\n               * has circular references, leading to issues *ONLY* on staging / prod\n               * which can't be reproduced locally. This strips out _res as a quickfix\n               * though this should be PR'd back at relay-modern-network-modern-ssr.\n               */\n              try {\n                relayData.forEach(function (item) {\n                  item.forEach(function (i) {\n                    delete i._res;\n                  });\n                });\n              } catch (error) {\n                console.error(\"[Artsy/Router/buildServerApp] Error cleaning data\", error);\n              }\n\n              resolve({\n                ServerApp: function ServerApp(props) {\n                  return React.createElement(App, _extends({\n                    data: relayData,\n                    loadableState: loadableState\n                  }, props));\n                },\n                status: _status,\n                headTags: _headTags\n              });\n              _context.next = 34;\n              break;\n\n            case 30:\n              _context.prev = 30;\n              _context.t0 = _context[\"catch\"](0);\n              console.error(\"[Artsy/Router/buildServerApp] Error:\", _context.t0);\n              reject(_context.t0);\n\n            case 34:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[0, 30]]);\n    }));\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n}",{"version":3,"sources":["/Users/eve/development/reaction/src/Artsy/Router/buildServerApp.tsx"],"names":["createEnvironment","Boot","Hydrator","queryMiddleware","Resolver","createRender","getFarceResult","getLoadableState","React","ReactDOMServer","getUser","buildServerApp","config","Promise","resolve","reject","context","routes","url","initialMatchingMediaQueries","user","_user","relayEnvironment","historyMiddlewares","resolver","render","headTags","routeConfig","redirect","status","element","App","props","data","loadableState","renderToString","relaySSRMiddleware","getCache","relayData","forEach","item","i","_res","error","console","ServerApp"],"mappings":"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","sourcesContent":["import { createEnvironment } from \"Artsy/Relay/createEnvironment\"\nimport { Boot } from \"Artsy/Router/Components/Boot\"\nimport { Hydrator } from \"Artsy/Router/Components/Hydrator\"\nimport queryMiddleware from \"farce/lib/queryMiddleware\"\nimport { Resolver } from \"found-relay\"\nimport createRender from \"found/lib/createRender\"\nimport { getFarceResult } from \"found/lib/server\"\nimport { getLoadableState } from \"loadable-components/server\"\nimport React, { ComponentType } from \"react\"\nimport ReactDOMServer from \"react-dom/server\"\nimport { getUser } from \"Utils/getUser\"\nimport { RouterConfig } from \"./\"\n\ninterface Resolve {\n  ServerApp?: ComponentType<any>\n  redirect?: string\n  status?: string\n  headTags?: any[]\n}\n\nexport function buildServerApp(config: RouterConfig): Promise<Resolve> {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const { context = {}, routes = [], url } = config\n      const { initialMatchingMediaQueries, user } = context\n      const _user = getUser(user)\n      const relayEnvironment = createEnvironment({ user: _user })\n      const historyMiddlewares = [queryMiddleware]\n      const resolver = new Resolver(relayEnvironment)\n      const render = createRender({})\n      const headTags = []\n\n      const { redirect, status, element } = await getFarceResult({\n        url,\n        historyMiddlewares,\n        routeConfig: routes,\n        resolver,\n        render,\n      })\n\n      if (redirect) {\n        resolve({\n          redirect,\n          status,\n        })\n        return\n      }\n\n      const App = props => {\n        return (\n          <Boot\n            context={context}\n            user={_user}\n            headTags={headTags}\n            initialMatchingMediaQueries={initialMatchingMediaQueries}\n            relayEnvironment={relayEnvironment}\n            resolver={resolver}\n            routes={routes}\n          >\n            <Hydrator\n              data={props.data}\n              loadableState={props.loadableState}\n              url={url}\n            >\n              {element}\n            </Hydrator>\n          </Boot>\n        )\n      }\n\n      // Kick off relay requests to prime cache\n      ReactDOMServer.renderToString(<App />)\n\n      // Serializable data to be rehydrated on client\n      const relayData = await relayEnvironment.relaySSRMiddleware.getCache()\n      const loadableState = await getLoadableState(<App />)\n\n      /**\n       * FIXME: Relay SSR middleware is passing a _res object across which\n       * has circular references, leading to issues *ONLY* on staging / prod\n       * which can't be reproduced locally. This strips out _res as a quickfix\n       * though this should be PR'd back at relay-modern-network-modern-ssr.\n       */\n      try {\n        relayData.forEach(item => {\n          item.forEach(i => {\n            delete i._res\n          })\n        })\n      } catch (error) {\n        console.error(\n          \"[Artsy/Router/buildServerApp] Error cleaning data\",\n          error\n        )\n      }\n\n      resolve({\n        ServerApp: props => (\n          <App data={relayData} loadableState={loadableState} {...props} />\n        ),\n        status,\n        headTags,\n      })\n    } catch (error) {\n      console.error(\"[Artsy/Router/buildServerApp] Error:\", error)\n      reject(error)\n    }\n  })\n}\n"]}]}