{"remainingRequest":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/eve/development/reaction/src/Styleguide/Components/RecentlyViewed.tsx","dependencies":[{"path":"/Users/eve/development/reaction/src/Styleguide/Components/RecentlyViewed.tsx","mtime":1537112679000},{"path":"/Users/eve/development/reaction/.babelrc","mtime":1537112679000},{"path":"/Users/eve/development/reaction/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var _graphql;\n\nimport { Serif, Spacer } from \"@artsy/palette\";\nimport { ContextConsumer } from \"../../Artsy/Router\";\nimport { FillwidthItem } from \"../../Components/Artwork/FillwidthItem\";\nimport React from \"react\";\nimport { QueryRenderer } from \"react-relay\";\nimport { createFragmentContainer, graphql } from \"react-relay\";\nimport { Carousel } from \"./Carousel\";\nvar HEIGHT = 180;\nexport var RecentlyViewed = function RecentlyViewed(props) {\n  var me = props.me;\n  return React.createElement(ContextConsumer, null, function (_ref) {\n    var user = _ref.user,\n        mediator = _ref.mediator;\n    return me && React.createElement(React.Fragment, null, React.createElement(Serif, {\n      size: \"6\"\n    }, \"Recently viewed\"), React.createElement(Spacer, {\n      mb: 3\n    }), React.createElement(Carousel, {\n      settings: {\n        slidesToScroll: 5\n      },\n      data: me.recentlyViewedArtworks.edges,\n      render: function render(artwork) {\n        var aspect_ratio = artwork.node.image.aspect_ratio;\n        return React.createElement(FillwidthItem, {\n          artwork: artwork.node,\n          targetHeight: HEIGHT,\n          imageHeight: HEIGHT,\n          width: HEIGHT * aspect_ratio,\n          margin: 10,\n          useRelay: props.useRelay,\n          user: user,\n          mediator: mediator\n        });\n      }\n    }));\n  });\n};\nRecentlyViewed.defaultProps = {\n  useRelay: true\n};\nexport var RecentlyViewedFragmentContainer = createFragmentContainer(RecentlyViewed, {\n  me: function me() {\n    var node = require(\"../../__generated__/RecentlyViewed_me.graphql\");\n\n    if (node.hash && node.hash !== \"46e488d1fa37b7fa9c4ce73cbbd0c694\") {\n      console.error(\"The definition of 'RecentlyViewed_me' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.\");\n    }\n\n    return require(\"../../__generated__/RecentlyViewed_me.graphql\");\n  }\n});\nexport var RecentlyViewedQueryRenderer = function RecentlyViewedQueryRenderer() {\n  return React.createElement(ContextConsumer, null, function (_ref2) {\n    var user = _ref2.user,\n        mediator = _ref2.mediator,\n        relayEnvironment = _ref2.relayEnvironment;\n\n    if (!user) {\n      return null;\n    }\n\n    return React.createElement(QueryRenderer, {\n      environment: relayEnvironment,\n      variables: {},\n      query: _graphql || (_graphql = function _graphql() {\n        var node = require(\"../../__generated__/RecentlyViewedQuery.graphql\");\n\n        if (node.hash && node.hash !== \"7fd8678ce0ceade9e3f696b783d190df\") {\n          console.error(\"The definition of 'RecentlyViewedQuery' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.\");\n        }\n\n        return require(\"../../__generated__/RecentlyViewedQuery.graphql\");\n      }),\n      render: function render(_ref3) {\n        var props = _ref3.props;\n\n        if (props) {\n          return React.createElement(RecentlyViewedFragmentContainer, {\n            me: props.me\n          });\n        } else {\n          return null;\n        }\n      }\n    });\n  });\n};",{"version":3,"sources":["/Users/eve/development/reaction/src/Styleguide/Components/RecentlyViewed.tsx"],"names":["Serif","Spacer","ContextConsumer","FillwidthItem","React","QueryRenderer","createFragmentContainer","graphql","Carousel","HEIGHT","RecentlyViewed","props","me","user","mediator","slidesToScroll","recentlyViewedArtworks","edges","artwork","aspect_ratio","node","image","useRelay","defaultProps","RecentlyViewedFragmentContainer","RecentlyViewedQueryRenderer","relayEnvironment"],"mappings":";;AAAA,SAASA,KAAT,EAAgBC,MAAhB,QAA8B,gBAA9B;AAGA,SAASC,eAAT;AACA,SAASC,aAAT;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,QAA8B,aAA9B;AACA,SAASC,uBAAT,EAAkCC,OAAlC,QAAiD,aAAjD;AACA,SAASC,QAAT;AAOA,IAAMC,MAAM,GAAG,GAAf;AAEA,OAAO,IAAMC,cAA8C,GAAG,SAAjDA,cAAiD,CAAAC,KAAK,EAAI;AAAA,MAC7DC,EAD6D,GACtDD,KADsD,CAC7DC,EAD6D;AAGrE,SACE,oBAAC,eAAD,QACG,gBAAwB;AAAA,QAArBC,IAAqB,QAArBA,IAAqB;AAAA,QAAfC,QAAe,QAAfA,QAAe;AACvB,WACEF,EAAE,IACA,oBAAC,KAAD,CAAO,QAAP,QACE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC;AAAZ,yBADF,EAGE,oBAAC,MAAD;AAAQ,MAAA,EAAE,EAAE;AAAZ,MAHF,EAKE,oBAAC,QAAD;AACE,MAAA,QAAQ,EAAE;AACRG,QAAAA,cAAc,EAAE;AADR,OADZ;AAIE,MAAA,IAAI,EAAEH,EAAE,CAACI,sBAAH,CAA0BC,KAJlC;AAKE,MAAA,MAAM,EAAE,gBAAAC,OAAO,EAAI;AAAA,YAGJC,YAHI,GAKbD,OALa,CAEfE,IAFe,CAGbC,KAHa,CAGJF,YAHI;AAOjB,eACE,oBAAC,aAAD;AACE,UAAA,OAAO,EAAED,OAAO,CAACE,IADnB;AAEE,UAAA,YAAY,EAAEX,MAFhB;AAGE,UAAA,WAAW,EAAEA,MAHf;AAIE,UAAA,KAAK,EAAEA,MAAM,GAAGU,YAJlB;AAKE,UAAA,MAAM,EAAE,EALV;AAME,UAAA,QAAQ,EAAER,KAAK,CAACW,QANlB;AAOE,UAAA,IAAI,EAAET,IAPR;AAQE,UAAA,QAAQ,EAAEC;AARZ,UADF;AAYD;AAxBH,MALF,CAFJ;AAoCD,GAtCH,CADF;AA0CD,CA7CM;AA+CPJ,cAAc,CAACa,YAAf,GAA8B;AAC5BD,EAAAA,QAAQ,EAAE;AADkB,CAA9B;AAIA,OAAO,IAAME,+BAA+B,GAAGlB,uBAAuB,CACpEI,cADoE;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,EAA/D;AAmBP,OAAO,IAAMe,2BAA2B,GAAG,SAA9BA,2BAA8B,GAAM;AAC/C,SACE,oBAAC,eAAD,QACG,iBAA0C;AAAA,QAAvCZ,IAAuC,SAAvCA,IAAuC;AAAA,QAAjCC,QAAiC,SAAjCA,QAAiC;AAAA,QAAvBY,gBAAuB,SAAvBA,gBAAuB;;AACzC,QAAI,CAACb,IAAL,EAAW;AACT,aAAO,IAAP;AACD;;AACD,WACE,oBAAC,aAAD;AACE,MAAA,WAAW,EAAEa,gBADf;AAEE,MAAA,SAAS,EAAE,EAFb;AAGE,MAAA,KAAK;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,QAHP;AAUE,MAAA,MAAM,EAAE,uBAAe;AAAA,YAAZf,KAAY,SAAZA,KAAY;;AACrB,YAAIA,KAAJ,EAAW;AACT,iBAAO,oBAAC,+BAAD;AAAiC,YAAA,EAAE,EAAEA,KAAK,CAACC;AAA3C,YAAP;AACD,SAFD,MAEO;AACL,iBAAO,IAAP;AACD;AACF;AAhBH,MADF;AAoBD,GAzBH,CADF;AA6BD,CA9BM","sourcesContent":["import { Serif, Spacer } from \"@artsy/palette\"\nimport { RecentlyViewed_me } from \"__generated__/RecentlyViewed_me.graphql\"\nimport { RecentlyViewedQuery } from \"__generated__/RecentlyViewedQuery.graphql\"\nimport { ContextConsumer } from \"Artsy/Router\"\nimport { FillwidthItem } from \"Components/Artwork/FillwidthItem\"\nimport React from \"react\"\nimport { QueryRenderer } from \"react-relay\"\nimport { createFragmentContainer, graphql } from \"react-relay\"\nimport { Carousel } from \"Styleguide/Components/Carousel\"\n\nexport interface RecentlyViewedProps {\n  me: RecentlyViewed_me\n  useRelay?: boolean\n}\n\nconst HEIGHT = 180\n\nexport const RecentlyViewed: React.SFC<RecentlyViewedProps> = props => {\n  const { me } = props\n\n  return (\n    <ContextConsumer>\n      {({ user, mediator }) => {\n        return (\n          me && (\n            <React.Fragment>\n              <Serif size=\"6\">Recently viewed</Serif>\n\n              <Spacer mb={3} />\n\n              <Carousel\n                settings={{\n                  slidesToScroll: 5,\n                }}\n                data={me.recentlyViewedArtworks.edges as object[]}\n                render={artwork => {\n                  const {\n                    node: {\n                      image: { aspect_ratio },\n                    },\n                  } = artwork\n\n                  return (\n                    <FillwidthItem\n                      artwork={artwork.node}\n                      targetHeight={HEIGHT}\n                      imageHeight={HEIGHT}\n                      width={HEIGHT * aspect_ratio}\n                      margin={10}\n                      useRelay={props.useRelay}\n                      user={user}\n                      mediator={mediator}\n                    />\n                  )\n                }}\n              />\n            </React.Fragment>\n          )\n        )\n      }}\n    </ContextConsumer>\n  )\n}\n\nRecentlyViewed.defaultProps = {\n  useRelay: true,\n}\n\nexport const RecentlyViewedFragmentContainer = createFragmentContainer(\n  RecentlyViewed,\n  graphql`\n    fragment RecentlyViewed_me on Me {\n      recentlyViewedArtworks(first: 20) {\n        edges {\n          node {\n            __id\n            image {\n              aspect_ratio\n            }\n            ...FillwidthItem_artwork @relay(mask: false)\n          }\n        }\n      }\n    }\n  `\n)\n\nexport const RecentlyViewedQueryRenderer = () => {\n  return (\n    <ContextConsumer>\n      {({ user, mediator, relayEnvironment }) => {\n        if (!user) {\n          return null\n        }\n        return (\n          <QueryRenderer<RecentlyViewedQuery>\n            environment={relayEnvironment}\n            variables={{}}\n            query={graphql`\n              query RecentlyViewedQuery {\n                me {\n                  ...RecentlyViewed_me\n                }\n              }\n            `}\n            render={({ props }) => {\n              if (props) {\n                return <RecentlyViewedFragmentContainer me={props.me} />\n              } else {\n                return null\n              }\n            }}\n          />\n        )\n      }}\n    </ContextConsumer>\n  )\n}\n"]}]}