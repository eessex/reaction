{"remainingRequest":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/eve/development/reaction/src/Styleguide/Components/ArtworkGridExample.tsx","dependencies":[{"path":"/Users/eve/development/reaction/src/Styleguide/Components/ArtworkGridExample.tsx","mtime":1535727457000},{"path":"/Users/eve/development/reaction/.babelrc","mtime":1537112679000},{"path":"/Users/eve/development/reaction/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var _graphql;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\nimport { graphql } from \"react-relay\";\nimport { RootQueryRenderer } from \"../../Artsy/Relay/RootQueryRenderer\";\nimport ArtworkGrid from \"../../Components/ArtworkGrid\";\nexport function ArtworkGridExample(props) {\n  return React.createElement(RootQueryRenderer, {\n    query: _graphql || (_graphql = function _graphql() {\n      var node = require(\"../../__generated__/ArtworkGridExampleQuery.graphql\");\n\n      if (node.hash && node.hash !== \"734641ed095467662983692c58509959\") {\n        console.error(\"The definition of 'ArtworkGridExampleQuery' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.\");\n      }\n\n      return require(\"../../__generated__/ArtworkGridExampleQuery.graphql\");\n    }),\n    variables: {\n      artistID: props.artistID\n    },\n    render: function render(readyState) {\n      return readyState.props && React.createElement(ArtworkGrid, _extends({}, readyState.props.artist, props));\n    }\n  });\n}",{"version":3,"sources":["/Users/eve/development/reaction/src/Styleguide/Components/ArtworkGridExample.tsx"],"names":["React","graphql","RootQueryRenderer","ArtworkGrid","ArtworkGridExample","props","artistID","readyState","artist"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,iBAAT;AACA,OAAOC,WAAP;AAEA,OAAO,SAASC,kBAAT,CAA4BC,KAA5B,EAGJ;AACD,SACE,oBAAC,iBAAD;AACE,IAAA,KAAK;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,MADP;AAUE,IAAA,SAAS,EAAE;AAAEC,MAAAA,QAAQ,EAAED,KAAK,CAACC;AAAlB,KAVb;AAWE,IAAA,MAAM,EAAE,gBAAAC,UAAU,EAAI;AACpB,aACEA,UAAU,CAACF,KAAX,IACE,oBAAC,WAAD,eAAiBE,UAAU,CAACF,KAAX,CAAiBG,MAAlC,EAA8CH,KAA9C,EAFJ;AAKD;AAjBH,IADF;AAqBD","sourcesContent":["import React from \"react\"\nimport { graphql } from \"react-relay\"\n\nimport { RootQueryRenderer } from \"Artsy/Relay/RootQueryRenderer\"\nimport ArtworkGrid from \"Components/ArtworkGrid\"\n\nexport function ArtworkGridExample(props: {\n  artistID: string\n  columnCount?: number\n}) {\n  return (\n    <RootQueryRenderer\n      query={graphql`\n        query ArtworkGridExampleQuery($artistID: String!) {\n          artist(id: $artistID) {\n            artworks: artworks_connection(first: 10) {\n              ...ArtworkGrid_artworks\n            }\n          }\n        }\n      `}\n      variables={{ artistID: props.artistID }}\n      render={readyState => {\n        return (\n          readyState.props && (\n            <ArtworkGrid {...readyState.props.artist} {...props} />\n          )\n        )\n      }}\n    />\n  )\n}\n"]}]}