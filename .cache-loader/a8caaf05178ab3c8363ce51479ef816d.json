{"remainingRequest":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/eve/development/reaction/src/Components/ArtworkFilter/Headline.tsx","dependencies":[{"path":"/Users/eve/development/reaction/src/Components/ArtworkFilter/Headline.tsx","mtime":1529688806000},{"path":"/Users/eve/development/reaction/.babelrc","mtime":1537112679000},{"path":"/Users/eve/development/reaction/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _find from \"lodash/find\";\nimport _compact from \"lodash/compact\";\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport { garamond } from \"../../Assets/Fonts\";\nimport React from \"react\";\nimport { createFragmentContainer, graphql } from \"react-relay\";\nimport styled from \"styled-components\";\nexport var Headline =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Headline, _React$Component);\n\n  function Headline() {\n    _classCallCheck(this, Headline);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Headline).apply(this, arguments));\n  }\n\n  _createClass(Headline, [{\n    key: \"getCountName\",\n    value: function getCountName(aggregation, id) {\n      var selectedAggregation = _find(this.props.aggregations, function (agg) {\n        return agg.slice === aggregation.toUpperCase();\n      });\n\n      var selectedCount = _find(selectedAggregation.counts, function (count) {\n        return count.id === id;\n      });\n\n      return selectedCount ? selectedCount.name : null;\n    }\n  }, {\n    key: \"size\",\n    value: function size() {\n      var dimension_range = this.props.dimension_range;\n\n      if (dimension_range && dimension_range !== \"*\") {\n        return this.getCountName(\"dimension_range\", dimension_range);\n      }\n\n      return false;\n    }\n  }, {\n    key: \"medium\",\n    value: function medium() {\n      var _this$props = this.props,\n          medium = _this$props.medium,\n          facet = _this$props.facet;\n\n      if (medium && medium !== \"*\") {\n        return this.getCountName(\"medium\", medium);\n      }\n\n      if (facet && facet.name) {\n        return facet.name;\n      }\n\n      return \"Works\";\n    }\n  }, {\n    key: \"priceRange\",\n    value: function priceRange() {\n      var price_range = this.props.price_range;\n\n      if (price_range && price_range !== \"*\") {\n        return this.getCountName(\"price_range\", price_range);\n      }\n\n      return false;\n    }\n  }, {\n    key: \"forSale\",\n    value: function forSale() {\n      if (this.props.for_sale) {\n        return \"For Sale\";\n      }\n\n      return false;\n    }\n  }, {\n    key: \"renderHeadline\",\n    value: function renderHeadline() {\n      var headline = _compact([this.size(), this.medium(), this.priceRange(), this.forSale()]).join(\" \");\n\n      if (headline === \"works\") {\n        return \"Artworks\";\n      }\n\n      return headline.charAt(0).toUpperCase() + headline.substr(1);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"h1\", {\n        className: this.props.className\n      }, this.renderHeadline());\n    }\n  }]);\n\n  return Headline;\n}(React.Component);\nvar StyledHeadline = styled(Headline).withConfig({\n  displayName: \"Headline__StyledHeadline\",\n  componentId: \"s1yjjkky-0\"\n})([\"\", \";font-weight:normal;margin:0;font-size:2em;\"], garamond(\"s11\"));\nexport default createFragmentContainer(StyledHeadline, {\n  facet: function facet() {\n    var node = require(\"../../__generated__/Headline_facet.graphql\");\n\n    if (node.hash && node.hash !== \"fe0e6f752ce23f2a03e177de220f2ed6\") {\n      console.error(\"The definition of 'Headline_facet' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.\");\n    }\n\n    return require(\"../../__generated__/Headline_facet.graphql\");\n  }\n});",{"version":3,"sources":["/Users/eve/development/reaction/src/Components/ArtworkFilter/Headline.tsx"],"names":["garamond","React","createFragmentContainer","graphql","styled","Headline","aggregation","id","selectedAggregation","props","aggregations","agg","slice","toUpperCase","selectedCount","counts","count","name","dimension_range","getCountName","medium","facet","price_range","for_sale","headline","size","priceRange","forSale","join","charAt","substr","className","renderHeadline","Component","StyledHeadline"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,QAAT;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,uBAAT,EAAkCC,OAAlC,QAAiD,aAAjD;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAWA,WAAaC,QAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,iCACeC,WADf,EAC4BC,EAD5B,EACgC;AAC5B,UAAMC,mBAAmB,GAAG,MAC1B,KAAKC,KAAL,CAAWC,YADe,EAE1B,UAAAC,GAAG;AAAA,eAAIA,GAAG,CAACC,KAAJ,KAAcN,WAAW,CAACO,WAAZ,EAAlB;AAAA,OAFuB,CAA5B;;AAIA,UAAMC,aAAa,GAAG,MACpBN,mBAAmB,CAACO,MADA,EAEpB,UAAAC,KAAK;AAAA,eAAIA,KAAK,CAACT,EAAN,KAAaA,EAAjB;AAAA,OAFe,CAAtB;;AAIA,aAAOO,aAAa,GAAGA,aAAa,CAACG,IAAjB,GAAwB,IAA5C;AACD;AAXH;AAAA;AAAA,2BAaS;AAAA,UACGC,eADH,GACuB,KAAKT,KAD5B,CACGS,eADH;;AAGL,UAAIA,eAAe,IAAIA,eAAe,KAAK,GAA3C,EAAgD;AAC9C,eAAO,KAAKC,YAAL,CAAkB,iBAAlB,EAAqCD,eAArC,CAAP;AACD;;AACD,aAAO,KAAP;AACD;AApBH;AAAA;AAAA,6BAsBW;AAAA,wBACmB,KAAKT,KADxB;AAAA,UACCW,MADD,eACCA,MADD;AAAA,UACSC,KADT,eACSA,KADT;;AAEP,UAAID,MAAM,IAAIA,MAAM,KAAK,GAAzB,EAA8B;AAC5B,eAAO,KAAKD,YAAL,CAAkB,QAAlB,EAA4BC,MAA5B,CAAP;AACD;;AAED,UAAIC,KAAK,IAAIA,KAAK,CAACJ,IAAnB,EAAyB;AACvB,eAAOI,KAAK,CAACJ,IAAb;AACD;;AAED,aAAO,OAAP;AACD;AAjCH;AAAA;AAAA,iCAmCe;AAAA,UACHK,WADG,GACa,KAAKb,KADlB,CACHa,WADG;;AAGX,UAAIA,WAAW,IAAIA,WAAW,KAAK,GAAnC,EAAwC;AACtC,eAAO,KAAKH,YAAL,CAAkB,aAAlB,EAAiCG,WAAjC,CAAP;AACD;;AACD,aAAO,KAAP;AACD;AA1CH;AAAA;AAAA,8BA4CY;AACR,UAAI,KAAKb,KAAL,CAAWc,QAAf,EAAyB;AACvB,eAAO,UAAP;AACD;;AACD,aAAO,KAAP;AACD;AAjDH;AAAA;AAAA,qCAmDmB;AACf,UAAMC,QAAQ,GAAG,SAAQ,CACvB,KAAKC,IAAL,EADuB,EAEvB,KAAKL,MAAL,EAFuB,EAGvB,KAAKM,UAAL,EAHuB,EAIvB,KAAKC,OAAL,EAJuB,CAAR,EAKdC,IALc,CAKT,GALS,CAAjB;;AAMA,UAAIJ,QAAQ,KAAK,OAAjB,EAA0B;AACxB,eAAO,UAAP;AACD;;AACD,aAAOA,QAAQ,CAACK,MAAT,CAAgB,CAAhB,EAAmBhB,WAAnB,KAAmCW,QAAQ,CAACM,MAAT,CAAgB,CAAhB,CAA1C;AACD;AA9DH;AAAA;AAAA,6BAgEW;AACP,aAAO;AAAI,QAAA,SAAS,EAAE,KAAKrB,KAAL,CAAWsB;AAA1B,SAAsC,KAAKC,cAAL,EAAtC,CAAP;AACD;AAlEH;;AAAA;AAAA,EAA8B/B,KAAK,CAACgC,SAApC;AAqEA,IAAMC,cAAc,GAAG9B,MAAM,CAACC,QAAD,CAAT;AAAA;AAAA;AAAA,wDAChBL,QAAQ,CAAC,KAAD,CADQ,CAApB;AAOA,eAAeE,uBAAuB,CACpCgC,cADoC;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,EAAtC","sourcesContent":["import { garamond } from \"Assets/Fonts\"\nimport { compact, find } from \"lodash\"\nimport React from \"react\"\nimport { createFragmentContainer, graphql } from \"react-relay\"\nimport styled from \"styled-components\"\n\ninterface Props extends React.HTMLProps<Headline> {\n  aggregations?: any\n  medium: string\n  price_range: string\n  dimension_range: string\n  for_sale: boolean\n  facet?: any\n}\n\nexport class Headline extends React.Component<Props, null> {\n  getCountName(aggregation, id) {\n    const selectedAggregation = find(\n      this.props.aggregations,\n      agg => agg.slice === aggregation.toUpperCase()\n    )\n    const selectedCount = find(\n      selectedAggregation.counts,\n      count => count.id === id\n    )\n    return selectedCount ? selectedCount.name : null\n  }\n\n  size() {\n    const { dimension_range } = this.props\n\n    if (dimension_range && dimension_range !== \"*\") {\n      return this.getCountName(\"dimension_range\", dimension_range)\n    }\n    return false\n  }\n\n  medium() {\n    const { medium, facet } = this.props\n    if (medium && medium !== \"*\") {\n      return this.getCountName(\"medium\", medium)\n    }\n\n    if (facet && facet.name) {\n      return facet.name\n    }\n\n    return \"Works\"\n  }\n\n  priceRange() {\n    const { price_range } = this.props\n\n    if (price_range && price_range !== \"*\") {\n      return this.getCountName(\"price_range\", price_range)\n    }\n    return false\n  }\n\n  forSale() {\n    if (this.props.for_sale) {\n      return \"For Sale\"\n    }\n    return false\n  }\n\n  renderHeadline() {\n    const headline = compact([\n      this.size(),\n      this.medium(),\n      this.priceRange(),\n      this.forSale(),\n    ]).join(\" \")\n    if (headline === \"works\") {\n      return \"Artworks\"\n    }\n    return headline.charAt(0).toUpperCase() + headline.substr(1)\n  }\n\n  render() {\n    return <h1 className={this.props.className}>{this.renderHeadline()}</h1>\n  }\n}\n\nconst StyledHeadline = styled(Headline)`\n  ${garamond(\"s11\")};\n  font-weight: normal;\n  margin: 0;\n  font-size: 2em;\n`\n\nexport default createFragmentContainer(\n  StyledHeadline,\n  graphql`\n    fragment Headline_facet on ArtworkFilterFacet {\n      ... on ArtworkFilterTag {\n        name\n      }\n      ... on ArtworkFilterGene {\n        name\n      }\n    }\n  `\n)\n"]}]}