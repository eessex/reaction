{"remainingRequest":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/eve/development/reaction/src/Utils/metaphysics.ts","dependencies":[{"path":"/Users/eve/development/reaction/src/Utils/metaphysics.ts","mtime":1535727457000},{"path":"/Users/eve/development/reaction/.babelrc","mtime":1537112679000},{"path":"/Users/eve/development/reaction/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// TODO: Deprecated in favor of react-relay-network-modern, need to remove.\n// See `Relay/createEnvironment` for new implementation.\nimport \"isomorphic-fetch\";\nimport * as sharify from \"sharify\";\nimport { NetworkError } from \"./errors\";\nexport function metaphysics(payload, user) {\n  var checkStatus = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var headers = {\n    \"Content-Type\": \"application/json\",\n    \"User-Agent\": \"Reaction\" // TODO: rename User to AuthTokens and conver to union type\n\n  };\n  var AuthHeaders = !!user ? !!user.appToken ? {\n    \"X-XAPP-TOKEN\": user.appToken\n  } : {\n    \"X-USER-ID\": user.id,\n    \"X-ACCESS-TOKEN\": user.accessToken\n  } : null;\n  return fetch(sharify.data.METAPHYSICS_ENDPOINT, {\n    method: \"POST\",\n    headers: !!user ? _objectSpread({}, headers, AuthHeaders) : headers,\n    body: JSON.stringify(payload)\n  }).then(function (response) {\n    if (!checkStatus || response.status >= 200 && response.status < 300) {\n      return response;\n    } else {\n      var error = new NetworkError(response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }).then(function (response) {\n    return response.json();\n  });\n}\nexport function query(document) {\n  return metaphysics({\n    query: document\n  }).then(function (_ref) {\n    var data = _ref.data;\n    return data;\n  });\n}",{"version":3,"sources":["/Users/eve/development/reaction/src/Utils/metaphysics.ts"],"names":["sharify","NetworkError","metaphysics","payload","user","checkStatus","headers","AuthHeaders","appToken","id","accessToken","fetch","data","METAPHYSICS_ENDPOINT","method","body","JSON","stringify","then","response","status","error","statusText","json","query","document"],"mappings":";;;;AAAA;AACA;AAEA,OAAO,kBAAP;AACA,OAAO,KAAKA,OAAZ,MAAyB,SAAzB;AACA,SAASC,YAAT;AAEA,OAAO,SAASC,WAAT,CACLC,OADK,EAELC,IAFK,EAIO;AAAA,MADZC,WACY,uEADW,IACX;AACZ,MAAMC,OAAO,GAAG;AACd,oBAAgB,kBADF;AAEd,kBAAc,UAFA,CAKhB;;AALgB,GAAhB;AAMA,MAAMC,WAAW,GAAG,CAAC,CAACH,IAAF,GAChB,CAAC,CAACA,IAAI,CAACI,QAAP,GACE;AAAE,oBAAgBJ,IAAI,CAACI;AAAvB,GADF,GAEE;AACE,iBAAaJ,IAAI,CAACK,EADpB;AAEE,sBAAkBL,IAAI,CAACM;AAFzB,GAHc,GAOhB,IAPJ;AASA,SAAOC,KAAK,CAACX,OAAO,CAACY,IAAR,CAAaC,oBAAd,EAAoC;AAC9CC,IAAAA,MAAM,EAAE,MADsC;AAE9CR,IAAAA,OAAO,EAAE,CAAC,CAACF,IAAF,qBAEAE,OAFA,EAGAC,WAHA,IAKLD,OAP0C;AAQ9CS,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAed,OAAf;AARwC,GAApC,CAAL,CAUJe,IAVI,CAUC,UAAAC,QAAQ,EAAI;AAChB,QAAI,CAACd,WAAD,IAAiBc,QAAQ,CAACC,MAAT,IAAmB,GAAnB,IAA0BD,QAAQ,CAACC,MAAT,GAAkB,GAAjE,EAAuE;AACrE,aAAOD,QAAP;AACD,KAFD,MAEO;AACL,UAAME,KAAK,GAAG,IAAIpB,YAAJ,CAAiBkB,QAAQ,CAACG,UAA1B,CAAd;AACAD,MAAAA,KAAK,CAACF,QAAN,GAAiBA,QAAjB;AACA,YAAME,KAAN;AACD;AACF,GAlBI,EAmBJH,IAnBI,CAmBI,UAAAC,QAAQ;AAAA,WAAIA,QAAQ,CAACI,IAAT,EAAJ;AAAA,GAnBZ,CAAP;AAoBD;AAED,OAAO,SAASC,KAAT,CAAkBC,QAAlB,EAAgD;AACrD,SAAOvB,WAAW,CAAc;AAAEsB,IAAAA,KAAK,EAAEC;AAAT,GAAd,CAAX,CAA8CP,IAA9C,CAAmD;AAAA,QAAGN,IAAH,QAAGA,IAAH;AAAA,WAAcA,IAAd;AAAA,GAAnD,CAAP;AACD","sourcesContent":["// TODO: Deprecated in favor of react-relay-network-modern, need to remove.\n// See `Relay/createEnvironment` for new implementation.\n\nimport \"isomorphic-fetch\"\nimport * as sharify from \"sharify\"\nimport { NetworkError } from \"./errors\"\n\nexport function metaphysics<T>(\n  payload: { query: string; variables?: object },\n  user?: User,\n  checkStatus: boolean = true\n): Promise<T> {\n  const headers = {\n    \"Content-Type\": \"application/json\",\n    \"User-Agent\": \"Reaction\",\n  }\n\n  // TODO: rename User to AuthTokens and conver to union type\n  const AuthHeaders = !!user\n    ? !!user.appToken\n      ? { \"X-XAPP-TOKEN\": user.appToken }\n      : {\n          \"X-USER-ID\": user.id,\n          \"X-ACCESS-TOKEN\": user.accessToken,\n        }\n    : null\n\n  return fetch(sharify.data.METAPHYSICS_ENDPOINT, {\n    method: \"POST\",\n    headers: !!user\n      ? {\n          ...headers,\n          ...AuthHeaders,\n        }\n      : headers,\n    body: JSON.stringify(payload),\n  })\n    .then(response => {\n      if (!checkStatus || (response.status >= 200 && response.status < 300)) {\n        return response\n      } else {\n        const error = new NetworkError(response.statusText)\n        error.response = response\n        throw error\n      }\n    })\n    .then<T>(response => response.json())\n}\n\nexport function query<T>(document: string): Promise<T> {\n  return metaphysics<{ data: T }>({ query: document }).then(({ data }) => data)\n}\n"]}]}