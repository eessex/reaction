{"remainingRequest":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js??ref--5-1!/Users/eve/development/reaction/src/Components/Publishing/Display/track-once.ts","dependencies":[{"path":"/Users/eve/development/reaction/src/Components/Publishing/Display/track-once.ts","mtime":1520966970000},{"path":"/Users/eve/development/reaction/.babelrc","mtime":1527877289000},{"path":"/Users/eve/development/reaction/node_modules/cache-loader/dist/cjs.js","mtime":1510929699000},{"path":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js","mtime":1509489566000}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.trackImpression = trackImpression;\nexports.trackViewability = trackViewability;\nvar alreadyFired = {};\n/**\n * An impression tracking utility for display ads that tries to not double\n * track the same impression by checking a cache of previous impressions.\n *\n * @example\n *\n *      import { track } from \"src/utils/track\"\n *\n *      @track()\n *      class DisplayAd extends React.Component<{}, null> {\n *\n *        @trackImpression(() => \"panel\")\n *        componentDidMount() {\n *          // ...\n *        }\n *      }\n */\n\nvar trackOnce = function trackOnce(unitLayout, action) {\n  return function (target, name, descriptor) {\n    var decoratedFn = descriptor.value; // tslint:disable-next-line:only-arrow-functions\n\n    descriptor.value = function () {\n      var key = [this.props.campaign.name, unitLayout(this.props), action, this.props.article && this.props.article.id || \"\"].join(\":\");\n      if (alreadyFired[key]) return decoratedFn.apply(this, arguments);\n      this.props.tracking && this.props.tracking.trackEvent({\n        action: action,\n        entity_type: \"display_ad\",\n        campaign_name: this.props.campaign.name,\n        unit_layout: unitLayout(this.props)\n      });\n      alreadyFired[key] = true;\n      decoratedFn.apply(this, arguments);\n    };\n  };\n};\n\nfunction trackImpression(unitLayout) {\n  return trackOnce(unitLayout, \"Impression\");\n}\n\nfunction trackViewability(unitLayout) {\n  return trackOnce(unitLayout, \"Viewability\");\n}",{"version":3,"sources":["src/Components/Publishing/Display/track-once.ts"],"names":["alreadyFired","trackOnce","unitLayout","action","target","name","descriptor","decoratedFn","value","key","props","campaign","article","id","join","apply","arguments","tracking","trackEvent","entity_type","campaign_name","unit_layout","trackImpression","trackViewability"],"mappings":";;;;;;;AAAA,IAAMA,eAAe,EAArB;AAEA;;;;;;;;;;;;;;;;;;AAiBA,IAAMC,YAAY,SAAZA,SAAY,CAACC,UAAD,EAAaC,MAAb,EAAwB;AACxC,SAAO,UAACC,MAAD,EAASC,IAAT,EAAeC,UAAf,EAA8B;AACnC,QAAMC,cAAcD,WAAWE,KAA/B,CADmC,CAEnC;;AACAF,eAAWE,KAAX,GAAmB,YAAW;AAC5B,UAAMC,MAAM,CACV,KAAKC,KAAL,CAAWC,QAAX,CAAoBN,IADV,EAEVH,WAAW,KAAKQ,KAAhB,CAFU,EAGVP,MAHU,EAIT,KAAKO,KAAL,CAAWE,OAAX,IAAsB,KAAKF,KAAL,CAAWE,OAAX,CAAmBC,EAA1C,IAAiD,EAJvC,EAKVC,IALU,CAKL,GALK,CAAZ;AAMA,UAAId,aAAaS,GAAb,CAAJ,EAAuB,OAAOF,YAAYQ,KAAZ,CAAkB,IAAlB,EAAwBC,SAAxB,CAAP;AACvB,WAAKN,KAAL,CAAWO,QAAX,IACE,KAAKP,KAAL,CAAWO,QAAX,CAAoBC,UAApB,CAA+B;AAC7Bf,sBAD6B;AAE7BgB,qBAAa,YAFgB;AAG7BC,uBAAe,KAAKV,KAAL,CAAWC,QAAX,CAAoBN,IAHN;AAI7BgB,qBAAanB,WAAW,KAAKQ,KAAhB;AAJgB,OAA/B,CADF;AAOAV,mBAAaS,GAAb,IAAoB,IAApB;AACAF,kBAAYQ,KAAZ,CAAkB,IAAlB,EAAwBC,SAAxB;AACD,KAjBD;AAkBD,GArBD;AAsBD,CAvBD;;AAyBO,SAASM,eAAT,CAAyBpB,UAAzB,EAAqC;AAC1C,SAAOD,UAAUC,UAAV,EAAsB,YAAtB,CAAP;AACD;;AAEM,SAASqB,gBAAT,CAA0BrB,UAA1B,EAAsC;AAC3C,SAAOD,UAAUC,UAAV,EAAsB,aAAtB,CAAP;AACD","file":"/Users/eve/development/reaction/src/Components/Publishing/Display/track-once.ts","sourceRoot":"/Users/eve/development/reaction","sourcesContent":["const alreadyFired = {}\n\n/**\n * An impression tracking utility for display ads that tries to not double\n * track the same impression by checking a cache of previous impressions.\n *\n * @example\n *\n *      import { track } from \"src/utils/track\"\n *\n *      @track()\n *      class DisplayAd extends React.Component<{}, null> {\n *\n *        @trackImpression(() => \"panel\")\n *        componentDidMount() {\n *          // ...\n *        }\n *      }\n */\nconst trackOnce = (unitLayout, action) => {\n  return (target, name, descriptor) => {\n    const decoratedFn = descriptor.value\n    // tslint:disable-next-line:only-arrow-functions\n    descriptor.value = function() {\n      const key = [\n        this.props.campaign.name,\n        unitLayout(this.props),\n        action,\n        (this.props.article && this.props.article.id) || \"\",\n      ].join(\":\")\n      if (alreadyFired[key]) return decoratedFn.apply(this, arguments)\n      this.props.tracking &&\n        this.props.tracking.trackEvent({\n          action,\n          entity_type: \"display_ad\",\n          campaign_name: this.props.campaign.name,\n          unit_layout: unitLayout(this.props),\n        })\n      alreadyFired[key] = true\n      decoratedFn.apply(this, arguments)\n    }\n  }\n}\n\nexport function trackImpression(unitLayout) {\n  return trackOnce(unitLayout, \"Impression\")\n}\n\nexport function trackViewability(unitLayout) {\n  return trackOnce(unitLayout, \"Viewability\")\n}\n"]}]}