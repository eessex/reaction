{"remainingRequest":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/eve/development/reaction/src/Artsy/Relay/MockRelayRenderer.tsx","dependencies":[{"path":"/Users/eve/development/reaction/src/Artsy/Relay/MockRelayRenderer.tsx","mtime":1537112679000},{"path":"/Users/eve/development/reaction/.babelrc","mtime":1537112679000},{"path":"/Users/eve/development/reaction/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createMockNetworkLayer } from \"./createMockNetworkLayer\";\nimport React from \"react\";\nimport { QueryRenderer } from \"react-relay\";\nimport { Environment, RecordSource, Store } from \"relay-runtime\";\nexport var MockRelayRenderer = function MockRelayRenderer(_ref) {\n  var Component = _ref.Component,\n      query = _ref.query,\n      mockResolvers = _ref.mockResolvers;\n  var network = createMockNetworkLayer(_objectSpread({\n    Query: function Query() {\n      return {};\n    }\n  }, mockResolvers));\n  var source = new RecordSource();\n  var store = new Store(source);\n  var environment = new Environment({\n    network: network,\n    store: store\n  });\n  return React.createElement(QueryRenderer // tslint:disable-next-line relay-operation-generics\n  , {\n    query: query,\n    environment: environment,\n    variables: {},\n    render: function render(_ref2) {\n      var error = _ref2.error,\n          props = _ref2.props,\n          retry = _ref2.retry;\n      return error || !props ? React.createElement(\"div\", null, error) : React.createElement(Component, props);\n    }\n  });\n};",{"version":3,"sources":["/Users/eve/development/reaction/src/Artsy/Relay/MockRelayRenderer.tsx"],"names":["createMockNetworkLayer","React","QueryRenderer","Environment","RecordSource","Store","MockRelayRenderer","Component","query","mockResolvers","network","Query","source","store","environment","error","props","retry"],"mappings":";;;;AAAA,SAASA,sBAAT;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,QAA8B,aAA9B;AACA,SACEC,WADF,EAGEC,YAHF,EAIEC,KAJF,QAKO,eALP;AAaA,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,OAIH;AAAA,MAH5BC,SAG4B,QAH5BA,SAG4B;AAAA,MAF5BC,KAE4B,QAF5BA,KAE4B;AAAA,MAD5BC,aAC4B,QAD5BA,aAC4B;AAC5B,MAAMC,OAAO,GAAGV,sBAAsB;AACpCW,IAAAA,KAAK,EAAE;AAAA,aAAO,EAAP;AAAA;AAD6B,KAEjCF,aAFiC,EAAtC;AAIA,MAAMG,MAAM,GAAG,IAAIR,YAAJ,EAAf;AACA,MAAMS,KAAK,GAAG,IAAIR,KAAJ,CAAUO,MAAV,CAAd;AACA,MAAME,WAAW,GAAG,IAAIX,WAAJ,CAAgB;AAClCO,IAAAA,OAAO,EAAPA,OADkC;AAElCG,IAAAA,KAAK,EAALA;AAFkC,GAAhB,CAApB;AAKA,SACE,oBAAC,aAAD,CACE;AADF;AAEE,IAAA,KAAK,EAAEL,KAFT;AAGE,IAAA,WAAW,EAAEM,WAHf;AAIE,IAAA,SAAS,EAAE,EAJb;AAKE,IAAA,MAAM,EAAE,uBAA6B;AAAA,UAA1BC,KAA0B,SAA1BA,KAA0B;AAAA,UAAnBC,KAAmB,SAAnBA,KAAmB;AAAA,UAAZC,KAAY,SAAZA,KAAY;AACnC,aAAOF,KAAK,IAAI,CAACC,KAAV,GAAkB,iCAAMD,KAAN,CAAlB,GAAuC,oBAAC,SAAD,EAAeC,KAAf,CAA9C;AACD;AAPH,IADF;AAWD,CA3BM","sourcesContent":["import { createMockNetworkLayer } from \"Artsy/Relay/createMockNetworkLayer\"\nimport { IResolvers } from \"graphql-tools/dist/Interfaces\"\nimport React from \"react\"\nimport { QueryRenderer } from \"react-relay\"\nimport {\n  Environment,\n  GraphQLTaggedNode,\n  RecordSource,\n  Store,\n} from \"relay-runtime\"\n\nexport interface MockRelayRendererProps {\n  Component: React.ComponentType\n  query: GraphQLTaggedNode\n  mockResolvers: IResolvers\n}\n\nexport const MockRelayRenderer = ({\n  Component,\n  query,\n  mockResolvers,\n}: MockRelayRendererProps) => {\n  const network = createMockNetworkLayer({\n    Query: () => ({}),\n    ...mockResolvers,\n  })\n  const source = new RecordSource()\n  const store = new Store(source)\n  const environment = new Environment({\n    network,\n    store,\n  })\n\n  return (\n    <QueryRenderer\n      // tslint:disable-next-line relay-operation-generics\n      query={query}\n      environment={environment}\n      variables={{}}\n      render={({ error, props, retry }) => {\n        return error || !props ? <div>{error}</div> : <Component {...props} />\n      }}\n    />\n  )\n}\n"]}]}