{"remainingRequest":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/eve/development/reaction/src/Utils/track.ts","dependencies":[{"path":"/Users/eve/development/reaction/src/Utils/track.ts","mtime":1532461217000},{"path":"/Users/eve/development/reaction/.babelrc","mtime":1532461217000},{"path":"/Users/eve/development/reaction/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js","mtime":1509489566000}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.trackWithProps = trackWithProps;\nexports.trackWithoutProps = trackWithoutProps;\nexports.default = exports.track = void 0;\n\nvar _reactTracking = _interopRequireDefault(require(\"react-tracking\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * A typed tracking-info and props alias of the default react-tracking `track` function.\n *\n * Use this version when you’re going to use a callback function to generate the tracking info.\n *\n * @example\n *\n *      import { trackWithProps } from \"src/utils/track\"\n *\n *      interface Props {\n *        artist: {\n *          slug: string\n *        }\n *      }\n *\n *      const track = trackWithProps<Props>()\n *\n *      @track()\n *      class Artist extends React.Component<Props, null> {\n *        render() {\n *          return (\n *            <div onClick={this.handleFollow.bind(this)}>\n *              ...\n *            </div>\n *          )\n *        }\n *\n *        @track(props => ({ action: \"Follow Artist\", slug: props.slug }))\n *        handleFollow() {\n *          // ...\n *        }\n *      }\n *\n */\nfunction trackWithProps() {\n  return _reactTracking.default;\n}\n/**\n * A typed tracking-info alias of the default react-tracking `track` function.\n *\n * Use this version when you don’t use a callback function to generate the tracking info based on props, but you do want\n * to extend the tracking-info schema.\n *\n * @example\n *\n *      import { trackWithoutProps as track } from \"src/utils/track\"\n *\n *      interface TrackingInfo {\n *        slug: string\n *      }\n *\n *      const track = trackWithoutProps<TrackingInfo>()\n *\n *      @track()\n *      class Artist extends React.Component<{}, null> {\n *        render() {\n *          return (\n *            <div onClick={this.handleFollow.bind(this)}>\n *              ...\n *            </div>\n *          )\n *        }\n *\n *        @track({ action: \"Follow Artist\", slug: \"banksy\" })\n *        handleFollow() {\n *          // ...\n *        }\n *      }\n */\n\n\nfunction trackWithoutProps() {\n  return _reactTracking.default;\n}\n/**\n * A typed tracking-info alias of the default react-tracking `track` function.\n *\n * Use this version when you don’t use a callback function to generate the tracking info based on props. You can also\n * use this if you don’t want to deal with props types, but you want to be cool too, right?\n *\n * @example\n *\n *      import { track } from \"src/utils/track\"\n *\n *      @track()\n *      class Artist extends React.Component<{}, null> {\n *        render() {\n *          return (\n *            <div onClick={this.handleFollow.bind(this)}>\n *              ...\n *            </div>\n *          )\n *        }\n *\n *        @track({ action: \"Follow Artist\" })\n *        handleFollow() {\n *          // ...\n *        }\n *      }\n */\n\n\nvar track = trackWithoutProps();\nexports.track = track;\nvar _default = track;\nexports.default = _default;",{"version":3,"sources":["src/Utils/track.ts"],"names":["trackWithProps","_track","trackWithoutProps","track"],"mappings":";;;;;;;;;AAAA;;;;AAwBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCO,SAASA,cAAT,GAAqE;AAC1E,SAAOC,sBAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCO,SAASC,iBAAT,GAAuE;AAC5E,SAAOD,sBAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BO,IAAME,QAAQD,mBAAd;;eAEQC,K","sourceRoot":"/Users/eve/development/reaction","sourcesContent":["import { default as _track, Track } from \"react-tracking\"\n\n/**\n * The global tracking-info keys in Artsy’s schema.\n */\nexport interface Global {\n  /**\n   * The name of an event.\n   */\n  action: string\n\n  /**\n   * The root container component should specify this as the screen context.\n   */\n  page: string\n}\n\nexport interface Shareable extends Global {\n  /**\n   * The public slug for this entity.\n   */\n  slug: string\n}\n\n/**\n * A typed tracking-info and props alias of the default react-tracking `track` function.\n *\n * Use this version when you’re going to use a callback function to generate the tracking info.\n *\n * @example\n *\n *      import { trackWithProps } from \"src/utils/track\"\n *\n *      interface Props {\n *        artist: {\n *          slug: string\n *        }\n *      }\n *\n *      const track = trackWithProps<Props>()\n *\n *      @track()\n *      class Artist extends React.Component<Props, null> {\n *        render() {\n *          return (\n *            <div onClick={this.handleFollow.bind(this)}>\n *              ...\n *            </div>\n *          )\n *        }\n *\n *        @track(props => ({ action: \"Follow Artist\", slug: props.slug }))\n *        handleFollow() {\n *          // ...\n *        }\n *      }\n *\n */\nexport function trackWithProps<P, T extends Global = Global>(): Track<T, P> {\n  return _track\n}\n\n/**\n * A typed tracking-info alias of the default react-tracking `track` function.\n *\n * Use this version when you don’t use a callback function to generate the tracking info based on props, but you do want\n * to extend the tracking-info schema.\n *\n * @example\n *\n *      import { trackWithoutProps as track } from \"src/utils/track\"\n *\n *      interface TrackingInfo {\n *        slug: string\n *      }\n *\n *      const track = trackWithoutProps<TrackingInfo>()\n *\n *      @track()\n *      class Artist extends React.Component<{}, null> {\n *        render() {\n *          return (\n *            <div onClick={this.handleFollow.bind(this)}>\n *              ...\n *            </div>\n *          )\n *        }\n *\n *        @track({ action: \"Follow Artist\", slug: \"banksy\" })\n *        handleFollow() {\n *          // ...\n *        }\n *      }\n */\nexport function trackWithoutProps<T extends Global = Global>(): Track<T, any> {\n  return _track\n}\n\n/**\n * A typed tracking-info alias of the default react-tracking `track` function.\n *\n * Use this version when you don’t use a callback function to generate the tracking info based on props. You can also\n * use this if you don’t want to deal with props types, but you want to be cool too, right?\n *\n * @example\n *\n *      import { track } from \"src/utils/track\"\n *\n *      @track()\n *      class Artist extends React.Component<{}, null> {\n *        render() {\n *          return (\n *            <div onClick={this.handleFollow.bind(this)}>\n *              ...\n *            </div>\n *          )\n *        }\n *\n *        @track({ action: \"Follow Artist\" })\n *        handleFollow() {\n *          // ...\n *        }\n *      }\n */\nexport const track = trackWithoutProps()\n\nexport default track\n"]}]}