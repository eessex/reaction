{"remainingRequest":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js??ref--5-1!/Users/eve/development/reaction/src/Components/Publishing/Video/Player/VideoPlayer.tsx","dependencies":[{"path":"/Users/eve/development/reaction/src/Components/Publishing/Video/Player/VideoPlayer.tsx","mtime":1524585020000},{"path":"/Users/eve/development/reaction/.babelrc","mtime":1527877289000},{"path":"/Users/eve/development/reaction/node_modules/cache-loader/dist/cjs.js","mtime":1510929699000},{"path":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js","mtime":1509489566000}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.VideoContainer = exports.VideoPlayer = void 0;\n\nvar _lodash = require(\"lodash\");\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _styledComponents = _interopRequireDefault(require(\"styled-components\"));\n\nvar _track = require(\"../../../../Utils/track\");\n\nvar _FullscreenHelpers = require(\"./FullscreenHelpers\");\n\nvar _VideoControls = require(\"./VideoControls\");\n\nvar _dec, _dec2, _class, _class2;\n\nvar _templateObject = /*#__PURE__*/ _taggedTemplateLiteral([\"\\n  width: 100%;\\n  height: 100%;\\n  position: relative;\\n  background-color: black;\\n  video {\\n    object-fit: contain;\\n    width: 100%;\\n    height: 100%;\\n  }\\n  \", \" {\\n    opacity: \", \";\\n  }\\n\"], [\"\\n  width: 100%;\\n  height: 100%;\\n  position: relative;\\n  background-color: black;\\n  video {\\n    object-fit: contain;\\n    width: 100%;\\n    height: 100%;\\n  }\\n  \", \" {\\n    opacity: \", \";\\n  }\\n\"]);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object['ke' + 'ys'](descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object['define' + 'Property'](target, property, desc); desc = null; } return desc; }\n\nvar VideoPlayer = (_dec = (0, _track.track)(), _dec2 = (0, _track.track)(function (props) {\n  return {\n    action: \"Click\",\n    label: \"Fullscreen video\"\n  };\n}), _dec(_class = (_class2 =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(VideoPlayer, _Component);\n\n  function VideoPlayer(props) {\n    var _this;\n\n    _classCallCheck(this, VideoPlayer);\n\n    _this = _possibleConstructorReturn(this, (VideoPlayer.__proto__ || Object.getPrototypeOf(VideoPlayer)).call(this, props));\n    Object.defineProperty(_assertThisInitialized(_this), \"video\", {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_assertThisInitialized(_this), \"videoPlayer\", {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_assertThisInitialized(_this), \"timer\", {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_assertThisInitialized(_this), \"state\", {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: {\n        isMuted: false,\n        isPlaying: _this.props.forcePlay,\n        currentTime: 0,\n        duration: 0,\n        idleTime: 0,\n        showControls: true\n      }\n    });\n    Object.defineProperty(_assertThisInitialized(_this), \"resetTimer\", {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: function value() {\n        _this.setState({\n          showControls: true,\n          idleTime: 0\n        });\n      }\n    });\n    Object.defineProperty(_assertThisInitialized(_this), \"incrementTimer\", {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: function value() {\n        var newIdleTime = _this.state.idleTime + 1;\n\n        _this.setState({\n          idleTime: newIdleTime,\n          showControls: newIdleTime > 3 ? false : true\n        });\n      }\n    });\n    Object.defineProperty(_assertThisInitialized(_this), \"setDuration\", {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: function value(e) {\n        _this.setState({\n          duration: e.target.duration\n        });\n      }\n    });\n    Object.defineProperty(_assertThisInitialized(_this), \"updateTime\", {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: function value(e) {\n        _this.trackProgress();\n\n        _this.setState({\n          currentTime: e.target.currentTime\n        });\n      }\n    });\n    Object.defineProperty(_assertThisInitialized(_this), \"togglePlay\", {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: function value() {\n        if (_this.state.isPlaying) {\n          _this.video.pause();\n        } else {\n          _this.video.play();\n        }\n\n        if (_this.props.notifyPlayToggle) {\n          _this.props.notifyPlayToggle(!_this.state.isPlaying);\n        }\n\n        _this.setState({\n          isPlaying: !_this.state.isPlaying\n        });\n      }\n    });\n    Object.defineProperty(_assertThisInitialized(_this), \"toggleMute\", {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: function value() {\n        _this.setState({\n          isMuted: !_this.state.isMuted\n        });\n      }\n    });\n    Object.defineProperty(_assertThisInitialized(_this), \"forcePlay\", {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: function value() {\n        _this.video.play();\n\n        _this.setState({\n          isPlaying: true\n        });\n      }\n    });\n    Object.defineProperty(_assertThisInitialized(_this), \"seekTo\", {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: function value(_value) {\n        _this.video.currentTime = _value;\n\n        _this.setState({\n          currentTime: _value\n        });\n      }\n    });\n    Object.defineProperty(_assertThisInitialized(_this), \"pause\", {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: function value() {\n        _this.video.pause();\n\n        _this.setState({\n          isPlaying: false\n        });\n      }\n    });\n    Object.defineProperty(_assertThisInitialized(_this), \"play\", {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: function value() {\n        _this.video.play();\n\n        _this.setState({\n          isPlaying: true\n        });\n      }\n    });\n    Object.defineProperty(_assertThisInitialized(_this), \"trackProgress\", {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: function value() {\n        var secondsComplete = Math.floor(_this.video.currentTime);\n        var percentComplete = Math.floor(_this.video.currentTime / _this.video.duration * 100);\n        var percentCompleteInterval = Math.floor(percentComplete / 25) * 25; // Track 25% duration intervals\n\n        if (percentCompleteInterval > 0) {\n          _this.trackDuration(percentCompleteInterval);\n        } // Track 3 & 10 seconds\n\n\n        if (secondsComplete === 3 || secondsComplete === 10) {\n          _this.trackSeconds(secondsComplete);\n        }\n      }\n    });\n    Object.defineProperty(_assertThisInitialized(_this), \"trackDuration\", {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: (0, _lodash.memoize)(function (percentComplete) {\n        _this.props.tracking.trackEvent({\n          action: \"Video duration\",\n          label: \"Video duration\",\n          percent_complete: percentComplete\n        });\n      })\n    });\n    Object.defineProperty(_assertThisInitialized(_this), \"trackSeconds\", {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: (0, _lodash.memoize)(function (secondsComplete) {\n        _this.props.tracking.trackEvent({\n          action: \"Video seconds\",\n          label: \"Video seconds\",\n          seconds_complete: secondsComplete\n        });\n      })\n    });\n    _this.toggleFullscreen = _this.toggleFullscreen.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(VideoPlayer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.video) {\n        if ((0, _FullscreenHelpers.fullscreenEnabled)()) {\n          (0, _FullscreenHelpers.addFSEventListener)(this.video);\n        }\n\n        this.video.addEventListener(\"timeupdate\", this.updateTime);\n        this.video.addEventListener(\"loadedmetadata\", this.setDuration);\n        document.addEventListener(\"mousemove\", this.resetTimer);\n        document.addEventListener(\"keypress\", this.resetTimer);\n        document.addEventListener(\"touchstart\", this.resetTimer);\n        this.timer = setInterval(this.incrementTimer, 1000);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if ((0, _FullscreenHelpers.fullscreenEnabled)()) {\n        (0, _FullscreenHelpers.removeFSEventListener)(this.video);\n      }\n\n      this.video.removeEventListener(\"timeupdate\", this.updateTime);\n      document.removeEventListener(\"mousemove\", this.resetTimer);\n      document.removeEventListener(\"keypress\", this.resetTimer);\n      document.removeEventListener(\"touchstart\", this.resetTimer);\n      clearInterval(this.timer);\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.forcePlay) {\n        this.forcePlay();\n      }\n    }\n  }, {\n    key: \"toggleFullscreen\",\n    value: function toggleFullscreen() {\n      if ((0, _FullscreenHelpers.fullscreenEnabled)()) {\n        if ((0, _FullscreenHelpers.isFullscreen)()) {\n          (0, _FullscreenHelpers.exitFullscreen)();\n        } else {\n          (0, _FullscreenHelpers.requestFullscreen)(this.videoPlayer);\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _props = this.props,\n          url = _props.url,\n          title = _props.title;\n      return _react.default.createElement(VideoContainer, {\n        innerRef: function innerRef(container) {\n          return _this2.videoPlayer = container;\n        },\n        showControls: this.state.showControls\n      }, _react.default.createElement(\"video\", {\n        playsInline: true,\n        src: url,\n        ref: function ref(video) {\n          return _this2.video = video;\n        },\n        muted: this.state.isMuted\n      }), _react.default.createElement(VideoControlsParent, null, _react.default.createElement(_VideoControls.VideoControls, {\n        title: title,\n        duration: this.state.duration,\n        currentTime: this.state.currentTime,\n        toggleFullscreen: this.toggleFullscreen,\n        toggleMute: this.toggleMute,\n        togglePlay: this.togglePlay,\n        pause: this.pause,\n        play: this.play,\n        seekTo: this.seekTo,\n        isMuted: this.state.isMuted,\n        isPlaying: this.state.isPlaying\n      })));\n    }\n  }]);\n\n  return VideoPlayer;\n}(_react.Component), (_applyDecoratedDescriptor(_class2.prototype, \"toggleFullscreen\", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, \"toggleFullscreen\"), _class2.prototype)), _class2)) || _class);\nexports.VideoPlayer = VideoPlayer;\n\nvar VideoControlsParent =\n/*#__PURE__*/\n_styledComponents.default.div.withConfig({\n  displayName: \"VideoPlayer__VideoControlsParent\",\n  componentId: \"s1j2on8x-0\"\n})([\"position:absolute;bottom:0;left:0;right:0;margin:0 auto;max-width:1200px;width:100%;\"]);\n\nvar Div = _styledComponents.default.div;\nvar VideoContainer = Div(_templateObject, _VideoControls.VideoControlsContainer, function (props) {\n  return props.showControls ? \"1\" : \"0\";\n});\nexports.VideoContainer = VideoContainer;",{"version":3,"sources":["src/Components/Publishing/Video/Player/VideoPlayer.tsx"],"names":["VideoPlayer","action","label","props","isMuted","isPlaying","forcePlay","currentTime","duration","idleTime","showControls","setState","newIdleTime","state","e","target","trackProgress","video","pause","play","notifyPlayToggle","value","secondsComplete","Math","floor","percentComplete","percentCompleteInterval","trackDuration","trackSeconds","tracking","trackEvent","percent_complete","seconds_complete","toggleFullscreen","bind","addEventListener","updateTime","setDuration","document","resetTimer","timer","setInterval","incrementTimer","removeEventListener","clearInterval","nextProps","videoPlayer","url","title","container","toggleMute","togglePlay","seekTo","VideoControlsParent","div","Div","VideoContainer"],"mappings":"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","file":"/Users/eve/development/reaction/src/Components/Publishing/Video/Player/VideoPlayer.tsx","sourceRoot":"/Users/eve/development/reaction","sourcesContent":["import { memoize } from \"lodash\"\nimport React, { Component } from \"react\"\nimport styled, { StyledFunction } from \"styled-components\"\nimport { track } from \"../../../../Utils/track\"\nimport {\n  addFSEventListener,\n  exitFullscreen,\n  fullscreenEnabled,\n  isFullscreen,\n  removeFSEventListener,\n  requestFullscreen,\n} from \"./FullscreenHelpers\"\nimport { VideoControls, VideoControlsContainer } from \"./VideoControls\"\n\ninterface Props extends React.HTMLProps<HTMLDivElement> {\n  url: string\n  title?: string\n  notifyPlayToggle?: (e) => void\n  forcePlay?: boolean\n  tracking?: any\n}\n\ninterface State {\n  isMuted: boolean\n  isPlaying: boolean\n  currentTime: number\n  duration: number\n  idleTime: number\n  showControls: boolean\n}\n\ninterface DivProps {\n  showControls: boolean\n}\n\n@track()\nexport class VideoPlayer extends Component<Props, State> {\n  public video: HTMLVideoElement\n  public videoPlayer: HTMLDivElement\n  public timer\n\n  state = {\n    isMuted: false,\n    isPlaying: this.props.forcePlay,\n    currentTime: 0,\n    duration: 0,\n    idleTime: 0,\n    showControls: true,\n  }\n\n  constructor(props) {\n    super(props)\n    this.toggleFullscreen = this.toggleFullscreen.bind(this)\n  }\n\n  componentDidMount() {\n    if (this.video) {\n      if (fullscreenEnabled()) {\n        addFSEventListener(this.video)\n      }\n\n      this.video.addEventListener(\"timeupdate\", this.updateTime)\n      this.video.addEventListener(\"loadedmetadata\", this.setDuration)\n\n      document.addEventListener(\"mousemove\", this.resetTimer)\n      document.addEventListener(\"keypress\", this.resetTimer)\n      document.addEventListener(\"touchstart\", this.resetTimer)\n      this.timer = setInterval(this.incrementTimer, 1000)\n    }\n  }\n\n  componentWillUnmount() {\n    if (fullscreenEnabled()) {\n      removeFSEventListener(this.video)\n    }\n\n    this.video.removeEventListener(\"timeupdate\", this.updateTime)\n\n    document.removeEventListener(\"mousemove\", this.resetTimer)\n    document.removeEventListener(\"keypress\", this.resetTimer)\n    document.removeEventListener(\"touchstart\", this.resetTimer)\n    clearInterval(this.timer)\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.forcePlay) {\n      this.forcePlay()\n    }\n  }\n\n  resetTimer = () => {\n    this.setState({\n      showControls: true,\n      idleTime: 0,\n    })\n  }\n\n  incrementTimer = () => {\n    const newIdleTime = this.state.idleTime + 1\n\n    this.setState({\n      idleTime: newIdleTime,\n      showControls: newIdleTime > 3 ? false : true,\n    })\n  }\n\n  setDuration = e => {\n    this.setState({\n      duration: e.target.duration,\n    })\n  }\n\n  updateTime = e => {\n    this.trackProgress()\n    this.setState({\n      currentTime: e.target.currentTime,\n    })\n  }\n\n  togglePlay = () => {\n    if (this.state.isPlaying) {\n      this.video.pause()\n    } else {\n      this.video.play()\n    }\n\n    if (this.props.notifyPlayToggle) {\n      this.props.notifyPlayToggle(!this.state.isPlaying)\n    }\n\n    this.setState({\n      isPlaying: !this.state.isPlaying,\n    })\n  }\n\n  toggleMute = () => {\n    this.setState({\n      isMuted: !this.state.isMuted,\n    })\n  }\n\n  forcePlay = () => {\n    this.video.play()\n    this.setState({\n      isPlaying: true,\n    })\n  }\n\n  @track(props => {\n    return {\n      action: \"Click\",\n      label: \"Fullscreen video\",\n    }\n  })\n  toggleFullscreen() {\n    if (fullscreenEnabled()) {\n      if (isFullscreen()) {\n        exitFullscreen()\n      } else {\n        requestFullscreen(this.videoPlayer)\n      }\n    }\n  }\n\n  seekTo = value => {\n    this.video.currentTime = value\n    this.setState({\n      currentTime: value,\n    })\n  }\n\n  pause = () => {\n    this.video.pause()\n    this.setState({\n      isPlaying: false,\n    })\n  }\n\n  play = () => {\n    this.video.play()\n    this.setState({\n      isPlaying: true,\n    })\n  }\n\n  trackProgress = () => {\n    const secondsComplete = Math.floor(this.video.currentTime)\n    const percentComplete = Math.floor(\n      this.video.currentTime / this.video.duration * 100\n    )\n    const percentCompleteInterval = Math.floor(percentComplete / 25) * 25\n\n    // Track 25% duration intervals\n    if (percentCompleteInterval > 0) {\n      this.trackDuration(percentCompleteInterval)\n    }\n\n    // Track 3 & 10 seconds\n    if (secondsComplete === 3 || secondsComplete === 10) {\n      this.trackSeconds(secondsComplete)\n    }\n  }\n\n  trackDuration = memoize(percentComplete => {\n    this.props.tracking.trackEvent({\n      action: \"Video duration\",\n      label: \"Video duration\",\n      percent_complete: percentComplete,\n    })\n  })\n\n  trackSeconds = memoize(secondsComplete => {\n    this.props.tracking.trackEvent({\n      action: \"Video seconds\",\n      label: \"Video seconds\",\n      seconds_complete: secondsComplete,\n    })\n  })\n\n  render() {\n    const { url, title } = this.props\n\n    return (\n      <VideoContainer\n        innerRef={container => (this.videoPlayer = container)}\n        showControls={this.state.showControls}\n      >\n        <video\n          playsInline\n          src={url}\n          ref={video => (this.video = video)}\n          muted={this.state.isMuted}\n        />\n        <VideoControlsParent>\n          <VideoControls\n            title={title}\n            duration={this.state.duration}\n            currentTime={this.state.currentTime}\n            toggleFullscreen={this.toggleFullscreen}\n            toggleMute={this.toggleMute}\n            togglePlay={this.togglePlay}\n            pause={this.pause}\n            play={this.play}\n            seekTo={this.seekTo}\n            isMuted={this.state.isMuted}\n            isPlaying={this.state.isPlaying}\n          />\n        </VideoControlsParent>\n      </VideoContainer>\n    )\n  }\n}\n\nconst VideoControlsParent = styled.div`\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  margin: 0 auto;\n  max-width: 1200px;\n  width: 100%;\n`\n\nconst Div: StyledFunction<DivProps & React.HTMLProps<HTMLDivElement>> =\n  styled.div\nexport const VideoContainer = Div`\n  width: 100%;\n  height: 100%;\n  position: relative;\n  background-color: black;\n  video {\n    object-fit: contain;\n    width: 100%;\n    height: 100%;\n  }\n  ${VideoControlsContainer} {\n    opacity: ${props => (props.showControls ? \"1\" : \"0\")};\n  }\n`\n"]}]}