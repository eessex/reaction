{"remainingRequest":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/eve/development/reaction/src/Apps/Order/Components/ItemReview.tsx","dependencies":[{"path":"/Users/eve/development/reaction/src/Apps/Order/Components/ItemReview.tsx","mtime":1537112679000},{"path":"/Users/eve/development/reaction/.babelrc","mtime":1537112679000},{"path":"/Users/eve/development/reaction/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import React from \"react\";\nimport { BorderBox, Flex, Serif } from \"@artsy/palette\";\nimport { createFragmentContainer, graphql } from \"react-relay\";\nimport styled from \"styled-components\";\nvar ImageBox = styled.div.withConfig({\n  displayName: \"ItemReview__ImageBox\",\n  componentId: \"s1ag9v4q-0\"\n})([\"flex:0 1 auto;img{max-width:185px;max-height:375px;display:block;margin:0;}\"]);\nexport var ItemReview = function ItemReview(_ref) {\n  var _ref$artwork = _ref.artwork,\n      artist_names = _ref$artwork.artist_names,\n      title = _ref$artwork.title,\n      date = _ref$artwork.date,\n      medium = _ref$artwork.medium,\n      dimensions = _ref$artwork.dimensions,\n      attribution_class = _ref$artwork.attribution_class,\n      url = _ref$artwork.image.resized.url;\n  return React.createElement(BorderBox, {\n    p: [2, 3]\n  }, React.createElement(Flex, {\n    flexGrow: 1,\n    flexDirection: \"column\"\n  }, React.createElement(Serif, {\n    size: \"2\",\n    weight: \"semibold\",\n    color: \"black60\"\n  }, artist_names), React.createElement(Serif, {\n    italic: true,\n    size: \"2\",\n    color: \"black60\"\n  }, title, date && \", (\".concat(date, \")\")), medium && React.createElement(Serif, {\n    size: \"2\",\n    color: \"black60\"\n  }, medium), dimensions && React.createElement(Serif, {\n    size: \"2\",\n    color: \"black60\"\n  }, dimensions.in, \" (\", dimensions.cm, \")\"), attribution_class && React.createElement(Serif, {\n    size: \"2\",\n    color: \"black60\"\n  }, attribution_class.short_description)), React.createElement(ImageBox, null, React.createElement(\"img\", {\n    alt: \"\".concat(title, \" by \").concat(artist_names),\n    src: url\n  })));\n};\nexport var ItemReviewFragmentContainer = createFragmentContainer(ItemReview, {\n  artwork: function artwork() {\n    var node = require(\"../../../__generated__/ItemReview_artwork.graphql\");\n\n    if (node.hash && node.hash !== \"73946f68c326f532fe710492224c3b27\") {\n      console.error(\"The definition of 'ItemReview_artwork' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.\");\n    }\n\n    return require(\"../../../__generated__/ItemReview_artwork.graphql\");\n  }\n});",{"version":3,"sources":["/Users/eve/development/reaction/src/Apps/Order/Components/ItemReview.tsx"],"names":["React","BorderBox","Flex","Serif","createFragmentContainer","graphql","styled","ImageBox","div","ItemReview","artwork","artist_names","title","date","medium","dimensions","attribution_class","url","image","resized","in","cm","short_description","ItemReviewFragmentContainer"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,KAA1B,QAAuC,gBAAvC;AAEA,SAASC,uBAAT,EAAkCC,OAAlC,QAAiD,aAAjD;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAMA,IAAMC,QAAQ,GAAGD,MAAM,CAACE,GAAV;AAAA;AAAA;AAAA,mFAAd;AAUA,OAAO,IAAMC,UAAsC,GAAG,SAAzCA,UAAyC;AAAA,0BACpDC,OADoD;AAAA,MAElDC,YAFkD,gBAElDA,YAFkD;AAAA,MAGlDC,KAHkD,gBAGlDA,KAHkD;AAAA,MAIlDC,IAJkD,gBAIlDA,IAJkD;AAAA,MAKlDC,MALkD,gBAKlDA,MALkD;AAAA,MAMlDC,UANkD,gBAMlDA,UANkD;AAAA,MAOlDC,iBAPkD,gBAOlDA,iBAPkD;AAAA,MASrCC,GATqC,gBAQlDC,KARkD,CAShDC,OATgD,CASrCF,GATqC;AAAA,SAapD,oBAAC,SAAD;AAAW,IAAA,CAAC,EAAE,CAAC,CAAD,EAAI,CAAJ;AAAd,KACE,oBAAC,IAAD;AAAM,IAAA,QAAQ,EAAE,CAAhB;AAAmB,IAAA,aAAa,EAAC;AAAjC,KACE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,GAAZ;AAAgB,IAAA,MAAM,EAAC,UAAvB;AAAkC,IAAA,KAAK,EAAC;AAAxC,KACGN,YADH,CADF,EAIE,oBAAC,KAAD;AAAO,IAAA,MAAM,MAAb;AAAc,IAAA,IAAI,EAAC,GAAnB;AAAuB,IAAA,KAAK,EAAC;AAA7B,KACGC,KADH,EAEGC,IAAI,iBAAUA,IAAV,MAFP,CAJF,EAQGC,MAAM,IACL,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,GAAZ;AAAgB,IAAA,KAAK,EAAC;AAAtB,KACGA,MADH,CATJ,EAaGC,UAAU,IACT,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,GAAZ;AAAgB,IAAA,KAAK,EAAC;AAAtB,KACGA,UAAU,CAACK,EADd,QACoBL,UAAU,CAACM,EAD/B,MAdJ,EAkBGL,iBAAiB,IAChB,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,GAAZ;AAAgB,IAAA,KAAK,EAAC;AAAtB,KACGA,iBAAiB,CAACM,iBADrB,CAnBJ,CADF,EAyBE,oBAAC,QAAD,QACE;AAAK,IAAA,GAAG,YAAKV,KAAL,iBAAiBD,YAAjB,CAAR;AAAyC,IAAA,GAAG,EAAEM;AAA9C,IADF,CAzBF,CAboD;AAAA,CAA/C;AA4CP,OAAO,IAAMM,2BAA2B,GAAGnB,uBAAuB,CAChEK,UADgE;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,EAA3D","sourcesContent":["import React from \"react\"\n\nimport { BorderBox, Flex, Serif } from \"@artsy/palette\"\nimport { ItemReview_artwork } from \"__generated__/ItemReview_artwork.graphql\"\nimport { createFragmentContainer, graphql } from \"react-relay\"\nimport styled from \"styled-components\"\n\ninterface ItemReviewProps {\n  artwork: ItemReview_artwork\n}\n\nconst ImageBox = styled.div`\n  flex: 0 1 auto;\n  img {\n    max-width: 185px;\n    max-height: 375px;\n    display: block;\n    margin: 0;\n  }\n`\n\nexport const ItemReview: React.SFC<ItemReviewProps> = ({\n  artwork: {\n    artist_names,\n    title,\n    date,\n    medium,\n    dimensions,\n    attribution_class,\n    image: {\n      resized: { url },\n    },\n  },\n}) => (\n  <BorderBox p={[2, 3]}>\n    <Flex flexGrow={1} flexDirection=\"column\">\n      <Serif size=\"2\" weight=\"semibold\" color=\"black60\">\n        {artist_names}\n      </Serif>\n      <Serif italic size=\"2\" color=\"black60\">\n        {title}\n        {date && `, (${date})`}\n      </Serif>\n      {medium && (\n        <Serif size=\"2\" color=\"black60\">\n          {medium}\n        </Serif>\n      )}\n      {dimensions && (\n        <Serif size=\"2\" color=\"black60\">\n          {dimensions.in} ({dimensions.cm})\n        </Serif>\n      )}\n      {attribution_class && (\n        <Serif size=\"2\" color=\"black60\">\n          {attribution_class.short_description}\n        </Serif>\n      )}\n    </Flex>\n    <ImageBox>\n      <img alt={`${title} by ${artist_names}`} src={url} />\n    </ImageBox>\n  </BorderBox>\n)\n\nexport const ItemReviewFragmentContainer = createFragmentContainer(\n  ItemReview,\n  graphql`\n    fragment ItemReview_artwork on Artwork {\n      artist_names\n      title\n      date\n      medium\n      dimensions {\n        in\n        cm\n      }\n      attribution_class {\n        short_description\n      }\n      image {\n        resized(width: 185) {\n          url\n        }\n      }\n    }\n  `\n)\n"]}]}