{"remainingRequest":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/eve/development/reaction/src/Artsy/Router/buildClientApp.tsx","dependencies":[{"path":"/Users/eve/development/reaction/src/Artsy/Router/buildClientApp.tsx","mtime":1535727457000},{"path":"/Users/eve/development/reaction/.babelrc","mtime":1537112679000},{"path":"/Users/eve/development/reaction/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { createEnvironment } from \"../Relay/createEnvironment\";\nimport { Boot } from \"./Components/Boot\";\nimport { Hydrator } from \"./Components/Hydrator\";\nimport BrowserProtocol from \"farce/lib/BrowserProtocol\";\nimport HashProtocol from \"farce/lib/HashProtocol\";\nimport MemoryProtocol from \"farce/lib/MemoryProtocol\";\nimport queryMiddleware from \"farce/lib/queryMiddleware\";\nimport { Resolver } from \"found-relay\";\nimport createInitialFarceRouter from \"found/lib/createInitialFarceRouter\";\nimport createRender from \"found/lib/createRender\";\nimport { loadComponents } from \"loadable-components\";\nimport React from \"react\";\nimport { getUser } from \"../../Utils/getUser\";\nexport function buildClientApp(config) {\n  return new Promise(\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee(resolve, reject) {\n      var _config$context, context, _config$history, history, _config$initialRoute, initialRoute, _config$routes, routes, relayNetwork, user, relayBootstrap, _user, relayEnvironment, getHistoryProtocol, historyMiddlewares, resolver, render, Router, _ClientApp;\n\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _config$context = config.context, context = _config$context === void 0 ? {} : _config$context, _config$history = config.history, history = _config$history === void 0 ? {} : _config$history, _config$initialRoute = config.initialRoute, initialRoute = _config$initialRoute === void 0 ? \"/\" : _config$initialRoute, _config$routes = config.routes, routes = _config$routes === void 0 ? [] : _config$routes;\n              relayNetwork = context.relayNetwork, user = context.user;\n              relayBootstrap = JSON.parse(window.__RELAY_BOOTSTRAP__ || \"{}\");\n              _user = getUser(user);\n              relayEnvironment = createEnvironment({\n                cache: relayBootstrap,\n                user: _user,\n                relayNetwork: relayNetwork\n              });\n\n              getHistoryProtocol = function getHistoryProtocol() {\n                switch (history.protocol) {\n                  case \"browser\":\n                    return new BrowserProtocol();\n\n                  case \"hash\":\n                    return new HashProtocol();\n\n                  case \"memory\":\n                    return new MemoryProtocol(initialRoute);\n\n                  default:\n                    return new BrowserProtocol();\n                }\n              };\n\n              historyMiddlewares = [queryMiddleware];\n              resolver = new Resolver(relayEnvironment);\n              render = createRender({});\n              _context.next = 12;\n              return createInitialFarceRouter({\n                historyProtocol: getHistoryProtocol(),\n                historyMiddlewares: historyMiddlewares,\n                historyOptions: history.options,\n                routeConfig: routes,\n                resolver: resolver,\n                render: render\n              });\n\n            case 12:\n              Router = _context.sent;\n              _context.prev = 13;\n              _context.next = 16;\n              return loadComponents();\n\n            case 16:\n              _context.next = 20;\n              break;\n\n            case 18:\n              _context.prev = 18;\n              _context.t0 = _context[\"catch\"](13);\n\n            case 20:\n              _ClientApp = function _ClientApp() {\n                return React.createElement(Boot, {\n                  context: context,\n                  user: _user,\n                  relayEnvironment: relayEnvironment,\n                  resolver: resolver,\n                  routes: routes\n                }, React.createElement(Hydrator, null, React.createElement(Router, {\n                  resolver: resolver\n                })));\n              };\n\n              resolve({\n                ClientApp: _ClientApp\n              });\n              _context.next = 27;\n              break;\n\n            case 24:\n              _context.prev = 24;\n              _context.t1 = _context[\"catch\"](0);\n              console.error(\"[Artsy/Router/buildClientApp]\", _context.t1);\n\n            case 27:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[0, 24], [13, 18]]);\n    }));\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n}",{"version":3,"sources":["/Users/eve/development/reaction/src/Artsy/Router/buildClientApp.tsx"],"names":["createEnvironment","Boot","Hydrator","BrowserProtocol","HashProtocol","MemoryProtocol","queryMiddleware","Resolver","createInitialFarceRouter","createRender","loadComponents","React","getUser","buildClientApp","config","Promise","resolve","reject","context","history","initialRoute","routes","relayNetwork","user","relayBootstrap","JSON","parse","window","__RELAY_BOOTSTRAP__","_user","relayEnvironment","cache","getHistoryProtocol","protocol","historyMiddlewares","resolver","render","historyProtocol","historyOptions","options","routeConfig","Router","ClientApp","console","error"],"mappings":"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","sourcesContent":["import { createEnvironment } from \"Artsy/Relay/createEnvironment\"\nimport { Boot } from \"Artsy/Router/Components/Boot\"\nimport { Hydrator } from \"Artsy/Router/Components/Hydrator\"\nimport BrowserProtocol from \"farce/lib/BrowserProtocol\"\nimport HashProtocol from \"farce/lib/HashProtocol\"\nimport MemoryProtocol from \"farce/lib/MemoryProtocol\"\nimport queryMiddleware from \"farce/lib/queryMiddleware\"\nimport { Resolver } from \"found-relay\"\nimport createInitialFarceRouter from \"found/lib/createInitialFarceRouter\"\nimport createRender from \"found/lib/createRender\"\nimport { loadComponents } from \"loadable-components\"\nimport React, { ComponentType } from \"react\"\nimport { getUser } from \"Utils/getUser\"\nimport { RouterConfig } from \"./\"\n\ninterface Resolve {\n  ClientApp: ComponentType<any>\n}\n\nexport function buildClientApp(config: RouterConfig): Promise<Resolve> {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const {\n        context = {},\n        history = {},\n        initialRoute = \"/\",\n        routes = [],\n      } = config\n\n      const { relayNetwork, user } = context\n      const relayBootstrap = JSON.parse(window.__RELAY_BOOTSTRAP__ || \"{}\")\n      const _user = getUser(user)\n      const relayEnvironment = createEnvironment({\n        cache: relayBootstrap,\n        user: _user,\n        relayNetwork,\n      })\n\n      const getHistoryProtocol = () => {\n        switch (history.protocol) {\n          case \"browser\":\n            return new BrowserProtocol()\n          case \"hash\":\n            return new HashProtocol()\n          case \"memory\":\n            return new MemoryProtocol(initialRoute)\n          default:\n            return new BrowserProtocol()\n        }\n      }\n\n      const historyMiddlewares = [queryMiddleware]\n      const resolver = new Resolver(relayEnvironment)\n      const render = createRender({})\n      const Router = await createInitialFarceRouter({\n        historyProtocol: getHistoryProtocol(),\n        historyMiddlewares,\n        historyOptions: history.options,\n        routeConfig: routes,\n        resolver,\n        render,\n      })\n\n      try {\n        await loadComponents()\n      } catch (error) {\n        // FIXME: https://github.com/smooth-code/loadable-components/pull/93\n      }\n\n      const ClientApp = () => {\n        return (\n          <Boot\n            context={context}\n            user={_user}\n            relayEnvironment={relayEnvironment}\n            resolver={resolver}\n            routes={routes}\n          >\n            <Hydrator>\n              <Router resolver={resolver} />\n            </Hydrator>\n          </Boot>\n        )\n      }\n\n      resolve({\n        ClientApp,\n      })\n    } catch (error) {\n      console.error(\"[Artsy/Router/buildClientApp]\", error)\n    }\n  })\n}\n"]}]}