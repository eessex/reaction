{"remainingRequest":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js??ref--5-1!/Users/eve/development/reaction/src/Utils/metaphysics.ts","dependencies":[{"path":"/Users/eve/development/reaction/src/Utils/metaphysics.ts","mtime":1519658991000},{"path":"/Users/eve/development/reaction/.babelrc","mtime":1527877289000},{"path":"/Users/eve/development/reaction/node_modules/cache-loader/dist/cjs.js","mtime":1510929699000},{"path":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js","mtime":1509489566000}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.metaphysics = metaphysics;\nexports.default = query;\n\nrequire(\"isomorphic-fetch\");\n\nvar sharify = _interopRequireWildcard(require(\"sharify\"));\n\nvar _errors = require(\"./errors\");\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction metaphysics(payload, user) {\n  var checkStatus = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var headers = {\n    \"Content-Type\": \"application/json\",\n    \"User-Agent\": \"Reaction\"\n  };\n  return fetch(sharify.data.METAPHYSICS_ENDPOINT, {\n    method: \"POST\",\n    headers: !!user ? _extends({}, headers, {\n      \"X-USER-ID\": user && user.id,\n      \"X-ACCESS-TOKEN\": user && user.accessToken\n    }) : headers,\n    body: JSON.stringify(payload)\n  }).then(function (response) {\n    if (!checkStatus || response.status >= 200 && response.status < 300) {\n      return response;\n    } else {\n      var error = new _errors.NetworkError(response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }).then(function (response) {\n    return response.json();\n  });\n}\n\nfunction query(query) {\n  return metaphysics({\n    query: query\n  }).then(function (_ref) {\n    var data = _ref.data;\n    return data;\n  });\n}",{"version":3,"sources":["src/Utils/metaphysics.ts"],"names":["metaphysics","payload","user","checkStatus","headers","fetch","sharify","data","METAPHYSICS_ENDPOINT","method","id","accessToken","body","JSON","stringify","then","response","status","error","statusText","json","query"],"mappings":";;;;;;;;AAAA;;AACA;;AACA;;;;;;AAEO,SAASA,WAAT,CACLC,OADK,EAELC,IAFK,EAIO;AAAA,MADZC,WACY,uEADW,IACX;AACZ,MAAMC,UAAU;AACd,oBAAgB,kBADF;AAEd,kBAAc;AAFA,GAAhB;AAIA,SAAOC,MAAMC,QAAQC,IAAR,CAAaC,oBAAnB,EAAyC;AAC9CC,YAAQ,MADsC;AAE9CL,aAAS,CAAC,CAACF,IAAF,gBAEAE,OAFA;AAGH,mBAAaF,QAAQA,KAAKQ,EAHvB;AAIH,wBAAkBR,QAAQA,KAAKS;AAJ5B,SAMLP,OAR0C;AAS9CQ,UAAMC,KAAKC,SAAL,CAAeb,OAAf;AATwC,GAAzC,EAWJc,IAXI,CAWC,oBAAY;AAChB,QAAI,CAACZ,WAAD,IAAiBa,SAASC,MAAT,IAAmB,GAAnB,IAA0BD,SAASC,MAAT,GAAkB,GAAjE,EAAuE;AACrE,aAAOD,QAAP;AACD,KAFD,MAEO;AACL,UAAME,QAAQ,yBAAiBF,SAASG,UAA1B,CAAd;AACAD,YAAMF,QAAN,GAAiBA,QAAjB;AACA,YAAME,KAAN;AACD;AACF,GAnBI,EAoBJH,IApBI,CAoBI;AAAA,WAAYC,SAASI,IAAT,EAAZ;AAAA,GApBJ,CAAP;AAqBD;;AAEc,SAASC,KAAT,CAAkBA,KAAlB,EAA6C;AAC1D,SAAOrB,YAAyB;AAAEqB;AAAF,GAAzB,EAAoCN,IAApC,CAAyC;AAAA,QAAGR,IAAH,QAAGA,IAAH;AAAA,WAAcA,IAAd;AAAA,GAAzC,CAAP;AACD","file":"/Users/eve/development/reaction/src/Utils/metaphysics.ts","sourceRoot":"/Users/eve/development/reaction","sourcesContent":["import \"isomorphic-fetch\"\nimport * as sharify from \"sharify\"\nimport { NetworkError } from \"./errors\"\n\nexport function metaphysics<T>(\n  payload: { query: string; variables?: object },\n  user?: User,\n  checkStatus: boolean = true\n): Promise<T> {\n  const headers = {\n    \"Content-Type\": \"application/json\",\n    \"User-Agent\": \"Reaction\",\n  }\n  return fetch(sharify.data.METAPHYSICS_ENDPOINT, {\n    method: \"POST\",\n    headers: !!user\n      ? {\n          ...headers,\n          \"X-USER-ID\": user && user.id,\n          \"X-ACCESS-TOKEN\": user && user.accessToken,\n        }\n      : headers,\n    body: JSON.stringify(payload),\n  })\n    .then(response => {\n      if (!checkStatus || (response.status >= 200 && response.status < 300)) {\n        return response\n      } else {\n        const error = new NetworkError(response.statusText)\n        error.response = response\n        throw error\n      }\n    })\n    .then<T>(response => response.json())\n}\n\nexport default function query<T>(query: string): Promise<T> {\n  return metaphysics<{ data: T }>({ query }).then(({ data }) => data)\n}\n"]}]}