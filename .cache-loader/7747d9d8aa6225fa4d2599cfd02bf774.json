{"remainingRequest":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/eve/development/reaction/src/Components/Truncator.tsx","dependencies":[{"path":"/Users/eve/development/reaction/src/Components/Truncator.tsx","mtime":1530111312000},{"path":"/Users/eve/development/reaction/.babelrc","mtime":1537112679000},{"path":"/Users/eve/development/reaction/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import React from \"react\";\nimport ReactDOM from \"react-dom/server\";\nimport { ErrorBoundary } from \"./ErrorBoundary\";\nexport var Truncator = function Truncator(_ref) {\n  var ReadMoreLink = _ref.ReadMoreLink,\n      children = _ref.children,\n      ellipsis = _ref.ellipsis,\n      maxLineCount = _ref.maxLineCount;\n  var html = ReactDOM.renderToStaticMarkup(React.createElement(\"span\", null, children));\n  var readMoreHTML = null;\n\n  if (ReadMoreLink) {\n    readMoreHTML = ReactDOM.renderToStaticMarkup(ReadMoreLink());\n  } // FIXME: Make safe for tests\n\n\n  var HTMLEllipsis;\n\n  if (process.env.NODE_ENV !== \"test\") {\n    var responsiveHOC = require(\"react-lines-ellipsis/lib/responsiveHOC\");\n\n    HTMLEllipsis = responsiveHOC()(require(\"react-lines-ellipsis/lib/html\"));\n  } else {\n    HTMLEllipsis = function HTMLEllipsis(_ref2) {\n      var unsafeHTML = _ref2.unsafeHTML;\n      return React.createElement(\"div\", {\n        dangerouslySetInnerHTML: {\n          __html: unsafeHTML\n        }\n      });\n    };\n  }\n\n  return React.createElement(ErrorBoundary, null, React.createElement(HTMLEllipsis, {\n    unsafeHTML: html,\n    maxLine: maxLineCount || 2,\n    ellipsis: ellipsis,\n    ellipsisHTML: readMoreHTML\n  }));\n};",{"version":3,"sources":["/Users/eve/development/reaction/src/Components/Truncator.tsx"],"names":["React","ReactDOM","ErrorBoundary","Truncator","ReadMoreLink","children","ellipsis","maxLineCount","html","renderToStaticMarkup","readMoreHTML","HTMLEllipsis","process","env","NODE_ENV","responsiveHOC","require","unsafeHTML","__html"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,SAASC,aAAT;AAQA,OAAO,IAAMC,SAA2B,GAAG,SAA9BA,SAA8B,OAKrC;AAAA,MAJJC,YAII,QAJJA,YAII;AAAA,MAHJC,QAGI,QAHJA,QAGI;AAAA,MAFJC,QAEI,QAFJA,QAEI;AAAA,MADJC,YACI,QADJA,YACI;AACJ,MAAMC,IAAI,GAAGP,QAAQ,CAACQ,oBAAT,CAA8B,kCAAOJ,QAAP,CAA9B,CAAb;AACA,MAAIK,YAAY,GAAG,IAAnB;;AAEA,MAAIN,YAAJ,EAAkB;AAChBM,IAAAA,YAAY,GAAGT,QAAQ,CAACQ,oBAAT,CAA8BL,YAAY,EAA1C,CAAf;AACD,GANG,CAQJ;;;AACA,MAAIO,YAAJ;;AAEA,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,MAA7B,EAAqC;AACnC,QAAMC,aAAa,GAAGC,OAAO,CAAC,wCAAD,CAA7B;;AACAL,IAAAA,YAAY,GAAGI,aAAa,GAAGC,OAAO,CAAC,+BAAD,CAAV,CAA5B;AACD,GAHD,MAGO;AACLL,IAAAA,YAAY,GAAG;AAAA,UAAGM,UAAH,SAAGA,UAAH;AAAA,aACb;AACE,QAAA,uBAAuB,EAAE;AACvBC,UAAAA,MAAM,EAAED;AADe;AAD3B,QADa;AAAA,KAAf;AAOD;;AAED,SACE,oBAAC,aAAD,QACE,oBAAC,YAAD;AACE,IAAA,UAAU,EAAET,IADd;AAEE,IAAA,OAAO,EAAED,YAAY,IAAI,CAF3B;AAGE,IAAA,QAAQ,EAAED,QAHZ;AAIE,IAAA,YAAY,EAAEI;AAJhB,IADF,CADF;AAUD,CAvCM","sourcesContent":["import React from \"react\"\nimport ReactDOM from \"react-dom/server\"\nimport { ErrorBoundary } from \"./ErrorBoundary\"\n\ninterface Props {\n  maxLineCount?: number\n  ellipsis?: string\n  ReadMoreLink?: () => any\n}\n\nexport const Truncator: React.SFC<Props> = ({\n  ReadMoreLink,\n  children,\n  ellipsis,\n  maxLineCount,\n}) => {\n  const html = ReactDOM.renderToStaticMarkup(<span>{children}</span>)\n  let readMoreHTML = null\n\n  if (ReadMoreLink) {\n    readMoreHTML = ReactDOM.renderToStaticMarkup(ReadMoreLink())\n  }\n\n  // FIXME: Make safe for tests\n  let HTMLEllipsis\n\n  if (process.env.NODE_ENV !== \"test\") {\n    const responsiveHOC = require(\"react-lines-ellipsis/lib/responsiveHOC\")\n    HTMLEllipsis = responsiveHOC()(require(\"react-lines-ellipsis/lib/html\"))\n  } else {\n    HTMLEllipsis = ({ unsafeHTML }) => (\n      <div\n        dangerouslySetInnerHTML={{\n          __html: unsafeHTML,\n        }}\n      />\n    )\n  }\n\n  return (\n    <ErrorBoundary>\n      <HTMLEllipsis\n        unsafeHTML={html}\n        maxLine={maxLineCount || 2}\n        ellipsis={ellipsis}\n        ellipsisHTML={readMoreHTML}\n      />\n    </ErrorBoundary>\n  )\n}\n"]}]}