{"remainingRequest":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/eve/development/reaction/src/Apps/Order/Routes/Payment/index.tsx","dependencies":[{"path":"/Users/eve/development/reaction/src/Apps/Order/Routes/Payment/index.tsx","mtime":1538070271000},{"path":"/Users/eve/development/reaction/.babelrc","mtime":1537112679000},{"path":"/Users/eve/development/reaction/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/eve/development/reaction/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var _graphql, _graphql2;\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { Button, Checkbox, Flex, Join, Serif, Spacer } from \"@artsy/palette\";\nimport { BuyNowStepper } from \"../../Components/BuyNowStepper\";\nimport { validatePresence } from \"../../Components/Validators\";\nimport { AddressForm, emptyAddress } from \"../../Components/AddressForm\";\nimport { CreditCardInput } from \"../../Components/CreditCardInput\";\nimport { Helper } from \"../../Components/Helper\";\nimport { TransactionSummaryFragmentContainer as TransactionSummary } from \"../../Components/TransactionSummary\";\nimport { TwoColumnLayout } from \"../../Components/TwoColumnLayout\";\nimport { ErrorModal } from \"../../../../Components/Modal/ErrorModal\";\nimport React, { Component } from \"react\";\nimport { commitMutation, createFragmentContainer, graphql } from \"react-relay\";\nimport { injectStripe } from \"react-stripe-elements\";\nimport { Collapse } from \"../../../../Styleguide\";\nimport { Col, Row } from \"../../../../Styleguide/Elements/Grid\";\nimport { Responsive } from \"../../../../Utils/Responsive\";\nexport var ContinueButton = function ContinueButton(props) {\n  return React.createElement(Button, _extends({\n    size: \"large\",\n    width: \"100%\"\n  }, props), \"Continue\");\n};\nexport var PaymentRoute =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PaymentRoute, _Component);\n\n  function PaymentRoute() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, PaymentRoute);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PaymentRoute)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"state\", {\n      hideBillingAddress: true,\n      stripeError: null,\n      isCommittingMutation: false,\n      isErrorModalOpen: false,\n      errorModalMessage: null,\n      address: _this.startingAddress,\n      addressErrors: {}\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onContinue\", function () {\n      _this.setState({\n        isCommittingMutation: true\n      }, function () {\n        if (_this.needsAddress()) {\n          var errors = _this.validateAddress(_this.state.address);\n\n          if (Object.keys(errors).filter(function (key) {\n            return errors[key];\n          }).length > 0) {\n            _this.setState({\n              isCommittingMutation: false,\n              addressErrors: errors\n            });\n\n            return;\n          }\n        }\n\n        var address = _this.state.address;\n\n        var stripeBillingAddress = _this.getStripeBillingAddress(address);\n\n        _this.props.stripe.createToken(stripeBillingAddress).then(function (_ref) {\n          var error = _ref.error,\n              token = _ref.token;\n\n          if (error) {\n            _this.setState({\n              isCommittingMutation: false,\n              stripeError: error\n            });\n          } else {\n            _this.createCreditCard({\n              token: token.id\n            });\n          }\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleChangeHideBillingAddress\", function (hideBillingAddress) {\n      _this.setState({\n        hideBillingAddress: hideBillingAddress\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onAddressChange\", function (address, key) {\n      _this.setState({\n        address: address,\n        addressErrors: _objectSpread({}, _this.state.addressErrors, _defineProperty({}, key, _this.validateAddress(address)[key]))\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onCloseModal\", function () {\n      _this.setState({\n        isErrorModalOpen: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"isPickup\", function () {\n      return _this.props.order.requestedFulfillment.__typename === \"Pickup\";\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"needsAddress\", function () {\n      return _this.isPickup() || !_this.state.hideBillingAddress;\n    });\n\n    return _this;\n  }\n\n  _createClass(PaymentRoute, [{\n    key: \"validateAddress\",\n    value: function validateAddress(address) {\n      var name = address.name,\n          addressLine1 = address.addressLine1,\n          city = address.city,\n          region = address.region,\n          country = address.country,\n          postalCode = address.postalCode;\n      return {\n        name: validatePresence(name),\n        addressLine1: validatePresence(addressLine1),\n        city: validatePresence(city),\n        region: validatePresence(region),\n        country: validatePresence(country),\n        postalCode: validatePresence(postalCode)\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var order = this.props.order;\n      var _this$state = this.state,\n          stripeError = _this$state.stripeError,\n          isCommittingMutation = _this$state.isCommittingMutation,\n          address = _this$state.address,\n          addressErrors = _this$state.addressErrors;\n      return React.createElement(React.Fragment, null, React.createElement(Row, null, React.createElement(Col, null, React.createElement(BuyNowStepper, {\n        currentStep: \"payment\"\n      }))), React.createElement(Spacer, {\n        mb: 3\n      }), React.createElement(Responsive, null, function (_ref2) {\n        var xs = _ref2.xs;\n        return React.createElement(TwoColumnLayout, {\n          Content: React.createElement(Flex, {\n            flexDirection: \"column\",\n            style: isCommittingMutation ? {\n              pointerEvents: \"none\"\n            } : {}\n          }, React.createElement(Join, {\n            separator: React.createElement(Spacer, {\n              mb: 3\n            })\n          }, React.createElement(Flex, {\n            flexDirection: \"column\"\n          }, React.createElement(Serif, {\n            mb: 1,\n            size: \"3t\",\n            color: \"black100\",\n            lineHeight: 18\n          }, \"Credit card\"), React.createElement(CreditCardInput, {\n            error: stripeError,\n            onChange: function onChange(response) {\n              _this2.setState({\n                stripeError: response.error\n              });\n            }\n          })), !_this2.isPickup() && React.createElement(Checkbox, {\n            selected: _this2.state.hideBillingAddress,\n            onSelect: _this2.handleChangeHideBillingAddress\n          }, \"Use shipping address.\"), React.createElement(Collapse, {\n            open: _this2.needsAddress()\n          }, React.createElement(AddressForm, {\n            defaultValue: address,\n            errors: addressErrors,\n            onChange: _this2.onAddressChange,\n            billing: true\n          })), !xs && React.createElement(ContinueButton, {\n            onClick: _this2.onContinue,\n            loading: isCommittingMutation\n          })), React.createElement(Spacer, {\n            mb: 3\n          })),\n          Sidebar: React.createElement(Flex, {\n            flexDirection: \"column\"\n          }, React.createElement(TransactionSummary, {\n            order: order,\n            mb: [2, 3]\n          }), React.createElement(Helper, {\n            artworkId: order.lineItems.edges[0].node.artwork.id\n          }), xs && React.createElement(React.Fragment, null, React.createElement(Spacer, {\n            mb: 3\n          }), React.createElement(ContinueButton, {\n            onClick: _this2.onContinue,\n            loading: isCommittingMutation\n          })))\n        });\n      }), React.createElement(ErrorModal, {\n        onClose: this.onCloseModal,\n        show: this.state.isErrorModalOpen,\n        detailText: this.state.errorModalMessage\n      }));\n    }\n  }, {\n    key: \"getStripeBillingAddress\",\n    value: function getStripeBillingAddress(formAddress) {\n      var selectedBillingAddress = this.needsAddress() ? this.state.address : this.props.order.requestedFulfillment;\n      var name = selectedBillingAddress.name,\n          addressLine1 = selectedBillingAddress.addressLine1,\n          addressLine2 = selectedBillingAddress.addressLine2,\n          city = selectedBillingAddress.city,\n          region = selectedBillingAddress.region,\n          postalCode = selectedBillingAddress.postalCode,\n          country = selectedBillingAddress.country;\n      return {\n        name: name,\n        address_line1: addressLine1,\n        address_line2: addressLine2,\n        address_city: city,\n        address_state: region,\n        address_zip: postalCode,\n        address_country: country\n      };\n    }\n  }, {\n    key: \"createCreditCard\",\n    value: function createCreditCard(_ref3) {\n      var _this3 = this;\n\n      var token = _ref3.token;\n      commitMutation(this.props.relay.environment, {\n        onCompleted: function onCompleted(data, errors) {\n          var creditCardOrError = data.createCreditCard.creditCardOrError;\n\n          if (creditCardOrError.creditCard) {\n            _this3.setOrderPayment({\n              creditCardId: creditCardOrError.creditCard.id\n            });\n          } else {\n            _this3.onMutationError(errors || creditCardOrError.mutationError, creditCardOrError.mutationError && creditCardOrError.mutationError.message);\n          }\n        },\n        onError: this.onMutationError.bind(this),\n        mutation: _graphql || (_graphql = function _graphql() {\n          var node = require(\"../../../../__generated__/PaymentRouteCreateCreditCardMutation.graphql\");\n\n          if (node.hash && node.hash !== \"dc0ed2493175f2ca5eff958502ae0123\") {\n            console.error(\"The definition of 'PaymentRouteCreateCreditCardMutation' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.\");\n          }\n\n          return require(\"../../../../__generated__/PaymentRouteCreateCreditCardMutation.graphql\");\n        }),\n        variables: {\n          input: {\n            token: token\n          }\n        }\n      });\n    }\n  }, {\n    key: \"setOrderPayment\",\n    value: function setOrderPayment(_ref4) {\n      var _this4 = this;\n\n      var creditCardId = _ref4.creditCardId;\n      commitMutation(this.props.relay.environment, {\n        onCompleted: function onCompleted(data, errors) {\n          _this4.setState({\n            isCommittingMutation: false\n          });\n\n          var orderOrError = data.setOrderPayment.orderOrError;\n\n          if (orderOrError.order) {\n            _this4.props.router.push(\"/order2/\".concat(_this4.props.order.id, \"/review\"));\n          } else {\n            _this4.onMutationError(errors || orderOrError);\n          }\n        },\n        onError: this.onMutationError.bind(this),\n        mutation: _graphql2 || (_graphql2 = function _graphql2() {\n          var node = require(\"../../../../__generated__/PaymentRouteSetOrderPaymentMutation.graphql\");\n\n          if (node.hash && node.hash !== \"f4236a9316275fc5f7e068010243cc7b\") {\n            console.error(\"The definition of 'PaymentRouteSetOrderPaymentMutation' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.\");\n          }\n\n          return require(\"../../../../__generated__/PaymentRouteSetOrderPaymentMutation.graphql\");\n        }),\n        variables: {\n          input: {\n            orderId: this.props.order.id,\n            creditCardId: creditCardId\n          }\n        }\n      });\n    }\n  }, {\n    key: \"onMutationError\",\n    value: function onMutationError(errors, errorModalMessage) {\n      console.error(\"Order/Routes/Payment/index.tsx\", errors);\n      this.setState({\n        isCommittingMutation: false,\n        isErrorModalOpen: true,\n        errorModalMessage: errorModalMessage\n      });\n    }\n  }, {\n    key: \"startingAddress\",\n    get: function get() {\n      return _objectSpread({}, emptyAddress, {\n        country: \"US\"\n      });\n    }\n  }]);\n\n  return PaymentRoute;\n}(Component);\nexport var PaymentFragmentContainer = createFragmentContainer(injectStripe(PaymentRoute), {\n  order: function order() {\n    var node = require(\"../../../../__generated__/Payment_order.graphql\");\n\n    if (node.hash && node.hash !== \"3cdee803a766cd0d71a9daeb6caba12a\") {\n      console.error(\"The definition of 'Payment_order' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.\");\n    }\n\n    return require(\"../../../../__generated__/Payment_order.graphql\");\n  }\n});",{"version":3,"sources":["/Users/eve/development/reaction/src/Apps/Order/Routes/Payment/index.tsx"],"names":["Button","Checkbox","Flex","Join","Serif","Spacer","BuyNowStepper","validatePresence","AddressForm","emptyAddress","CreditCardInput","Helper","TransactionSummaryFragmentContainer","TransactionSummary","TwoColumnLayout","ErrorModal","React","Component","commitMutation","createFragmentContainer","graphql","injectStripe","Collapse","Col","Row","Responsive","ContinueButton","props","PaymentRoute","hideBillingAddress","stripeError","isCommittingMutation","isErrorModalOpen","errorModalMessage","address","startingAddress","addressErrors","setState","needsAddress","errors","validateAddress","state","Object","keys","filter","key","length","stripeBillingAddress","getStripeBillingAddress","stripe","createToken","then","error","token","createCreditCard","id","order","requestedFulfillment","__typename","isPickup","name","addressLine1","city","region","country","postalCode","xs","pointerEvents","response","handleChangeHideBillingAddress","onAddressChange","onContinue","lineItems","edges","node","artwork","onCloseModal","formAddress","selectedBillingAddress","addressLine2","address_line1","address_line2","address_city","address_state","address_zip","address_country","relay","environment","onCompleted","data","creditCardOrError","creditCard","setOrderPayment","creditCardId","onMutationError","mutationError","message","onError","bind","mutation","variables","input","orderOrError","router","push","orderId","console","PaymentFragmentContainer"],"mappings":"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","sourcesContent":["import { Button, Checkbox, Flex, Join, Serif, Spacer } from \"@artsy/palette\"\nimport { Payment_order } from \"__generated__/Payment_order.graphql\"\nimport { PaymentRouteCreateCreditCardMutation } from \"__generated__/PaymentRouteCreateCreditCardMutation.graphql\"\nimport { PaymentRouteSetOrderPaymentMutation } from \"__generated__/PaymentRouteSetOrderPaymentMutation.graphql\"\nimport { BuyNowStepper } from \"Apps/Order/Components/BuyNowStepper\"\nimport { validatePresence } from \"Apps/Order/Components/Validators\"\nimport {\n  Address,\n  AddressChangeHandler,\n  AddressErrors,\n  AddressForm,\n  emptyAddress,\n} from \"../../Components/AddressForm\"\n\nimport { CreditCardInput } from \"Apps/Order/Components/CreditCardInput\"\nimport { Helper } from \"Apps/Order/Components/Helper\"\nimport { TransactionSummaryFragmentContainer as TransactionSummary } from \"Apps/Order/Components/TransactionSummary\"\nimport { TwoColumnLayout } from \"Apps/Order/Components/TwoColumnLayout\"\nimport { ErrorModal } from \"Components/Modal/ErrorModal\"\nimport { Router } from \"found\"\nimport React, { Component } from \"react\"\nimport {\n  commitMutation,\n  createFragmentContainer,\n  graphql,\n  RelayRefetchProp,\n} from \"react-relay\"\nimport { injectStripe, ReactStripeElements } from \"react-stripe-elements\"\nimport { Collapse } from \"Styleguide\"\nimport { Col, Row } from \"Styleguide/Elements/Grid\"\nimport { Responsive } from \"Utils/Responsive\"\n\nexport const ContinueButton = props => (\n  <Button size=\"large\" width=\"100%\" {...props}>\n    Continue\n  </Button>\n)\n\nexport interface PaymentProps extends ReactStripeElements.InjectedStripeProps {\n  order: Payment_order\n  relay?: RelayRefetchProp\n  router: Router\n}\n\ninterface PaymentState {\n  hideBillingAddress: boolean\n  address: Address\n  addressErrors: AddressErrors\n  stripeError: stripe.Error\n  isCommittingMutation: boolean\n  isErrorModalOpen: boolean\n  errorModalMessage: string\n}\n\nexport class PaymentRoute extends Component<PaymentProps, PaymentState> {\n  state = {\n    hideBillingAddress: true,\n    stripeError: null,\n    isCommittingMutation: false,\n    isErrorModalOpen: false,\n    errorModalMessage: null,\n    address: this.startingAddress,\n    addressErrors: {},\n  }\n\n  get startingAddress(): Address {\n    return {\n      ...emptyAddress,\n      country: \"US\",\n    }\n  }\n\n  onContinue: () => void = () => {\n    this.setState({ isCommittingMutation: true }, () => {\n      if (this.needsAddress()) {\n        const errors = this.validateAddress(this.state.address)\n        if (Object.keys(errors).filter(key => errors[key]).length > 0) {\n          this.setState({ isCommittingMutation: false, addressErrors: errors })\n          return\n        }\n      }\n\n      const { address } = this.state\n      const stripeBillingAddress = this.getStripeBillingAddress(address)\n      this.props.stripe\n        .createToken(stripeBillingAddress)\n        .then(({ error, token }) => {\n          if (error) {\n            this.setState({\n              isCommittingMutation: false,\n              stripeError: error,\n            })\n          } else {\n            this.createCreditCard({ token: token.id })\n          }\n        })\n    })\n  }\n\n  private validateAddress(address: Address) {\n    const { name, addressLine1, city, region, country, postalCode } = address\n    return {\n      name: validatePresence(name),\n      addressLine1: validatePresence(addressLine1),\n      city: validatePresence(city),\n      region: validatePresence(region),\n      country: validatePresence(country),\n      postalCode: validatePresence(postalCode),\n    }\n  }\n\n  handleChangeHideBillingAddress = (hideBillingAddress: boolean) => {\n    this.setState({ hideBillingAddress })\n  }\n\n  onAddressChange: AddressChangeHandler = (address, key) => {\n    this.setState({\n      address,\n      addressErrors: {\n        ...this.state.addressErrors,\n        [key]: this.validateAddress(address)[key],\n      },\n    })\n  }\n\n  onCloseModal = () => {\n    this.setState({ isErrorModalOpen: false })\n  }\n\n  render() {\n    const { order } = this.props\n    const {\n      stripeError,\n      isCommittingMutation,\n      address,\n      addressErrors,\n    } = this.state\n\n    return (\n      <>\n        <Row>\n          <Col>\n            <BuyNowStepper currentStep={\"payment\"} />\n          </Col>\n        </Row>\n\n        <Spacer mb={3} />\n        <Responsive>\n          {({ xs }) => (\n            <TwoColumnLayout\n              Content={\n                <Flex\n                  flexDirection=\"column\"\n                  style={isCommittingMutation ? { pointerEvents: \"none\" } : {}}\n                >\n                  <Join separator={<Spacer mb={3} />}>\n                    <Flex flexDirection=\"column\">\n                      <Serif mb={1} size=\"3t\" color=\"black100\" lineHeight={18}>\n                        Credit card\n                      </Serif>\n                      <CreditCardInput\n                        error={stripeError}\n                        onChange={response => {\n                          this.setState({ stripeError: response.error })\n                        }}\n                      />\n                    </Flex>\n\n                    {!this.isPickup() && (\n                      <Checkbox\n                        selected={this.state.hideBillingAddress}\n                        onSelect={this.handleChangeHideBillingAddress}\n                      >\n                        Use shipping address.\n                      </Checkbox>\n                    )}\n                    <Collapse open={this.needsAddress()}>\n                      <AddressForm\n                        defaultValue={address}\n                        errors={addressErrors}\n                        onChange={this.onAddressChange}\n                        billing\n                      />\n                    </Collapse>\n                    {!xs && (\n                      <ContinueButton\n                        onClick={this.onContinue}\n                        loading={isCommittingMutation}\n                      />\n                    )}\n                  </Join>\n                  <Spacer mb={3} />\n                </Flex>\n              }\n              Sidebar={\n                <Flex flexDirection=\"column\">\n                  <TransactionSummary order={order} mb={[2, 3]} />\n                  <Helper\n                    artworkId={order.lineItems.edges[0].node.artwork.id}\n                  />\n                  {xs && (\n                    <>\n                      <Spacer mb={3} />\n                      <ContinueButton\n                        onClick={this.onContinue}\n                        loading={isCommittingMutation}\n                      />\n                    </>\n                  )}\n                </Flex>\n              }\n            />\n          )}\n        </Responsive>\n\n        <ErrorModal\n          onClose={this.onCloseModal}\n          show={this.state.isErrorModalOpen}\n          detailText={this.state.errorModalMessage}\n        />\n      </>\n    )\n  }\n\n  private getStripeBillingAddress(formAddress: Address): stripe.TokenOptions {\n    const selectedBillingAddress = (this.needsAddress()\n      ? this.state.address\n      : this.props.order.requestedFulfillment) as Address\n    const {\n      name,\n      addressLine1,\n      addressLine2,\n      city,\n      region,\n      postalCode,\n      country,\n    } = selectedBillingAddress\n    return {\n      name,\n      address_line1: addressLine1,\n      address_line2: addressLine2,\n      address_city: city,\n      address_state: region,\n      address_zip: postalCode,\n      address_country: country,\n    }\n  }\n\n  private createCreditCard({ token }) {\n    commitMutation<PaymentRouteCreateCreditCardMutation>(\n      this.props.relay.environment,\n      {\n        onCompleted: (data, errors) => {\n          const {\n            createCreditCard: { creditCardOrError },\n          } = data\n\n          if (creditCardOrError.creditCard) {\n            this.setOrderPayment({\n              creditCardId: creditCardOrError.creditCard.id,\n            })\n          } else {\n            this.onMutationError(\n              errors || creditCardOrError.mutationError,\n              creditCardOrError.mutationError &&\n                creditCardOrError.mutationError.message\n            )\n          }\n        },\n        onError: this.onMutationError.bind(this),\n        mutation: graphql`\n          mutation PaymentRouteCreateCreditCardMutation(\n            $input: CreditCardInput!\n          ) {\n            createCreditCard(input: $input) {\n              creditCardOrError {\n                ... on CreditCardMutationSuccess {\n                  creditCard {\n                    id\n                  }\n                }\n                ... on CreditCardMutationFailure {\n                  mutationError {\n                    type\n                    message\n                    detail\n                  }\n                }\n              }\n            }\n          }\n        `,\n        variables: {\n          input: { token },\n        },\n      }\n    )\n  }\n\n  private setOrderPayment({ creditCardId }) {\n    commitMutation<PaymentRouteSetOrderPaymentMutation>(\n      this.props.relay.environment,\n      {\n        onCompleted: (data, errors) => {\n          this.setState({ isCommittingMutation: false })\n\n          const {\n            setOrderPayment: { orderOrError },\n          } = data\n\n          if (orderOrError.order) {\n            this.props.router.push(`/order2/${this.props.order.id}/review`)\n          } else {\n            this.onMutationError(errors || orderOrError)\n          }\n        },\n        onError: this.onMutationError.bind(this),\n        mutation: graphql`\n          mutation PaymentRouteSetOrderPaymentMutation(\n            $input: SetOrderPaymentInput!\n          ) {\n            setOrderPayment(input: $input) {\n              orderOrError {\n                ... on OrderWithMutationSuccess {\n                  order {\n                    id\n                  }\n                }\n                ... on OrderWithMutationFailure {\n                  error {\n                    type\n                    code\n                    data\n                  }\n                }\n              }\n            }\n          }\n        `,\n        variables: {\n          input: {\n            orderId: this.props.order.id,\n            creditCardId,\n          },\n        },\n      }\n    )\n  }\n\n  private onMutationError(errors, errorModalMessage?) {\n    console.error(\"Order/Routes/Payment/index.tsx\", errors)\n    this.setState({\n      isCommittingMutation: false,\n      isErrorModalOpen: true,\n      errorModalMessage,\n    })\n  }\n\n  private isPickup = () => {\n    return this.props.order.requestedFulfillment.__typename === \"Pickup\"\n  }\n\n  private needsAddress = () => {\n    return this.isPickup() || !this.state.hideBillingAddress\n  }\n}\n\nexport const PaymentFragmentContainer = createFragmentContainer(\n  injectStripe(PaymentRoute),\n  graphql`\n    fragment Payment_order on Order {\n      id\n      requestedFulfillment {\n        __typename\n        ... on Ship {\n          name\n          addressLine1\n          addressLine2\n          city\n          region\n          country\n          postalCode\n        }\n        ... on Pickup {\n          fulfillmentType\n        }\n      }\n      lineItems {\n        edges {\n          node {\n            artwork {\n              id\n            }\n          }\n        }\n      }\n      ...TransactionSummary_order\n    }\n  `\n)\n"]}]}